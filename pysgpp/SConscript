# Copyright (C) 2008-today The SG++ project
# This file is part of the SG++ project. For conditions of distribution and
# use, please see the copyright notice provided with SG++ or at
# sgpp.sparsegrids.org

import os
import sys

Import("*")

# as the dependency tracking for swig is buggy in scons,
# always trigger a "reswig" by removing the swig wrapper
if os.path.exists("pysgpp_wrap.cc"):
  os.remove("pysgpp_wrap.cc")

pyEnv = env.Clone()

pyEnv.AppendUnique(CPPFLAGS=["-w"])
if env["PLATFORM"] == "cygwin":
  pyEnv.Append(LIBS=["python2.7"])
elif env["PLATFORM"] == "darwin":
  pyEnv["SHLIBSUFFIX"] = ".so"

#TODO: bug, plz fix
# add C++ defines for all modules
for module in moduleNames:
  if pyEnv[module]: 
    pyEnv["CPPDEFINES"][module] = "1"

# build python module with swig
swigFlags = ["-c++", "-python", "-fvirtual", "-threads"] # TODO(holzmudd): Added -threads option

swigFlags.extend(["-D" + c + "=" + pyEnv["CPPDEFINES"][c]
                  for c in pyEnv["CPPDEFINES"]])

swigFlags.extend(env["SWIGFLAGS"])

# Python docstrings in SWIG-generated Python file
if env["PYDOC"]:
  swigFlags.append("-DPYDOC")

if env["USE_PYTHON3_FOR_PYSGPP"]:
  swigFlags.append("-py3")

pyEnv.AppendUnique(SWIGFLAGS=swigFlags)

pythonLibPaths = [BUILD_DIR]
if env["PLATFORM"] == "win32":
  # guess python lib path
  pythonLibPath = os.path.join(os.path.split(sys.executable)[0], "libs")
  if os.path.exists(pythonLibPath):
    pythonLibPaths.append(pythonLibPath)
  else:
    sys.stderr.write("Error: I can't find the python lib path; " +
                     "the guessed location was %s\n" % pythonLibPath)
    sys.exit(1)

libs = [flattenedDependencyGraph]

if env["USE_GSL"]:
  libs += ["gsl", "gslcblas"]

if env["USE_ZLIB"]:
  libs += ["z"]

if (env["PLATFORM"] == "win32") and (env["COMPILER"] == "gnu"):
  pyEnv.AppendUnique(CPPDEFINES=["MS_WIN64"])
  # TODO: replace hard-coded "python27"
  libs.append("python27")

pyEnv.AppendUnique(LIBPATH=pythonLibPaths)
pyEnv.AppendUnique(LIBS=libs)

libPython = pyEnv.SharedLibrary(target="pysgpp_swig", source=["pysgpp.i"], SHLIBPREFIX="_")

# install python libraries routine
def setupPython(target, source, env):
  # read all modules which have a python extension
  pythonModuleFolders = [moduleFolder
                         for moduleFolder in moduleFolders
                         if os.path.exists(os.path.join(moduleFolder, "python"))]

  # create folder for extensions if it doesn't already exist
  extensionsPath = os.path.join(PYSGPP_BUILD_PATH.abspath, "extensions")
  if not os.path.exists(extensionsPath):
    os.makedirs(extensionsPath)

  # create symlinks in extensions folder of pysgpp
  for pythonModuleFolder in pythonModuleFolders:
    src = Dir(os.path.join(pythonModuleFolder, "python")).abspath
    dst = os.path.join(extensionsPath, pythonModuleFolder)
    if not os.path.exists(dst):
      if os.path.lexists(dst):
        os.remove(dst)
      os.symlink(src, dst)

  # create __init__.py file which imports all the extensions
  fd = open(os.path.join(extensionsPath, "__init__.py"), "w")
  for pythonModuleFolder in pythonModuleFolders:
    fd.write("import %s%s" % (pythonModuleFolder, os.linesep))
  fd.close()

  # create __init__.py file which imports the extension package and the
  # pysgpp_swig module
  fd = open(os.path.join(PYSGPP_BUILD_PATH.abspath, "__init__.py"), "w")
  fd.write("from pysgpp_swig import *%s" % os.linesep)
  fd.write("import extensions%s" % os.linesep)
  fd.close()

  # create__init__.py file which makes the lib folder a python package
  # -> this is the root for the pysgpp package
  fd = open(os.path.join(PYSGPP_PACKAGE_PATH.abspath, "__init__.py"), "w")
  fd.close()

if env["PYDOC"]:
  pyEnv.Depends(libPython, pydocTargetList)

installLibPython = pyEnv.Install(PYSGPP_BUILD_PATH, libPython)
installLibWrapperPython = pyEnv.Install(PYSGPP_BUILD_PATH, "pysgpp_swig.py")
pyEnv.Depends(installLibPython, installLibWrapperPython)
if env["PLATFORM"] != "win32":
  # windows does not support symbolic links out of the box
  # so we disable this feature
  moduleSetupPython = env.Command("setupPython", [], setupPython)
  pyEnv.Depends(installLibWrapperPython, moduleSetupPython)
libraryTargetList.append(installLibPython)
