# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pysgpp_swig', [dirname(__file__)])
        except ImportError:
            import _pysgpp_swig
            return _pysgpp_swig
        if fp is not None:
            try:
                _mod = imp.load_module('_pysgpp_swig', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pysgpp_swig = swig_import_helper()
    del swig_import_helper
else:
    import _pysgpp_swig
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x


USE_DOUBLE_PRECISION = _pysgpp_swig.USE_DOUBLE_PRECISION
class SwigPyIterator(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pysgpp_swig.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self):
        """
        value(self) -> PyObject *

        Parameters:
            self: swig::SwigPyIterator const *


        1
        """
        return _pysgpp_swig.SwigPyIterator_value(self)

    def incr(self, n=1):
        """
        incr(self, n=1) -> SwigPyIterator

        Parameters:
            n: size_t

        incr(self) -> SwigPyIterator

        Parameters:
            self: swig::SwigPyIterator *


        1
        """
        return _pysgpp_swig.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        """
        decr(self, n=1) -> SwigPyIterator

        Parameters:
            n: size_t

        decr(self) -> SwigPyIterator

        Parameters:
            self: swig::SwigPyIterator *


        1
        """
        return _pysgpp_swig.SwigPyIterator_decr(self, n)

    def distance(self, *args):
        """
        distance(self, x) -> ptrdiff_t

        Parameters:
            x: swig::SwigPyIterator const &


        1
        """
        return _pysgpp_swig.SwigPyIterator_distance(self, *args)

    def equal(self, *args):
        """
        equal(self, x) -> bool

        Parameters:
            x: swig::SwigPyIterator const &


        1
        """
        return _pysgpp_swig.SwigPyIterator_equal(self, *args)

    def copy(self):
        """
        copy(self) -> SwigPyIterator

        Parameters:
            self: swig::SwigPyIterator const *


        1
        """
        return _pysgpp_swig.SwigPyIterator_copy(self)

    def next(self):
        """
        next(self) -> PyObject *

        Parameters:
            self: swig::SwigPyIterator *


        1
        """
        return _pysgpp_swig.SwigPyIterator_next(self)

    def __next__(self):
        """
        __next__(self) -> PyObject *

        Parameters:
            self: swig::SwigPyIterator *


        1
        """
        return _pysgpp_swig.SwigPyIterator___next__(self)

    def previous(self):
        """
        previous(self) -> PyObject *

        Parameters:
            self: swig::SwigPyIterator *


        1
        """
        return _pysgpp_swig.SwigPyIterator_previous(self)

    def advance(self, *args):
        """
        advance(self, n) -> SwigPyIterator

        Parameters:
            n: ptrdiff_t


        1
        """
        return _pysgpp_swig.SwigPyIterator_advance(self, *args)

    def __eq__(self, *args):
        """
        __eq__(self, x) -> bool

        Parameters:
            x: swig::SwigPyIterator const &


        1
        """
        return _pysgpp_swig.SwigPyIterator___eq__(self, *args)

    def __ne__(self, *args):
        """
        __ne__(self, x) -> bool

        Parameters:
            x: swig::SwigPyIterator const &


        1
        """
        return _pysgpp_swig.SwigPyIterator___ne__(self, *args)

    def __iadd__(self, *args):
        """
        __iadd__(self, n) -> SwigPyIterator

        Parameters:
            n: ptrdiff_t


        1
        """
        return _pysgpp_swig.SwigPyIterator___iadd__(self, *args)

    def __isub__(self, *args):
        """
        __isub__(self, n) -> SwigPyIterator

        Parameters:
            n: ptrdiff_t


        1
        """
        return _pysgpp_swig.SwigPyIterator___isub__(self, *args)

    def __add__(self, *args):
        """
        __add__(self, n) -> SwigPyIterator

        Parameters:
            n: ptrdiff_t


        1
        """
        return _pysgpp_swig.SwigPyIterator___add__(self, *args)

    def __sub__(self, *args):
        """
        __sub__(self, n) -> SwigPyIterator

        Parameters:
            n: ptrdiff_t

        __sub__(self, x) -> ptrdiff_t

        Parameters:
            x: swig::SwigPyIterator const &


        1
        """
        return _pysgpp_swig.SwigPyIterator___sub__(self, *args)

    def __iter__(self): return self
SwigPyIterator_swigregister = _pysgpp_swig.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class unsignedIntArray(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, unsignedIntArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, unsignedIntArray, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, nelements) -> unsignedIntArray

        Parameters:
            nelements: size_t


        1
        """
        this = _pysgpp_swig.new_unsignedIntArray(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_unsignedIntArray
    __del__ = lambda self : None;
    def __getitem__(self, *args):
        """
        __getitem__(self, index) -> unsigned int

        Parameters:
            index: size_t


        1
        """
        return _pysgpp_swig.unsignedIntArray___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(self, index, value)

        Parameters:
            index: size_t
            value: unsigned int


        1
        """
        return _pysgpp_swig.unsignedIntArray___setitem__(self, *args)

    def cast(self):
        """
        cast(self) -> unsigned int *

        Parameters:
            self: unsignedIntArray *


        1
        """
        return _pysgpp_swig.unsignedIntArray_cast(self)

    def frompointer(*args):
        """
        frompointer(t) -> unsignedIntArray

        Parameters:
            t: unsigned int *


        1
        """
        return _pysgpp_swig.unsignedIntArray_frompointer(*args)

    if _newclass:frompointer = staticmethod(frompointer)
    __swig_getmethods__["frompointer"] = lambda x: frompointer
unsignedIntArray_swigregister = _pysgpp_swig.unsignedIntArray_swigregister
unsignedIntArray_swigregister(unsignedIntArray)

def unsignedIntArray_frompointer(*args):
  """
    unsignedIntArray_frompointer(t) -> unsignedIntArray

    Parameters:
        t: unsigned int *


    1
    """
  return _pysgpp_swig.unsignedIntArray_frompointer(*args)

class BoolArray(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BoolArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BoolArray, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, nelements) -> BoolArray

        Parameters:
            nelements: size_t


        1
        """
        this = _pysgpp_swig.new_BoolArray(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_BoolArray
    __del__ = lambda self : None;
    def __getitem__(self, *args):
        """
        __getitem__(self, index) -> bool

        Parameters:
            index: size_t


        1
        """
        return _pysgpp_swig.BoolArray___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(self, index, value)

        Parameters:
            index: size_t
            value: bool


        1
        """
        return _pysgpp_swig.BoolArray___setitem__(self, *args)

    def cast(self):
        """
        cast(self) -> bool *

        Parameters:
            self: BoolArray *


        1
        """
        return _pysgpp_swig.BoolArray_cast(self)

    def frompointer(*args):
        """
        frompointer(t) -> BoolArray

        Parameters:
            t: bool *


        1
        """
        return _pysgpp_swig.BoolArray_frompointer(*args)

    if _newclass:frompointer = staticmethod(frompointer)
    __swig_getmethods__["frompointer"] = lambda x: frompointer
BoolArray_swigregister = _pysgpp_swig.BoolArray_swigregister
BoolArray_swigregister(BoolArray)

def BoolArray_frompointer(*args):
  """
    BoolArray_frompointer(t) -> BoolArray

    Parameters:
        t: bool *


    1
    """
  return _pysgpp_swig.BoolArray_frompointer(*args)

class IntArray(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntArray, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, nelements) -> IntArray

        Parameters:
            nelements: size_t


        1
        """
        this = _pysgpp_swig.new_IntArray(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_IntArray
    __del__ = lambda self : None;
    def __getitem__(self, *args):
        """
        __getitem__(self, index) -> int

        Parameters:
            index: size_t


        1
        """
        return _pysgpp_swig.IntArray___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(self, index, value)

        Parameters:
            index: size_t
            value: int


        1
        """
        return _pysgpp_swig.IntArray___setitem__(self, *args)

    def cast(self):
        """
        cast(self) -> int *

        Parameters:
            self: IntArray *


        1
        """
        return _pysgpp_swig.IntArray_cast(self)

    def frompointer(*args):
        """
        frompointer(t) -> IntArray

        Parameters:
            t: int *


        1
        """
        return _pysgpp_swig.IntArray_frompointer(*args)

    if _newclass:frompointer = staticmethod(frompointer)
    __swig_getmethods__["frompointer"] = lambda x: frompointer
IntArray_swigregister = _pysgpp_swig.IntArray_swigregister
IntArray_swigregister(IntArray)

def IntArray_frompointer(*args):
  """
    IntArray_frompointer(t) -> IntArray

    Parameters:
        t: int *


    1
    """
  return _pysgpp_swig.IntArray_frompointer(*args)

class IntVector(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntVector, name)
    __repr__ = _swig_repr
    def iterator(self):
        """
        iterator(self) -> SwigPyIterator

        Parameters:
            self: std::vector< int > *


        1
        """
        return _pysgpp_swig.IntVector_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """
        __nonzero__(self) -> bool

        Parameters:
            self: std::vector< int > const *


        1
        """
        return _pysgpp_swig.IntVector___nonzero__(self)

    def __bool__(self):
        """
        __bool__(self) -> bool

        Parameters:
            self: std::vector< int > const *


        1
        """
        return _pysgpp_swig.IntVector___bool__(self)

    def __len__(self):
        """
        __len__(self) -> std::vector< int >::size_type

        Parameters:
            self: std::vector< int > const *


        1
        """
        return _pysgpp_swig.IntVector___len__(self)

    def pop(self):
        """
        pop(self) -> std::vector< int >::value_type

        Parameters:
            self: std::vector< int > *


        1
        """
        return _pysgpp_swig.IntVector_pop(self)

    def __getslice__(self, *args):
        """
        __getslice__(self, i, j) -> IntVector

        Parameters:
            i: std::vector< int >::difference_type
            j: std::vector< int >::difference_type


        1
        """
        return _pysgpp_swig.IntVector___getslice__(self, *args)

    def __setslice__(self, *args):
        """
        __setslice__(self, i, j, v=std::vector< int,std::allocator< int > >())

        Parameters:
            i: std::vector< int >::difference_type
            j: std::vector< int >::difference_type
            v: std::vector< int,std::allocator< int > > const &

        __setslice__(self, i, j)

        Parameters:
            i: std::vector< int >::difference_type
            j: std::vector< int >::difference_type


        1
        """
        return _pysgpp_swig.IntVector___setslice__(self, *args)

    def __delslice__(self, *args):
        """
        __delslice__(self, i, j)

        Parameters:
            i: std::vector< int >::difference_type
            j: std::vector< int >::difference_type


        1
        """
        return _pysgpp_swig.IntVector___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(self, i)

        Parameters:
            i: std::vector< int >::difference_type

        __delitem__(self, slice)

        Parameters:
            slice: PySliceObject *


        1
        """
        return _pysgpp_swig.IntVector___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(self, slice) -> IntVector

        Parameters:
            slice: PySliceObject *

        __getitem__(self, i) -> std::vector< int >::value_type const &

        Parameters:
            i: std::vector< int >::difference_type


        1
        """
        return _pysgpp_swig.IntVector___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(self, slice, v)

        Parameters:
            slice: PySliceObject *
            v: std::vector< int,std::allocator< int > > const &

        __setitem__(self, slice)

        Parameters:
            slice: PySliceObject *

        __setitem__(self, i, x)

        Parameters:
            i: std::vector< int >::difference_type
            x: std::vector< int >::value_type const &


        1
        """
        return _pysgpp_swig.IntVector___setitem__(self, *args)

    def append(self, *args):
        """
        append(self, x)

        Parameters:
            x: std::vector< int >::value_type const &


        1
        """
        return _pysgpp_swig.IntVector_append(self, *args)

    def empty(self):
        """
        empty(self) -> bool

        Parameters:
            self: std::vector< int > const *


        1
        """
        return _pysgpp_swig.IntVector_empty(self)

    def size(self):
        """
        size(self) -> std::vector< int >::size_type

        Parameters:
            self: std::vector< int > const *


        1
        """
        return _pysgpp_swig.IntVector_size(self)

    def clear(self):
        """
        clear(self)

        Parameters:
            self: std::vector< int > *


        1
        """
        return _pysgpp_swig.IntVector_clear(self)

    def swap(self, *args):
        """
        swap(self, v)

        Parameters:
            v: std::vector< int > &


        1
        """
        return _pysgpp_swig.IntVector_swap(self, *args)

    def get_allocator(self):
        """
        get_allocator(self) -> std::vector< int >::allocator_type

        Parameters:
            self: std::vector< int > const *


        1
        """
        return _pysgpp_swig.IntVector_get_allocator(self)

    def begin(self):
        """
        begin(self) -> std::vector< int >::iterator

        Parameters:
            self: std::vector< int > *


        1
        """
        return _pysgpp_swig.IntVector_begin(self)

    def end(self):
        """
        end(self) -> std::vector< int >::iterator

        Parameters:
            self: std::vector< int > *


        1
        """
        return _pysgpp_swig.IntVector_end(self)

    def rbegin(self):
        """
        rbegin(self) -> std::vector< int >::reverse_iterator

        Parameters:
            self: std::vector< int > *


        1
        """
        return _pysgpp_swig.IntVector_rbegin(self)

    def rend(self):
        """
        rend(self) -> std::vector< int >::reverse_iterator

        Parameters:
            self: std::vector< int > *


        1
        """
        return _pysgpp_swig.IntVector_rend(self)

    def pop_back(self):
        """
        pop_back(self)

        Parameters:
            self: std::vector< int > *


        1
        """
        return _pysgpp_swig.IntVector_pop_back(self)

    def erase(self, *args):
        """
        erase(self, pos) -> std::vector< int >::iterator

        Parameters:
            pos: std::vector< int >::iterator

        erase(self, first, last) -> std::vector< int >::iterator

        Parameters:
            first: std::vector< int >::iterator
            last: std::vector< int >::iterator


        1
        """
        return _pysgpp_swig.IntVector_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(self) -> IntVector
        __init__(self, arg2) -> IntVector

        Parameters:
            arg2: std::vector< int > const &

        __init__(self, size) -> IntVector

        Parameters:
            size: std::vector< int >::size_type

        __init__(self, size, value) -> IntVector

        Parameters:
            size: std::vector< int >::size_type
            value: std::vector< int >::value_type const &


        1
        """
        this = _pysgpp_swig.new_IntVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """
        push_back(self, x)

        Parameters:
            x: std::vector< int >::value_type const &


        1
        """
        return _pysgpp_swig.IntVector_push_back(self, *args)

    def front(self):
        """
        front(self) -> std::vector< int >::value_type const &

        Parameters:
            self: std::vector< int > const *


        1
        """
        return _pysgpp_swig.IntVector_front(self)

    def back(self):
        """
        back(self) -> std::vector< int >::value_type const &

        Parameters:
            self: std::vector< int > const *


        1
        """
        return _pysgpp_swig.IntVector_back(self)

    def assign(self, *args):
        """
        assign(self, n, x)

        Parameters:
            n: std::vector< int >::size_type
            x: std::vector< int >::value_type const &


        1
        """
        return _pysgpp_swig.IntVector_assign(self, *args)

    def resize(self, *args):
        """
        resize(self, new_size)

        Parameters:
            new_size: std::vector< int >::size_type

        resize(self, new_size, x)

        Parameters:
            new_size: std::vector< int >::size_type
            x: std::vector< int >::value_type const &


        1
        """
        return _pysgpp_swig.IntVector_resize(self, *args)

    def insert(self, *args):
        """
        insert(self, pos, x) -> std::vector< int >::iterator

        Parameters:
            pos: std::vector< int >::iterator
            x: std::vector< int >::value_type const &

        insert(self, pos, n, x)

        Parameters:
            pos: std::vector< int >::iterator
            n: std::vector< int >::size_type
            x: std::vector< int >::value_type const &


        1
        """
        return _pysgpp_swig.IntVector_insert(self, *args)

    def reserve(self, *args):
        """
        reserve(self, n)

        Parameters:
            n: std::vector< int >::size_type


        1
        """
        return _pysgpp_swig.IntVector_reserve(self, *args)

    def capacity(self):
        """
        capacity(self) -> std::vector< int >::size_type

        Parameters:
            self: std::vector< int > const *


        1
        """
        return _pysgpp_swig.IntVector_capacity(self)

    __swig_destroy__ = _pysgpp_swig.delete_IntVector
    __del__ = lambda self : None;
IntVector_swigregister = _pysgpp_swig.IntVector_swigregister
IntVector_swigregister(IntVector)
cvar = _pysgpp_swig.cvar
USING_DOUBLE_PRECISION = cvar.USING_DOUBLE_PRECISION

class IntIntVector(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntIntVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntIntVector, name)
    __repr__ = _swig_repr
    def iterator(self):
        """
        iterator(self) -> SwigPyIterator

        Parameters:
            self: std::vector< std::vector< int > > *


        1
        """
        return _pysgpp_swig.IntIntVector_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """
        __nonzero__(self) -> bool

        Parameters:
            self: std::vector< std::vector< int > > const *


        1
        """
        return _pysgpp_swig.IntIntVector___nonzero__(self)

    def __bool__(self):
        """
        __bool__(self) -> bool

        Parameters:
            self: std::vector< std::vector< int > > const *


        1
        """
        return _pysgpp_swig.IntIntVector___bool__(self)

    def __len__(self):
        """
        __len__(self) -> std::vector< std::vector< int > >::size_type

        Parameters:
            self: std::vector< std::vector< int > > const *


        1
        """
        return _pysgpp_swig.IntIntVector___len__(self)

    def pop(self):
        """
        pop(self) -> IntVector

        Parameters:
            self: std::vector< std::vector< int > > *


        1
        """
        return _pysgpp_swig.IntIntVector_pop(self)

    def __getslice__(self, *args):
        """
        __getslice__(self, i, j) -> IntIntVector

        Parameters:
            i: std::vector< std::vector< int > >::difference_type
            j: std::vector< std::vector< int > >::difference_type


        1
        """
        return _pysgpp_swig.IntIntVector___getslice__(self, *args)

    def __setslice__(self, *args):
        """
        __setslice__(self, i, j, v=std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > >())

        Parameters:
            i: std::vector< std::vector< int > >::difference_type
            j: std::vector< std::vector< int > >::difference_type
            v: std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > const &

        __setslice__(self, i, j)

        Parameters:
            i: std::vector< std::vector< int > >::difference_type
            j: std::vector< std::vector< int > >::difference_type


        1
        """
        return _pysgpp_swig.IntIntVector___setslice__(self, *args)

    def __delslice__(self, *args):
        """
        __delslice__(self, i, j)

        Parameters:
            i: std::vector< std::vector< int > >::difference_type
            j: std::vector< std::vector< int > >::difference_type


        1
        """
        return _pysgpp_swig.IntIntVector___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(self, i)

        Parameters:
            i: std::vector< std::vector< int > >::difference_type

        __delitem__(self, slice)

        Parameters:
            slice: PySliceObject *


        1
        """
        return _pysgpp_swig.IntIntVector___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(self, slice) -> IntIntVector

        Parameters:
            slice: PySliceObject *

        __getitem__(self, i) -> IntVector

        Parameters:
            i: std::vector< std::vector< int > >::difference_type


        1
        """
        return _pysgpp_swig.IntIntVector___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(self, slice, v)

        Parameters:
            slice: PySliceObject *
            v: std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > const &

        __setitem__(self, slice)

        Parameters:
            slice: PySliceObject *

        __setitem__(self, i, x)

        Parameters:
            i: std::vector< std::vector< int > >::difference_type
            x: std::vector< std::vector< int > >::value_type const &


        1
        """
        return _pysgpp_swig.IntIntVector___setitem__(self, *args)

    def append(self, *args):
        """
        append(self, x)

        Parameters:
            x: std::vector< std::vector< int > >::value_type const &


        1
        """
        return _pysgpp_swig.IntIntVector_append(self, *args)

    def empty(self):
        """
        empty(self) -> bool

        Parameters:
            self: std::vector< std::vector< int > > const *


        1
        """
        return _pysgpp_swig.IntIntVector_empty(self)

    def size(self):
        """
        size(self) -> std::vector< std::vector< int > >::size_type

        Parameters:
            self: std::vector< std::vector< int > > const *


        1
        """
        return _pysgpp_swig.IntIntVector_size(self)

    def clear(self):
        """
        clear(self)

        Parameters:
            self: std::vector< std::vector< int > > *


        1
        """
        return _pysgpp_swig.IntIntVector_clear(self)

    def swap(self, *args):
        """
        swap(self, v)

        Parameters:
            v: std::vector< std::vector< int,std::allocator< int > > > &


        1
        """
        return _pysgpp_swig.IntIntVector_swap(self, *args)

    def get_allocator(self):
        """
        get_allocator(self) -> std::vector< std::vector< int > >::allocator_type

        Parameters:
            self: std::vector< std::vector< int > > const *


        1
        """
        return _pysgpp_swig.IntIntVector_get_allocator(self)

    def begin(self):
        """
        begin(self) -> std::vector< std::vector< int > >::iterator

        Parameters:
            self: std::vector< std::vector< int > > *


        1
        """
        return _pysgpp_swig.IntIntVector_begin(self)

    def end(self):
        """
        end(self) -> std::vector< std::vector< int > >::iterator

        Parameters:
            self: std::vector< std::vector< int > > *


        1
        """
        return _pysgpp_swig.IntIntVector_end(self)

    def rbegin(self):
        """
        rbegin(self) -> std::vector< std::vector< int > >::reverse_iterator

        Parameters:
            self: std::vector< std::vector< int > > *


        1
        """
        return _pysgpp_swig.IntIntVector_rbegin(self)

    def rend(self):
        """
        rend(self) -> std::vector< std::vector< int > >::reverse_iterator

        Parameters:
            self: std::vector< std::vector< int > > *


        1
        """
        return _pysgpp_swig.IntIntVector_rend(self)

    def pop_back(self):
        """
        pop_back(self)

        Parameters:
            self: std::vector< std::vector< int > > *


        1
        """
        return _pysgpp_swig.IntIntVector_pop_back(self)

    def erase(self, *args):
        """
        erase(self, pos) -> std::vector< std::vector< int > >::iterator

        Parameters:
            pos: std::vector< std::vector< int > >::iterator

        erase(self, first, last) -> std::vector< std::vector< int > >::iterator

        Parameters:
            first: std::vector< std::vector< int > >::iterator
            last: std::vector< std::vector< int > >::iterator


        1
        """
        return _pysgpp_swig.IntIntVector_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(self) -> IntIntVector
        __init__(self, arg2) -> IntIntVector

        Parameters:
            arg2: std::vector< std::vector< int,std::allocator< int > > > const &

        __init__(self, size) -> IntIntVector

        Parameters:
            size: std::vector< std::vector< int > >::size_type

        __init__(self, size, value) -> IntIntVector

        Parameters:
            size: std::vector< std::vector< int > >::size_type
            value: std::vector< std::vector< int > >::value_type const &


        1
        """
        this = _pysgpp_swig.new_IntIntVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """
        push_back(self, x)

        Parameters:
            x: std::vector< std::vector< int > >::value_type const &


        1
        """
        return _pysgpp_swig.IntIntVector_push_back(self, *args)

    def front(self):
        """
        front(self) -> IntVector

        Parameters:
            self: std::vector< std::vector< int > > const *


        1
        """
        return _pysgpp_swig.IntIntVector_front(self)

    def back(self):
        """
        back(self) -> IntVector

        Parameters:
            self: std::vector< std::vector< int > > const *


        1
        """
        return _pysgpp_swig.IntIntVector_back(self)

    def assign(self, *args):
        """
        assign(self, n, x)

        Parameters:
            n: std::vector< std::vector< int > >::size_type
            x: std::vector< std::vector< int > >::value_type const &


        1
        """
        return _pysgpp_swig.IntIntVector_assign(self, *args)

    def resize(self, *args):
        """
        resize(self, new_size)

        Parameters:
            new_size: std::vector< std::vector< int > >::size_type

        resize(self, new_size, x)

        Parameters:
            new_size: std::vector< std::vector< int > >::size_type
            x: std::vector< std::vector< int > >::value_type const &


        1
        """
        return _pysgpp_swig.IntIntVector_resize(self, *args)

    def insert(self, *args):
        """
        insert(self, pos, x) -> std::vector< std::vector< int > >::iterator

        Parameters:
            pos: std::vector< std::vector< int > >::iterator
            x: std::vector< std::vector< int > >::value_type const &

        insert(self, pos, n, x)

        Parameters:
            pos: std::vector< std::vector< int > >::iterator
            n: std::vector< std::vector< int > >::size_type
            x: std::vector< std::vector< int > >::value_type const &


        1
        """
        return _pysgpp_swig.IntIntVector_insert(self, *args)

    def reserve(self, *args):
        """
        reserve(self, n)

        Parameters:
            n: std::vector< std::vector< int > >::size_type


        1
        """
        return _pysgpp_swig.IntIntVector_reserve(self, *args)

    def capacity(self):
        """
        capacity(self) -> std::vector< std::vector< int > >::size_type

        Parameters:
            self: std::vector< std::vector< int > > const *


        1
        """
        return _pysgpp_swig.IntIntVector_capacity(self)

    __swig_destroy__ = _pysgpp_swig.delete_IntIntVector
    __del__ = lambda self : None;
IntIntVector_swigregister = _pysgpp_swig.IntIntVector_swigregister
IntIntVector_swigregister(IntIntVector)

class BoolVector(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BoolVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BoolVector, name)
    __repr__ = _swig_repr
    def iterator(self):
        """
        iterator(self) -> SwigPyIterator

        Parameters:
            self: std::vector< bool > *


        1
        """
        return _pysgpp_swig.BoolVector_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """
        __nonzero__(self) -> bool

        Parameters:
            self: std::vector< bool > const *


        1
        """
        return _pysgpp_swig.BoolVector___nonzero__(self)

    def __bool__(self):
        """
        __bool__(self) -> bool

        Parameters:
            self: std::vector< bool > const *


        1
        """
        return _pysgpp_swig.BoolVector___bool__(self)

    def __len__(self):
        """
        __len__(self) -> std::vector< bool >::size_type

        Parameters:
            self: std::vector< bool > const *


        1
        """
        return _pysgpp_swig.BoolVector___len__(self)

    def pop(self):
        """
        pop(self) -> std::vector< bool >::value_type

        Parameters:
            self: std::vector< bool > *


        1
        """
        return _pysgpp_swig.BoolVector_pop(self)

    def __getslice__(self, *args):
        """
        __getslice__(self, i, j) -> BoolVector

        Parameters:
            i: std::vector< bool >::difference_type
            j: std::vector< bool >::difference_type


        1
        """
        return _pysgpp_swig.BoolVector___getslice__(self, *args)

    def __setslice__(self, *args):
        """
        __setslice__(self, i, j, v=std::vector< bool,std::allocator< bool > >())

        Parameters:
            i: std::vector< bool >::difference_type
            j: std::vector< bool >::difference_type
            v: std::vector< bool,std::allocator< bool > > const &

        __setslice__(self, i, j)

        Parameters:
            i: std::vector< bool >::difference_type
            j: std::vector< bool >::difference_type


        1
        """
        return _pysgpp_swig.BoolVector___setslice__(self, *args)

    def __delslice__(self, *args):
        """
        __delslice__(self, i, j)

        Parameters:
            i: std::vector< bool >::difference_type
            j: std::vector< bool >::difference_type


        1
        """
        return _pysgpp_swig.BoolVector___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(self, i)

        Parameters:
            i: std::vector< bool >::difference_type

        __delitem__(self, slice)

        Parameters:
            slice: PySliceObject *


        1
        """
        return _pysgpp_swig.BoolVector___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(self, slice) -> BoolVector

        Parameters:
            slice: PySliceObject *

        __getitem__(self, i) -> std::vector< bool >::value_type

        Parameters:
            i: std::vector< bool >::difference_type


        1
        """
        return _pysgpp_swig.BoolVector___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(self, slice, v)

        Parameters:
            slice: PySliceObject *
            v: std::vector< bool,std::allocator< bool > > const &

        __setitem__(self, slice)

        Parameters:
            slice: PySliceObject *

        __setitem__(self, i, x)

        Parameters:
            i: std::vector< bool >::difference_type
            x: std::vector< bool >::value_type


        1
        """
        return _pysgpp_swig.BoolVector___setitem__(self, *args)

    def append(self, *args):
        """
        append(self, x)

        Parameters:
            x: std::vector< bool >::value_type


        1
        """
        return _pysgpp_swig.BoolVector_append(self, *args)

    def empty(self):
        """
        empty(self) -> bool

        Parameters:
            self: std::vector< bool > const *


        1
        """
        return _pysgpp_swig.BoolVector_empty(self)

    def size(self):
        """
        size(self) -> std::vector< bool >::size_type

        Parameters:
            self: std::vector< bool > const *


        1
        """
        return _pysgpp_swig.BoolVector_size(self)

    def clear(self):
        """
        clear(self)

        Parameters:
            self: std::vector< bool > *


        1
        """
        return _pysgpp_swig.BoolVector_clear(self)

    def swap(self, *args):
        """
        swap(self, v)

        Parameters:
            v: std::vector< bool > &


        1
        """
        return _pysgpp_swig.BoolVector_swap(self, *args)

    def get_allocator(self):
        """
        get_allocator(self) -> std::vector< bool >::allocator_type

        Parameters:
            self: std::vector< bool > const *


        1
        """
        return _pysgpp_swig.BoolVector_get_allocator(self)

    def begin(self):
        """
        begin(self) -> std::vector< bool >::iterator

        Parameters:
            self: std::vector< bool > *


        1
        """
        return _pysgpp_swig.BoolVector_begin(self)

    def end(self):
        """
        end(self) -> std::vector< bool >::iterator

        Parameters:
            self: std::vector< bool > *


        1
        """
        return _pysgpp_swig.BoolVector_end(self)

    def rbegin(self):
        """
        rbegin(self) -> std::vector< bool >::reverse_iterator

        Parameters:
            self: std::vector< bool > *


        1
        """
        return _pysgpp_swig.BoolVector_rbegin(self)

    def rend(self):
        """
        rend(self) -> std::vector< bool >::reverse_iterator

        Parameters:
            self: std::vector< bool > *


        1
        """
        return _pysgpp_swig.BoolVector_rend(self)

    def pop_back(self):
        """
        pop_back(self)

        Parameters:
            self: std::vector< bool > *


        1
        """
        return _pysgpp_swig.BoolVector_pop_back(self)

    def erase(self, *args):
        """
        erase(self, pos) -> std::vector< bool >::iterator

        Parameters:
            pos: std::vector< bool >::iterator

        erase(self, first, last) -> std::vector< bool >::iterator

        Parameters:
            first: std::vector< bool >::iterator
            last: std::vector< bool >::iterator


        1
        """
        return _pysgpp_swig.BoolVector_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(self) -> BoolVector
        __init__(self, arg2) -> BoolVector

        Parameters:
            arg2: std::vector< bool > const &

        __init__(self, size) -> BoolVector

        Parameters:
            size: std::vector< bool >::size_type

        __init__(self, size, value) -> BoolVector

        Parameters:
            size: std::vector< bool >::size_type
            value: std::vector< bool >::value_type


        1
        """
        this = _pysgpp_swig.new_BoolVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """
        push_back(self, x)

        Parameters:
            x: std::vector< bool >::value_type


        1
        """
        return _pysgpp_swig.BoolVector_push_back(self, *args)

    def front(self):
        """
        front(self) -> std::vector< bool >::value_type

        Parameters:
            self: std::vector< bool > const *


        1
        """
        return _pysgpp_swig.BoolVector_front(self)

    def back(self):
        """
        back(self) -> std::vector< bool >::value_type

        Parameters:
            self: std::vector< bool > const *


        1
        """
        return _pysgpp_swig.BoolVector_back(self)

    def assign(self, *args):
        """
        assign(self, n, x)

        Parameters:
            n: std::vector< bool >::size_type
            x: std::vector< bool >::value_type


        1
        """
        return _pysgpp_swig.BoolVector_assign(self, *args)

    def resize(self, *args):
        """
        resize(self, new_size)

        Parameters:
            new_size: std::vector< bool >::size_type

        resize(self, new_size, x)

        Parameters:
            new_size: std::vector< bool >::size_type
            x: std::vector< bool >::value_type


        1
        """
        return _pysgpp_swig.BoolVector_resize(self, *args)

    def insert(self, *args):
        """
        insert(self, pos, x) -> std::vector< bool >::iterator

        Parameters:
            pos: std::vector< bool >::iterator
            x: std::vector< bool >::value_type

        insert(self, pos, n, x)

        Parameters:
            pos: std::vector< bool >::iterator
            n: std::vector< bool >::size_type
            x: std::vector< bool >::value_type


        1
        """
        return _pysgpp_swig.BoolVector_insert(self, *args)

    def reserve(self, *args):
        """
        reserve(self, n)

        Parameters:
            n: std::vector< bool >::size_type


        1
        """
        return _pysgpp_swig.BoolVector_reserve(self, *args)

    def capacity(self):
        """
        capacity(self) -> std::vector< bool >::size_type

        Parameters:
            self: std::vector< bool > const *


        1
        """
        return _pysgpp_swig.BoolVector_capacity(self)

    __swig_destroy__ = _pysgpp_swig.delete_BoolVector
    __del__ = lambda self : None;
BoolVector_swigregister = _pysgpp_swig.BoolVector_swigregister
BoolVector_swigregister(BoolVector)

class DoubleVector(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleVector, name)
    __repr__ = _swig_repr
    def iterator(self):
        """
        iterator(self) -> SwigPyIterator

        Parameters:
            self: std::vector< double > *


        1
        """
        return _pysgpp_swig.DoubleVector_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """
        __nonzero__(self) -> bool

        Parameters:
            self: std::vector< double > const *


        1
        """
        return _pysgpp_swig.DoubleVector___nonzero__(self)

    def __bool__(self):
        """
        __bool__(self) -> bool

        Parameters:
            self: std::vector< double > const *


        1
        """
        return _pysgpp_swig.DoubleVector___bool__(self)

    def __len__(self):
        """
        __len__(self) -> std::vector< double >::size_type

        Parameters:
            self: std::vector< double > const *


        1
        """
        return _pysgpp_swig.DoubleVector___len__(self)

    def pop(self):
        """
        pop(self) -> std::vector< double >::value_type

        Parameters:
            self: std::vector< double > *


        1
        """
        return _pysgpp_swig.DoubleVector_pop(self)

    def __getslice__(self, *args):
        """
        __getslice__(self, i, j) -> DoubleVector

        Parameters:
            i: std::vector< double >::difference_type
            j: std::vector< double >::difference_type


        1
        """
        return _pysgpp_swig.DoubleVector___getslice__(self, *args)

    def __setslice__(self, *args):
        """
        __setslice__(self, i, j, v=std::vector< double,std::allocator< double > >())

        Parameters:
            i: std::vector< double >::difference_type
            j: std::vector< double >::difference_type
            v: std::vector< double,std::allocator< double > > const &

        __setslice__(self, i, j)

        Parameters:
            i: std::vector< double >::difference_type
            j: std::vector< double >::difference_type


        1
        """
        return _pysgpp_swig.DoubleVector___setslice__(self, *args)

    def __delslice__(self, *args):
        """
        __delslice__(self, i, j)

        Parameters:
            i: std::vector< double >::difference_type
            j: std::vector< double >::difference_type


        1
        """
        return _pysgpp_swig.DoubleVector___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(self, i)

        Parameters:
            i: std::vector< double >::difference_type

        __delitem__(self, slice)

        Parameters:
            slice: PySliceObject *


        1
        """
        return _pysgpp_swig.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(self, slice) -> DoubleVector

        Parameters:
            slice: PySliceObject *

        __getitem__(self, i) -> std::vector< double >::value_type const &

        Parameters:
            i: std::vector< double >::difference_type


        1
        """
        return _pysgpp_swig.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(self, slice, v)

        Parameters:
            slice: PySliceObject *
            v: std::vector< double,std::allocator< double > > const &

        __setitem__(self, slice)

        Parameters:
            slice: PySliceObject *

        __setitem__(self, i, x)

        Parameters:
            i: std::vector< double >::difference_type
            x: std::vector< double >::value_type const &


        1
        """
        return _pysgpp_swig.DoubleVector___setitem__(self, *args)

    def append(self, *args):
        """
        append(self, x)

        Parameters:
            x: std::vector< double >::value_type const &


        1
        """
        return _pysgpp_swig.DoubleVector_append(self, *args)

    def empty(self):
        """
        empty(self) -> bool

        Parameters:
            self: std::vector< double > const *


        1
        """
        return _pysgpp_swig.DoubleVector_empty(self)

    def size(self):
        """
        size(self) -> std::vector< double >::size_type

        Parameters:
            self: std::vector< double > const *


        1
        """
        return _pysgpp_swig.DoubleVector_size(self)

    def clear(self):
        """
        clear(self)

        Parameters:
            self: std::vector< double > *


        1
        """
        return _pysgpp_swig.DoubleVector_clear(self)

    def swap(self, *args):
        """
        swap(self, v)

        Parameters:
            v: std::vector< double > &


        1
        """
        return _pysgpp_swig.DoubleVector_swap(self, *args)

    def get_allocator(self):
        """
        get_allocator(self) -> std::vector< double >::allocator_type

        Parameters:
            self: std::vector< double > const *


        1
        """
        return _pysgpp_swig.DoubleVector_get_allocator(self)

    def begin(self):
        """
        begin(self) -> std::vector< double >::iterator

        Parameters:
            self: std::vector< double > *


        1
        """
        return _pysgpp_swig.DoubleVector_begin(self)

    def end(self):
        """
        end(self) -> std::vector< double >::iterator

        Parameters:
            self: std::vector< double > *


        1
        """
        return _pysgpp_swig.DoubleVector_end(self)

    def rbegin(self):
        """
        rbegin(self) -> std::vector< double >::reverse_iterator

        Parameters:
            self: std::vector< double > *


        1
        """
        return _pysgpp_swig.DoubleVector_rbegin(self)

    def rend(self):
        """
        rend(self) -> std::vector< double >::reverse_iterator

        Parameters:
            self: std::vector< double > *


        1
        """
        return _pysgpp_swig.DoubleVector_rend(self)

    def pop_back(self):
        """
        pop_back(self)

        Parameters:
            self: std::vector< double > *


        1
        """
        return _pysgpp_swig.DoubleVector_pop_back(self)

    def erase(self, *args):
        """
        erase(self, pos) -> std::vector< double >::iterator

        Parameters:
            pos: std::vector< double >::iterator

        erase(self, first, last) -> std::vector< double >::iterator

        Parameters:
            first: std::vector< double >::iterator
            last: std::vector< double >::iterator


        1
        """
        return _pysgpp_swig.DoubleVector_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(self) -> DoubleVector
        __init__(self, arg2) -> DoubleVector

        Parameters:
            arg2: std::vector< double > const &

        __init__(self, size) -> DoubleVector

        Parameters:
            size: std::vector< double >::size_type

        __init__(self, size, value) -> DoubleVector

        Parameters:
            size: std::vector< double >::size_type
            value: std::vector< double >::value_type const &


        1
        """
        this = _pysgpp_swig.new_DoubleVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """
        push_back(self, x)

        Parameters:
            x: std::vector< double >::value_type const &


        1
        """
        return _pysgpp_swig.DoubleVector_push_back(self, *args)

    def front(self):
        """
        front(self) -> std::vector< double >::value_type const &

        Parameters:
            self: std::vector< double > const *


        1
        """
        return _pysgpp_swig.DoubleVector_front(self)

    def back(self):
        """
        back(self) -> std::vector< double >::value_type const &

        Parameters:
            self: std::vector< double > const *


        1
        """
        return _pysgpp_swig.DoubleVector_back(self)

    def assign(self, *args):
        """
        assign(self, n, x)

        Parameters:
            n: std::vector< double >::size_type
            x: std::vector< double >::value_type const &


        1
        """
        return _pysgpp_swig.DoubleVector_assign(self, *args)

    def resize(self, *args):
        """
        resize(self, new_size)

        Parameters:
            new_size: std::vector< double >::size_type

        resize(self, new_size, x)

        Parameters:
            new_size: std::vector< double >::size_type
            x: std::vector< double >::value_type const &


        1
        """
        return _pysgpp_swig.DoubleVector_resize(self, *args)

    def insert(self, *args):
        """
        insert(self, pos, x) -> std::vector< double >::iterator

        Parameters:
            pos: std::vector< double >::iterator
            x: std::vector< double >::value_type const &

        insert(self, pos, n, x)

        Parameters:
            pos: std::vector< double >::iterator
            n: std::vector< double >::size_type
            x: std::vector< double >::value_type const &


        1
        """
        return _pysgpp_swig.DoubleVector_insert(self, *args)

    def reserve(self, *args):
        """
        reserve(self, n)

        Parameters:
            n: std::vector< double >::size_type


        1
        """
        return _pysgpp_swig.DoubleVector_reserve(self, *args)

    def capacity(self):
        """
        capacity(self) -> std::vector< double >::size_type

        Parameters:
            self: std::vector< double > const *


        1
        """
        return _pysgpp_swig.DoubleVector_capacity(self)

    __swig_destroy__ = _pysgpp_swig.delete_DoubleVector
    __del__ = lambda self : None;
DoubleVector_swigregister = _pysgpp_swig.DoubleVector_swigregister
DoubleVector_swigregister(DoubleVector)

class FloatVector(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FloatVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FloatVector, name)
    __repr__ = _swig_repr
    def iterator(self):
        """
        iterator(self) -> SwigPyIterator

        Parameters:
            self: std::vector< float > *


        1
        """
        return _pysgpp_swig.FloatVector_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """
        __nonzero__(self) -> bool

        Parameters:
            self: std::vector< float > const *


        1
        """
        return _pysgpp_swig.FloatVector___nonzero__(self)

    def __bool__(self):
        """
        __bool__(self) -> bool

        Parameters:
            self: std::vector< float > const *


        1
        """
        return _pysgpp_swig.FloatVector___bool__(self)

    def __len__(self):
        """
        __len__(self) -> std::vector< float >::size_type

        Parameters:
            self: std::vector< float > const *


        1
        """
        return _pysgpp_swig.FloatVector___len__(self)

    def pop(self):
        """
        pop(self) -> std::vector< float >::value_type

        Parameters:
            self: std::vector< float > *


        1
        """
        return _pysgpp_swig.FloatVector_pop(self)

    def __getslice__(self, *args):
        """
        __getslice__(self, i, j) -> FloatVector

        Parameters:
            i: std::vector< float >::difference_type
            j: std::vector< float >::difference_type


        1
        """
        return _pysgpp_swig.FloatVector___getslice__(self, *args)

    def __setslice__(self, *args):
        """
        __setslice__(self, i, j, v=std::vector< float,std::allocator< float > >())

        Parameters:
            i: std::vector< float >::difference_type
            j: std::vector< float >::difference_type
            v: std::vector< float,std::allocator< float > > const &

        __setslice__(self, i, j)

        Parameters:
            i: std::vector< float >::difference_type
            j: std::vector< float >::difference_type


        1
        """
        return _pysgpp_swig.FloatVector___setslice__(self, *args)

    def __delslice__(self, *args):
        """
        __delslice__(self, i, j)

        Parameters:
            i: std::vector< float >::difference_type
            j: std::vector< float >::difference_type


        1
        """
        return _pysgpp_swig.FloatVector___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(self, i)

        Parameters:
            i: std::vector< float >::difference_type

        __delitem__(self, slice)

        Parameters:
            slice: PySliceObject *


        1
        """
        return _pysgpp_swig.FloatVector___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(self, slice) -> FloatVector

        Parameters:
            slice: PySliceObject *

        __getitem__(self, i) -> std::vector< float >::value_type const &

        Parameters:
            i: std::vector< float >::difference_type


        1
        """
        return _pysgpp_swig.FloatVector___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(self, slice, v)

        Parameters:
            slice: PySliceObject *
            v: std::vector< float,std::allocator< float > > const &

        __setitem__(self, slice)

        Parameters:
            slice: PySliceObject *

        __setitem__(self, i, x)

        Parameters:
            i: std::vector< float >::difference_type
            x: std::vector< float >::value_type const &


        1
        """
        return _pysgpp_swig.FloatVector___setitem__(self, *args)

    def append(self, *args):
        """
        append(self, x)

        Parameters:
            x: std::vector< float >::value_type const &


        1
        """
        return _pysgpp_swig.FloatVector_append(self, *args)

    def empty(self):
        """
        empty(self) -> bool

        Parameters:
            self: std::vector< float > const *


        1
        """
        return _pysgpp_swig.FloatVector_empty(self)

    def size(self):
        """
        size(self) -> std::vector< float >::size_type

        Parameters:
            self: std::vector< float > const *


        1
        """
        return _pysgpp_swig.FloatVector_size(self)

    def clear(self):
        """
        clear(self)

        Parameters:
            self: std::vector< float > *


        1
        """
        return _pysgpp_swig.FloatVector_clear(self)

    def swap(self, *args):
        """
        swap(self, v)

        Parameters:
            v: std::vector< float > &


        1
        """
        return _pysgpp_swig.FloatVector_swap(self, *args)

    def get_allocator(self):
        """
        get_allocator(self) -> std::vector< float >::allocator_type

        Parameters:
            self: std::vector< float > const *


        1
        """
        return _pysgpp_swig.FloatVector_get_allocator(self)

    def begin(self):
        """
        begin(self) -> std::vector< float >::iterator

        Parameters:
            self: std::vector< float > *


        1
        """
        return _pysgpp_swig.FloatVector_begin(self)

    def end(self):
        """
        end(self) -> std::vector< float >::iterator

        Parameters:
            self: std::vector< float > *


        1
        """
        return _pysgpp_swig.FloatVector_end(self)

    def rbegin(self):
        """
        rbegin(self) -> std::vector< float >::reverse_iterator

        Parameters:
            self: std::vector< float > *


        1
        """
        return _pysgpp_swig.FloatVector_rbegin(self)

    def rend(self):
        """
        rend(self) -> std::vector< float >::reverse_iterator

        Parameters:
            self: std::vector< float > *


        1
        """
        return _pysgpp_swig.FloatVector_rend(self)

    def pop_back(self):
        """
        pop_back(self)

        Parameters:
            self: std::vector< float > *


        1
        """
        return _pysgpp_swig.FloatVector_pop_back(self)

    def erase(self, *args):
        """
        erase(self, pos) -> std::vector< float >::iterator

        Parameters:
            pos: std::vector< float >::iterator

        erase(self, first, last) -> std::vector< float >::iterator

        Parameters:
            first: std::vector< float >::iterator
            last: std::vector< float >::iterator


        1
        """
        return _pysgpp_swig.FloatVector_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(self) -> FloatVector
        __init__(self, arg2) -> FloatVector

        Parameters:
            arg2: std::vector< float > const &

        __init__(self, size) -> FloatVector

        Parameters:
            size: std::vector< float >::size_type

        __init__(self, size, value) -> FloatVector

        Parameters:
            size: std::vector< float >::size_type
            value: std::vector< float >::value_type const &


        1
        """
        this = _pysgpp_swig.new_FloatVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """
        push_back(self, x)

        Parameters:
            x: std::vector< float >::value_type const &


        1
        """
        return _pysgpp_swig.FloatVector_push_back(self, *args)

    def front(self):
        """
        front(self) -> std::vector< float >::value_type const &

        Parameters:
            self: std::vector< float > const *


        1
        """
        return _pysgpp_swig.FloatVector_front(self)

    def back(self):
        """
        back(self) -> std::vector< float >::value_type const &

        Parameters:
            self: std::vector< float > const *


        1
        """
        return _pysgpp_swig.FloatVector_back(self)

    def assign(self, *args):
        """
        assign(self, n, x)

        Parameters:
            n: std::vector< float >::size_type
            x: std::vector< float >::value_type const &


        1
        """
        return _pysgpp_swig.FloatVector_assign(self, *args)

    def resize(self, *args):
        """
        resize(self, new_size)

        Parameters:
            new_size: std::vector< float >::size_type

        resize(self, new_size, x)

        Parameters:
            new_size: std::vector< float >::size_type
            x: std::vector< float >::value_type const &


        1
        """
        return _pysgpp_swig.FloatVector_resize(self, *args)

    def insert(self, *args):
        """
        insert(self, pos, x) -> std::vector< float >::iterator

        Parameters:
            pos: std::vector< float >::iterator
            x: std::vector< float >::value_type const &

        insert(self, pos, n, x)

        Parameters:
            pos: std::vector< float >::iterator
            n: std::vector< float >::size_type
            x: std::vector< float >::value_type const &


        1
        """
        return _pysgpp_swig.FloatVector_insert(self, *args)

    def reserve(self, *args):
        """
        reserve(self, n)

        Parameters:
            n: std::vector< float >::size_type


        1
        """
        return _pysgpp_swig.FloatVector_reserve(self, *args)

    def capacity(self):
        """
        capacity(self) -> std::vector< float >::size_type

        Parameters:
            self: std::vector< float > const *


        1
        """
        return _pysgpp_swig.FloatVector_capacity(self)

    __swig_destroy__ = _pysgpp_swig.delete_FloatVector
    __del__ = lambda self : None;
FloatVector_swigregister = _pysgpp_swig.FloatVector_swigregister
FloatVector_swigregister(FloatVector)

class IndexVector(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IndexVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IndexVector, name)
    __repr__ = _swig_repr
    def iterator(self):
        """
        iterator(self) -> SwigPyIterator

        Parameters:
            self: std::vector< size_t > *


        1
        """
        return _pysgpp_swig.IndexVector_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """
        __nonzero__(self) -> bool

        Parameters:
            self: std::vector< size_t > const *


        1
        """
        return _pysgpp_swig.IndexVector___nonzero__(self)

    def __bool__(self):
        """
        __bool__(self) -> bool

        Parameters:
            self: std::vector< size_t > const *


        1
        """
        return _pysgpp_swig.IndexVector___bool__(self)

    def __len__(self):
        """
        __len__(self) -> std::vector< size_t >::size_type

        Parameters:
            self: std::vector< size_t > const *


        1
        """
        return _pysgpp_swig.IndexVector___len__(self)

    def pop(self):
        """
        pop(self) -> std::vector< size_t >::value_type

        Parameters:
            self: std::vector< size_t > *


        1
        """
        return _pysgpp_swig.IndexVector_pop(self)

    def __getslice__(self, *args):
        """
        __getslice__(self, i, j) -> IndexVector

        Parameters:
            i: std::vector< size_t >::difference_type
            j: std::vector< size_t >::difference_type


        1
        """
        return _pysgpp_swig.IndexVector___getslice__(self, *args)

    def __setslice__(self, *args):
        """
        __setslice__(self, i, j, v=std::vector< size_t,std::allocator< size_t > >())

        Parameters:
            i: std::vector< size_t >::difference_type
            j: std::vector< size_t >::difference_type
            v: std::vector< size_t,std::allocator< size_t > > const &

        __setslice__(self, i, j)

        Parameters:
            i: std::vector< size_t >::difference_type
            j: std::vector< size_t >::difference_type


        1
        """
        return _pysgpp_swig.IndexVector___setslice__(self, *args)

    def __delslice__(self, *args):
        """
        __delslice__(self, i, j)

        Parameters:
            i: std::vector< size_t >::difference_type
            j: std::vector< size_t >::difference_type


        1
        """
        return _pysgpp_swig.IndexVector___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(self, i)

        Parameters:
            i: std::vector< size_t >::difference_type

        __delitem__(self, slice)

        Parameters:
            slice: PySliceObject *


        1
        """
        return _pysgpp_swig.IndexVector___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(self, slice) -> IndexVector

        Parameters:
            slice: PySliceObject *

        __getitem__(self, i) -> std::vector< size_t >::value_type const &

        Parameters:
            i: std::vector< size_t >::difference_type


        1
        """
        return _pysgpp_swig.IndexVector___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(self, slice, v)

        Parameters:
            slice: PySliceObject *
            v: std::vector< size_t,std::allocator< size_t > > const &

        __setitem__(self, slice)

        Parameters:
            slice: PySliceObject *

        __setitem__(self, i, x)

        Parameters:
            i: std::vector< size_t >::difference_type
            x: std::vector< size_t >::value_type const &


        1
        """
        return _pysgpp_swig.IndexVector___setitem__(self, *args)

    def append(self, *args):
        """
        append(self, x)

        Parameters:
            x: std::vector< size_t >::value_type const &


        1
        """
        return _pysgpp_swig.IndexVector_append(self, *args)

    def empty(self):
        """
        empty(self) -> bool

        Parameters:
            self: std::vector< size_t > const *


        1
        """
        return _pysgpp_swig.IndexVector_empty(self)

    def size(self):
        """
        size(self) -> std::vector< size_t >::size_type

        Parameters:
            self: std::vector< size_t > const *


        1
        """
        return _pysgpp_swig.IndexVector_size(self)

    def clear(self):
        """
        clear(self)

        Parameters:
            self: std::vector< size_t > *


        1
        """
        return _pysgpp_swig.IndexVector_clear(self)

    def swap(self, *args):
        """
        swap(self, v)

        Parameters:
            v: std::vector< size_t > &


        1
        """
        return _pysgpp_swig.IndexVector_swap(self, *args)

    def get_allocator(self):
        """
        get_allocator(self) -> std::vector< size_t >::allocator_type

        Parameters:
            self: std::vector< size_t > const *


        1
        """
        return _pysgpp_swig.IndexVector_get_allocator(self)

    def begin(self):
        """
        begin(self) -> std::vector< size_t >::iterator

        Parameters:
            self: std::vector< size_t > *


        1
        """
        return _pysgpp_swig.IndexVector_begin(self)

    def end(self):
        """
        end(self) -> std::vector< size_t >::iterator

        Parameters:
            self: std::vector< size_t > *


        1
        """
        return _pysgpp_swig.IndexVector_end(self)

    def rbegin(self):
        """
        rbegin(self) -> std::vector< size_t >::reverse_iterator

        Parameters:
            self: std::vector< size_t > *


        1
        """
        return _pysgpp_swig.IndexVector_rbegin(self)

    def rend(self):
        """
        rend(self) -> std::vector< size_t >::reverse_iterator

        Parameters:
            self: std::vector< size_t > *


        1
        """
        return _pysgpp_swig.IndexVector_rend(self)

    def pop_back(self):
        """
        pop_back(self)

        Parameters:
            self: std::vector< size_t > *


        1
        """
        return _pysgpp_swig.IndexVector_pop_back(self)

    def erase(self, *args):
        """
        erase(self, pos) -> std::vector< size_t >::iterator

        Parameters:
            pos: std::vector< size_t >::iterator

        erase(self, first, last) -> std::vector< size_t >::iterator

        Parameters:
            first: std::vector< size_t >::iterator
            last: std::vector< size_t >::iterator


        1
        """
        return _pysgpp_swig.IndexVector_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(self) -> IndexVector
        __init__(self, arg2) -> IndexVector

        Parameters:
            arg2: std::vector< size_t > const &

        __init__(self, size) -> IndexVector

        Parameters:
            size: std::vector< size_t >::size_type

        __init__(self, size, value) -> IndexVector

        Parameters:
            size: std::vector< size_t >::size_type
            value: std::vector< size_t >::value_type const &


        1
        """
        this = _pysgpp_swig.new_IndexVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """
        push_back(self, x)

        Parameters:
            x: std::vector< size_t >::value_type const &


        1
        """
        return _pysgpp_swig.IndexVector_push_back(self, *args)

    def front(self):
        """
        front(self) -> std::vector< size_t >::value_type const &

        Parameters:
            self: std::vector< size_t > const *


        1
        """
        return _pysgpp_swig.IndexVector_front(self)

    def back(self):
        """
        back(self) -> std::vector< size_t >::value_type const &

        Parameters:
            self: std::vector< size_t > const *


        1
        """
        return _pysgpp_swig.IndexVector_back(self)

    def assign(self, *args):
        """
        assign(self, n, x)

        Parameters:
            n: std::vector< size_t >::size_type
            x: std::vector< size_t >::value_type const &


        1
        """
        return _pysgpp_swig.IndexVector_assign(self, *args)

    def resize(self, *args):
        """
        resize(self, new_size)

        Parameters:
            new_size: std::vector< size_t >::size_type

        resize(self, new_size, x)

        Parameters:
            new_size: std::vector< size_t >::size_type
            x: std::vector< size_t >::value_type const &


        1
        """
        return _pysgpp_swig.IndexVector_resize(self, *args)

    def insert(self, *args):
        """
        insert(self, pos, x) -> std::vector< size_t >::iterator

        Parameters:
            pos: std::vector< size_t >::iterator
            x: std::vector< size_t >::value_type const &

        insert(self, pos, n, x)

        Parameters:
            pos: std::vector< size_t >::iterator
            n: std::vector< size_t >::size_type
            x: std::vector< size_t >::value_type const &


        1
        """
        return _pysgpp_swig.IndexVector_insert(self, *args)

    def reserve(self, *args):
        """
        reserve(self, n)

        Parameters:
            n: std::vector< size_t >::size_type


        1
        """
        return _pysgpp_swig.IndexVector_reserve(self, *args)

    def capacity(self):
        """
        capacity(self) -> std::vector< size_t >::size_type

        Parameters:
            self: std::vector< size_t > const *


        1
        """
        return _pysgpp_swig.IndexVector_capacity(self)

    __swig_destroy__ = _pysgpp_swig.delete_IndexVector
    __del__ = lambda self : None;
IndexVector_swigregister = _pysgpp_swig.IndexVector_swigregister
IndexVector_swigregister(IndexVector)

class IndexValPair(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IndexValPair, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IndexValPair, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> IndexValPair
        __init__(self, first, second) -> IndexValPair

        Parameters:
            first: size_t
            second: double

        __init__(self, p) -> IndexValPair

        Parameters:
            p: std::pair< size_t,sg::float_t > const &


        1
        """
        this = _pysgpp_swig.new_IndexValPair(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["first"] = _pysgpp_swig.IndexValPair_first_set
    __swig_getmethods__["first"] = _pysgpp_swig.IndexValPair_first_get
    if _newclass:first = _swig_property(_pysgpp_swig.IndexValPair_first_get, _pysgpp_swig.IndexValPair_first_set)
    __swig_setmethods__["second"] = _pysgpp_swig.IndexValPair_second_set
    __swig_getmethods__["second"] = _pysgpp_swig.IndexValPair_second_get
    if _newclass:second = _swig_property(_pysgpp_swig.IndexValPair_second_get, _pysgpp_swig.IndexValPair_second_set)
    def __len__(self): return 2
    def __repr__(self): return str((self.first, self.second))
    def __getitem__(self, index): 
      if not (index % 2): 
        return self.first
      else:
        return self.second
    def __setitem__(self, index, val):
      if not (index % 2): 
        self.first = val
      else:
        self.second = val
    __swig_destroy__ = _pysgpp_swig.delete_IndexValPair
    __del__ = lambda self : None;
IndexValPair_swigregister = _pysgpp_swig.IndexValPair_swigregister
IndexValPair_swigregister(IndexValPair)

class IndexValVector(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IndexValVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IndexValVector, name)
    __repr__ = _swig_repr
    def iterator(self):
        """
        iterator(self) -> SwigPyIterator

        Parameters:
            self: std::vector< std::pair< size_t,sg::float_t > > *


        1
        """
        return _pysgpp_swig.IndexValVector_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """
        __nonzero__(self) -> bool

        Parameters:
            self: std::vector< std::pair< size_t,sg::float_t > > const *


        1
        """
        return _pysgpp_swig.IndexValVector___nonzero__(self)

    def __bool__(self):
        """
        __bool__(self) -> bool

        Parameters:
            self: std::vector< std::pair< size_t,sg::float_t > > const *


        1
        """
        return _pysgpp_swig.IndexValVector___bool__(self)

    def __len__(self):
        """
        __len__(self) -> std::vector< std::pair< size_t,double > >::size_type

        Parameters:
            self: std::vector< std::pair< size_t,sg::float_t > > const *


        1
        """
        return _pysgpp_swig.IndexValVector___len__(self)

    def pop(self):
        """
        pop(self) -> IndexValPair

        Parameters:
            self: std::vector< std::pair< size_t,sg::float_t > > *


        1
        """
        return _pysgpp_swig.IndexValVector_pop(self)

    def __getslice__(self, *args):
        """
        __getslice__(self, i, j) -> IndexValVector

        Parameters:
            i: std::vector< std::pair< size_t,double > >::difference_type
            j: std::vector< std::pair< size_t,double > >::difference_type


        1
        """
        return _pysgpp_swig.IndexValVector___getslice__(self, *args)

    def __setslice__(self, *args):
        """
        __setslice__(self, i, j, v=std::vector< std::pair< size_t,sg::float_t >,std::allocator< std::pair< size_t,sg::float_t > > >())

        Parameters:
            i: std::vector< std::pair< size_t,double > >::difference_type
            j: std::vector< std::pair< size_t,double > >::difference_type
            v: std::vector< std::pair< size_t,sg::float_t >,std::allocator< std::pair< size_t,sg::float_t > > > const &

        __setslice__(self, i, j)

        Parameters:
            i: std::vector< std::pair< size_t,double > >::difference_type
            j: std::vector< std::pair< size_t,double > >::difference_type


        1
        """
        return _pysgpp_swig.IndexValVector___setslice__(self, *args)

    def __delslice__(self, *args):
        """
        __delslice__(self, i, j)

        Parameters:
            i: std::vector< std::pair< size_t,double > >::difference_type
            j: std::vector< std::pair< size_t,double > >::difference_type


        1
        """
        return _pysgpp_swig.IndexValVector___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(self, i)

        Parameters:
            i: std::vector< std::pair< size_t,double > >::difference_type

        __delitem__(self, slice)

        Parameters:
            slice: PySliceObject *


        1
        """
        return _pysgpp_swig.IndexValVector___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(self, slice) -> IndexValVector

        Parameters:
            slice: PySliceObject *

        __getitem__(self, i) -> IndexValPair

        Parameters:
            i: std::vector< std::pair< size_t,double > >::difference_type


        1
        """
        return _pysgpp_swig.IndexValVector___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(self, slice, v)

        Parameters:
            slice: PySliceObject *
            v: std::vector< std::pair< size_t,sg::float_t >,std::allocator< std::pair< size_t,sg::float_t > > > const &

        __setitem__(self, slice)

        Parameters:
            slice: PySliceObject *

        __setitem__(self, i, x)

        Parameters:
            i: std::vector< std::pair< size_t,double > >::difference_type
            x: std::vector< std::pair< size_t,double > >::value_type const &


        1
        """
        return _pysgpp_swig.IndexValVector___setitem__(self, *args)

    def append(self, *args):
        """
        append(self, x)

        Parameters:
            x: std::vector< std::pair< size_t,double > >::value_type const &


        1
        """
        return _pysgpp_swig.IndexValVector_append(self, *args)

    def empty(self):
        """
        empty(self) -> bool

        Parameters:
            self: std::vector< std::pair< size_t,sg::float_t > > const *


        1
        """
        return _pysgpp_swig.IndexValVector_empty(self)

    def size(self):
        """
        size(self) -> std::vector< std::pair< size_t,double > >::size_type

        Parameters:
            self: std::vector< std::pair< size_t,sg::float_t > > const *


        1
        """
        return _pysgpp_swig.IndexValVector_size(self)

    def clear(self):
        """
        clear(self)

        Parameters:
            self: std::vector< std::pair< size_t,sg::float_t > > *


        1
        """
        return _pysgpp_swig.IndexValVector_clear(self)

    def swap(self, *args):
        """
        swap(self, v)

        Parameters:
            v: std::vector< std::pair< size_t,sg::float_t > > &


        1
        """
        return _pysgpp_swig.IndexValVector_swap(self, *args)

    def get_allocator(self):
        """
        get_allocator(self) -> std::vector< std::pair< size_t,double > >::allocator_type

        Parameters:
            self: std::vector< std::pair< size_t,sg::float_t > > const *


        1
        """
        return _pysgpp_swig.IndexValVector_get_allocator(self)

    def begin(self):
        """
        begin(self) -> std::vector< std::pair< size_t,double > >::iterator

        Parameters:
            self: std::vector< std::pair< size_t,sg::float_t > > *


        1
        """
        return _pysgpp_swig.IndexValVector_begin(self)

    def end(self):
        """
        end(self) -> std::vector< std::pair< size_t,double > >::iterator

        Parameters:
            self: std::vector< std::pair< size_t,sg::float_t > > *


        1
        """
        return _pysgpp_swig.IndexValVector_end(self)

    def rbegin(self):
        """
        rbegin(self) -> std::vector< std::pair< size_t,double > >::reverse_iterator

        Parameters:
            self: std::vector< std::pair< size_t,sg::float_t > > *


        1
        """
        return _pysgpp_swig.IndexValVector_rbegin(self)

    def rend(self):
        """
        rend(self) -> std::vector< std::pair< size_t,double > >::reverse_iterator

        Parameters:
            self: std::vector< std::pair< size_t,sg::float_t > > *


        1
        """
        return _pysgpp_swig.IndexValVector_rend(self)

    def pop_back(self):
        """
        pop_back(self)

        Parameters:
            self: std::vector< std::pair< size_t,sg::float_t > > *


        1
        """
        return _pysgpp_swig.IndexValVector_pop_back(self)

    def erase(self, *args):
        """
        erase(self, pos) -> std::vector< std::pair< size_t,double > >::iterator

        Parameters:
            pos: std::vector< std::pair< size_t,double > >::iterator

        erase(self, first, last) -> std::vector< std::pair< size_t,double > >::iterator

        Parameters:
            first: std::vector< std::pair< size_t,double > >::iterator
            last: std::vector< std::pair< size_t,double > >::iterator


        1
        """
        return _pysgpp_swig.IndexValVector_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(self) -> IndexValVector
        __init__(self, arg2) -> IndexValVector

        Parameters:
            arg2: std::vector< std::pair< size_t,sg::float_t > > const &

        __init__(self, size) -> IndexValVector

        Parameters:
            size: std::vector< std::pair< size_t,double > >::size_type

        __init__(self, size, value) -> IndexValVector

        Parameters:
            size: std::vector< std::pair< size_t,double > >::size_type
            value: std::vector< std::pair< size_t,double > >::value_type const &


        1
        """
        this = _pysgpp_swig.new_IndexValVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """
        push_back(self, x)

        Parameters:
            x: std::vector< std::pair< size_t,double > >::value_type const &


        1
        """
        return _pysgpp_swig.IndexValVector_push_back(self, *args)

    def front(self):
        """
        front(self) -> IndexValPair

        Parameters:
            self: std::vector< std::pair< size_t,sg::float_t > > const *


        1
        """
        return _pysgpp_swig.IndexValVector_front(self)

    def back(self):
        """
        back(self) -> IndexValPair

        Parameters:
            self: std::vector< std::pair< size_t,sg::float_t > > const *


        1
        """
        return _pysgpp_swig.IndexValVector_back(self)

    def assign(self, *args):
        """
        assign(self, n, x)

        Parameters:
            n: std::vector< std::pair< size_t,double > >::size_type
            x: std::vector< std::pair< size_t,double > >::value_type const &


        1
        """
        return _pysgpp_swig.IndexValVector_assign(self, *args)

    def resize(self, *args):
        """
        resize(self, new_size)

        Parameters:
            new_size: std::vector< std::pair< size_t,double > >::size_type

        resize(self, new_size, x)

        Parameters:
            new_size: std::vector< std::pair< size_t,double > >::size_type
            x: std::vector< std::pair< size_t,double > >::value_type const &


        1
        """
        return _pysgpp_swig.IndexValVector_resize(self, *args)

    def insert(self, *args):
        """
        insert(self, pos, x) -> std::vector< std::pair< size_t,double > >::iterator

        Parameters:
            pos: std::vector< std::pair< size_t,double > >::iterator
            x: std::vector< std::pair< size_t,double > >::value_type const &

        insert(self, pos, n, x)

        Parameters:
            pos: std::vector< std::pair< size_t,double > >::iterator
            n: std::vector< std::pair< size_t,double > >::size_type
            x: std::vector< std::pair< size_t,double > >::value_type const &


        1
        """
        return _pysgpp_swig.IndexValVector_insert(self, *args)

    def reserve(self, *args):
        """
        reserve(self, n)

        Parameters:
            n: std::vector< std::pair< size_t,double > >::size_type


        1
        """
        return _pysgpp_swig.IndexValVector_reserve(self, *args)

    def capacity(self):
        """
        capacity(self) -> std::vector< std::pair< size_t,double > >::size_type

        Parameters:
            self: std::vector< std::pair< size_t,sg::float_t > > const *


        1
        """
        return _pysgpp_swig.IndexValVector_capacity(self)

    __swig_destroy__ = _pysgpp_swig.delete_IndexValVector
    __del__ = lambda self : None;
IndexValVector_swigregister = _pysgpp_swig.IndexValVector_swigregister
IndexValVector_swigregister(IndexValVector)

class IndexList(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IndexList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IndexList, name)
    __repr__ = _swig_repr
    def iterator(self):
        """
        iterator(self) -> SwigPyIterator

        Parameters:
            self: std::list< size_t > *


        1
        """
        return _pysgpp_swig.IndexList_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """
        __nonzero__(self) -> bool

        Parameters:
            self: std::list< size_t > const *


        1
        """
        return _pysgpp_swig.IndexList___nonzero__(self)

    def __bool__(self):
        """
        __bool__(self) -> bool

        Parameters:
            self: std::list< size_t > const *


        1
        """
        return _pysgpp_swig.IndexList___bool__(self)

    def __len__(self):
        """
        __len__(self) -> std::list< size_t >::size_type

        Parameters:
            self: std::list< size_t > const *


        1
        """
        return _pysgpp_swig.IndexList___len__(self)

    def pop(self):
        """
        pop(self) -> std::list< size_t >::value_type

        Parameters:
            self: std::list< size_t > *


        1
        """
        return _pysgpp_swig.IndexList_pop(self)

    def __getslice__(self, *args):
        """
        __getslice__(self, i, j) -> IndexList

        Parameters:
            i: std::list< size_t >::difference_type
            j: std::list< size_t >::difference_type


        1
        """
        return _pysgpp_swig.IndexList___getslice__(self, *args)

    def __setslice__(self, *args):
        """
        __setslice__(self, i, j, v=std::list< size_t,std::allocator< size_t > >())

        Parameters:
            i: std::list< size_t >::difference_type
            j: std::list< size_t >::difference_type
            v: std::list< size_t,std::allocator< size_t > > const &

        __setslice__(self, i, j)

        Parameters:
            i: std::list< size_t >::difference_type
            j: std::list< size_t >::difference_type


        1
        """
        return _pysgpp_swig.IndexList___setslice__(self, *args)

    def __delslice__(self, *args):
        """
        __delslice__(self, i, j)

        Parameters:
            i: std::list< size_t >::difference_type
            j: std::list< size_t >::difference_type


        1
        """
        return _pysgpp_swig.IndexList___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(self, i)

        Parameters:
            i: std::list< size_t >::difference_type

        __delitem__(self, slice)

        Parameters:
            slice: PySliceObject *


        1
        """
        return _pysgpp_swig.IndexList___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(self, slice) -> IndexList

        Parameters:
            slice: PySliceObject *

        __getitem__(self, i) -> std::list< size_t >::value_type const &

        Parameters:
            i: std::list< size_t >::difference_type


        1
        """
        return _pysgpp_swig.IndexList___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(self, slice, v)

        Parameters:
            slice: PySliceObject *
            v: std::list< size_t,std::allocator< size_t > > const &

        __setitem__(self, slice)

        Parameters:
            slice: PySliceObject *

        __setitem__(self, i, x)

        Parameters:
            i: std::list< size_t >::difference_type
            x: std::list< size_t >::value_type const &


        1
        """
        return _pysgpp_swig.IndexList___setitem__(self, *args)

    def append(self, *args):
        """
        append(self, x)

        Parameters:
            x: std::list< size_t >::value_type const &


        1
        """
        return _pysgpp_swig.IndexList_append(self, *args)

    def empty(self):
        """
        empty(self) -> bool

        Parameters:
            self: std::list< size_t > const *


        1
        """
        return _pysgpp_swig.IndexList_empty(self)

    def size(self):
        """
        size(self) -> std::list< size_t >::size_type

        Parameters:
            self: std::list< size_t > const *


        1
        """
        return _pysgpp_swig.IndexList_size(self)

    def clear(self):
        """
        clear(self)

        Parameters:
            self: std::list< size_t > *


        1
        """
        return _pysgpp_swig.IndexList_clear(self)

    def swap(self, *args):
        """
        swap(self, v)

        Parameters:
            v: std::list< size_t > &


        1
        """
        return _pysgpp_swig.IndexList_swap(self, *args)

    def get_allocator(self):
        """
        get_allocator(self) -> std::list< size_t >::allocator_type

        Parameters:
            self: std::list< size_t > const *


        1
        """
        return _pysgpp_swig.IndexList_get_allocator(self)

    def begin(self):
        """
        begin(self) -> std::list< size_t >::iterator

        Parameters:
            self: std::list< size_t > *


        1
        """
        return _pysgpp_swig.IndexList_begin(self)

    def end(self):
        """
        end(self) -> std::list< size_t >::iterator

        Parameters:
            self: std::list< size_t > *


        1
        """
        return _pysgpp_swig.IndexList_end(self)

    def rbegin(self):
        """
        rbegin(self) -> std::list< size_t >::reverse_iterator

        Parameters:
            self: std::list< size_t > *


        1
        """
        return _pysgpp_swig.IndexList_rbegin(self)

    def rend(self):
        """
        rend(self) -> std::list< size_t >::reverse_iterator

        Parameters:
            self: std::list< size_t > *


        1
        """
        return _pysgpp_swig.IndexList_rend(self)

    def pop_back(self):
        """
        pop_back(self)

        Parameters:
            self: std::list< size_t > *


        1
        """
        return _pysgpp_swig.IndexList_pop_back(self)

    def erase(self, *args):
        """
        erase(self, pos) -> std::list< size_t >::iterator

        Parameters:
            pos: std::list< size_t >::iterator

        erase(self, first, last) -> std::list< size_t >::iterator

        Parameters:
            first: std::list< size_t >::iterator
            last: std::list< size_t >::iterator


        1
        """
        return _pysgpp_swig.IndexList_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(self) -> IndexList
        __init__(self, arg2) -> IndexList

        Parameters:
            arg2: std::list< size_t > const &

        __init__(self, size) -> IndexList

        Parameters:
            size: std::list< size_t >::size_type

        __init__(self, size, value) -> IndexList

        Parameters:
            size: std::list< size_t >::size_type
            value: std::list< size_t >::value_type const &


        1
        """
        this = _pysgpp_swig.new_IndexList(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """
        push_back(self, x)

        Parameters:
            x: std::list< size_t >::value_type const &


        1
        """
        return _pysgpp_swig.IndexList_push_back(self, *args)

    def front(self):
        """
        front(self) -> std::list< size_t >::value_type const &

        Parameters:
            self: std::list< size_t > const *


        1
        """
        return _pysgpp_swig.IndexList_front(self)

    def back(self):
        """
        back(self) -> std::list< size_t >::value_type const &

        Parameters:
            self: std::list< size_t > const *


        1
        """
        return _pysgpp_swig.IndexList_back(self)

    def assign(self, *args):
        """
        assign(self, n, x)

        Parameters:
            n: std::list< size_t >::size_type
            x: std::list< size_t >::value_type const &


        1
        """
        return _pysgpp_swig.IndexList_assign(self, *args)

    def resize(self, *args):
        """
        resize(self, new_size)

        Parameters:
            new_size: std::list< size_t >::size_type

        resize(self, new_size, x)

        Parameters:
            new_size: std::list< size_t >::size_type
            x: std::list< size_t >::value_type const &


        1
        """
        return _pysgpp_swig.IndexList_resize(self, *args)

    def insert(self, *args):
        """
        insert(self, pos, x) -> std::list< size_t >::iterator

        Parameters:
            pos: std::list< size_t >::iterator
            x: std::list< size_t >::value_type const &

        insert(self, pos, n, x)

        Parameters:
            pos: std::list< size_t >::iterator
            n: std::list< size_t >::size_type
            x: std::list< size_t >::value_type const &


        1
        """
        return _pysgpp_swig.IndexList_insert(self, *args)

    def pop_front(self):
        """
        pop_front(self)

        Parameters:
            self: std::list< size_t > *


        1
        """
        return _pysgpp_swig.IndexList_pop_front(self)

    def push_front(self, *args):
        """
        push_front(self, x)

        Parameters:
            x: std::list< size_t >::value_type const &


        1
        """
        return _pysgpp_swig.IndexList_push_front(self, *args)

    def reverse(self):
        """
        reverse(self)

        Parameters:
            self: std::list< size_t > *


        1
        """
        return _pysgpp_swig.IndexList_reverse(self)

    __swig_destroy__ = _pysgpp_swig.delete_IndexList
    __del__ = lambda self : None;
IndexList_swigregister = _pysgpp_swig.IndexList_swigregister
IndexList_swigregister(IndexList)

class refinement_key(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, refinement_key, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, refinement_key, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> refinement_key
        __init__(self, first, second) -> refinement_key

        Parameters:
            first: size_t
            second: unsigned int

        __init__(self, p) -> refinement_key

        Parameters:
            p: std::pair< size_t,unsigned int > const &


        1
        """
        this = _pysgpp_swig.new_refinement_key(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["first"] = _pysgpp_swig.refinement_key_first_set
    __swig_getmethods__["first"] = _pysgpp_swig.refinement_key_first_get
    if _newclass:first = _swig_property(_pysgpp_swig.refinement_key_first_get, _pysgpp_swig.refinement_key_first_set)
    __swig_setmethods__["second"] = _pysgpp_swig.refinement_key_second_set
    __swig_getmethods__["second"] = _pysgpp_swig.refinement_key_second_get
    if _newclass:second = _swig_property(_pysgpp_swig.refinement_key_second_get, _pysgpp_swig.refinement_key_second_set)
    def __len__(self): return 2
    def __repr__(self): return str((self.first, self.second))
    def __getitem__(self, index): 
      if not (index % 2): 
        return self.first
      else:
        return self.second
    def __setitem__(self, index, val):
      if not (index % 2): 
        self.first = val
      else:
        self.second = val
    __swig_destroy__ = _pysgpp_swig.delete_refinement_key
    __del__ = lambda self : None;
refinement_key_swigregister = _pysgpp_swig.refinement_key_swigregister
refinement_key_swigregister(refinement_key)

class refinement_map(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, refinement_map, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, refinement_map, name)
    __repr__ = _swig_repr
    def iterator(self):
        """
        iterator(self) -> SwigPyIterator

        Parameters:
            self: std::map< std::pair< size_t,unsigned int >,sg::float_t > *


        1
        """
        return _pysgpp_swig.refinement_map_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """
        __nonzero__(self) -> bool

        Parameters:
            self: std::map< std::pair< size_t,unsigned int >,sg::float_t > const *


        1
        """
        return _pysgpp_swig.refinement_map___nonzero__(self)

    def __bool__(self):
        """
        __bool__(self) -> bool

        Parameters:
            self: std::map< std::pair< size_t,unsigned int >,sg::float_t > const *


        1
        """
        return _pysgpp_swig.refinement_map___bool__(self)

    def __len__(self):
        """
        __len__(self) -> std::map< std::pair< size_t,unsigned int >,double >::size_type

        Parameters:
            self: std::map< std::pair< size_t,unsigned int >,sg::float_t > const *


        1
        """
        return _pysgpp_swig.refinement_map___len__(self)

    def __iter__(self): return self.key_iterator()
    def iterkeys(self): return self.key_iterator()
    def itervalues(self): return self.value_iterator()
    def iteritems(self): return self.iterator()
    def __getitem__(self, *args):
        """
        __getitem__(self, key) -> std::map< std::pair< size_t,unsigned int >,double >::mapped_type const &

        Parameters:
            key: std::map< std::pair< size_t,unsigned int >,double >::key_type const &


        1
        """
        return _pysgpp_swig.refinement_map___getitem__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(self, key)

        Parameters:
            key: std::map< std::pair< size_t,unsigned int >,double >::key_type const &


        1
        """
        return _pysgpp_swig.refinement_map___delitem__(self, *args)

    def has_key(self, *args):
        """
        has_key(self, key) -> bool

        Parameters:
            key: std::map< std::pair< size_t,unsigned int >,double >::key_type const &


        1
        """
        return _pysgpp_swig.refinement_map_has_key(self, *args)

    def keys(self):
        """
        keys(self) -> PyObject *

        Parameters:
            self: std::map< std::pair< size_t,unsigned int >,sg::float_t > *


        1
        """
        return _pysgpp_swig.refinement_map_keys(self)

    def values(self):
        """
        values(self) -> PyObject *

        Parameters:
            self: std::map< std::pair< size_t,unsigned int >,sg::float_t > *


        1
        """
        return _pysgpp_swig.refinement_map_values(self)

    def items(self):
        """
        items(self) -> PyObject *

        Parameters:
            self: std::map< std::pair< size_t,unsigned int >,sg::float_t > *


        1
        """
        return _pysgpp_swig.refinement_map_items(self)

    def __contains__(self, *args):
        """
        __contains__(self, key) -> bool

        Parameters:
            key: std::map< std::pair< size_t,unsigned int >,double >::key_type const &


        1
        """
        return _pysgpp_swig.refinement_map___contains__(self, *args)

    def key_iterator(self):
        """
        key_iterator(self) -> SwigPyIterator

        Parameters:
            self: std::map< std::pair< size_t,unsigned int >,sg::float_t > *


        1
        """
        return _pysgpp_swig.refinement_map_key_iterator(self)

    def value_iterator(self):
        """
        value_iterator(self) -> SwigPyIterator

        Parameters:
            self: std::map< std::pair< size_t,unsigned int >,sg::float_t > *


        1
        """
        return _pysgpp_swig.refinement_map_value_iterator(self)

    def __setitem__(self, *args):
        """
        __setitem__(self, key)

        Parameters:
            key: std::map< std::pair< size_t,unsigned int >,double >::key_type const &

        __setitem__(self, key, x)

        Parameters:
            key: std::map< std::pair< size_t,unsigned int >,double >::key_type const &
            x: std::map< std::pair< size_t,unsigned int >,double >::mapped_type const &


        1
        """
        return _pysgpp_swig.refinement_map___setitem__(self, *args)

    def asdict(self):
        """
        asdict(self) -> PyObject *

        Parameters:
            self: std::map< std::pair< size_t,unsigned int >,sg::float_t > *


        1
        """
        return _pysgpp_swig.refinement_map_asdict(self)

    def __init__(self, *args): 
        """
        __init__(self, arg2) -> refinement_map

        Parameters:
            arg2: std::less< std::pair< size_t,unsigned int > > const &

        __init__(self) -> refinement_map
        __init__(self, arg2) -> refinement_map

        Parameters:
            arg2: std::map< std::pair< size_t,unsigned int >,sg::float_t > const &


        1
        """
        this = _pysgpp_swig.new_refinement_map(*args)
        try: self.this.append(this)
        except: self.this = this
    def empty(self):
        """
        empty(self) -> bool

        Parameters:
            self: std::map< std::pair< size_t,unsigned int >,sg::float_t > const *


        1
        """
        return _pysgpp_swig.refinement_map_empty(self)

    def size(self):
        """
        size(self) -> std::map< std::pair< size_t,unsigned int >,double >::size_type

        Parameters:
            self: std::map< std::pair< size_t,unsigned int >,sg::float_t > const *


        1
        """
        return _pysgpp_swig.refinement_map_size(self)

    def clear(self):
        """
        clear(self)

        Parameters:
            self: std::map< std::pair< size_t,unsigned int >,sg::float_t > *


        1
        """
        return _pysgpp_swig.refinement_map_clear(self)

    def swap(self, *args):
        """
        swap(self, v)

        Parameters:
            v: std::map< std::pair< size_t,unsigned int >,sg::float_t > &


        1
        """
        return _pysgpp_swig.refinement_map_swap(self, *args)

    def get_allocator(self):
        """
        get_allocator(self) -> std::map< std::pair< size_t,unsigned int >,double >::allocator_type

        Parameters:
            self: std::map< std::pair< size_t,unsigned int >,sg::float_t > const *


        1
        """
        return _pysgpp_swig.refinement_map_get_allocator(self)

    def begin(self):
        """
        begin(self) -> std::map< std::pair< size_t,unsigned int >,double >::iterator

        Parameters:
            self: std::map< std::pair< size_t,unsigned int >,sg::float_t > *


        1
        """
        return _pysgpp_swig.refinement_map_begin(self)

    def end(self):
        """
        end(self) -> std::map< std::pair< size_t,unsigned int >,double >::iterator

        Parameters:
            self: std::map< std::pair< size_t,unsigned int >,sg::float_t > *


        1
        """
        return _pysgpp_swig.refinement_map_end(self)

    def rbegin(self):
        """
        rbegin(self) -> std::map< std::pair< size_t,unsigned int >,double >::reverse_iterator

        Parameters:
            self: std::map< std::pair< size_t,unsigned int >,sg::float_t > *


        1
        """
        return _pysgpp_swig.refinement_map_rbegin(self)

    def rend(self):
        """
        rend(self) -> std::map< std::pair< size_t,unsigned int >,double >::reverse_iterator

        Parameters:
            self: std::map< std::pair< size_t,unsigned int >,sg::float_t > *


        1
        """
        return _pysgpp_swig.refinement_map_rend(self)

    def count(self, *args):
        """
        count(self, x) -> std::map< std::pair< size_t,unsigned int >,double >::size_type

        Parameters:
            x: std::map< std::pair< size_t,unsigned int >,double >::key_type const &


        1
        """
        return _pysgpp_swig.refinement_map_count(self, *args)

    def erase(self, *args):
        """
        erase(self, x) -> std::map< std::pair< size_t,unsigned int >,double >::size_type

        Parameters:
            x: std::map< std::pair< size_t,unsigned int >,double >::key_type const &

        erase(self, position)

        Parameters:
            position: std::map< std::pair< size_t,unsigned int >,double >::iterator

        erase(self, first, last)

        Parameters:
            first: std::map< std::pair< size_t,unsigned int >,double >::iterator
            last: std::map< std::pair< size_t,unsigned int >,double >::iterator


        1
        """
        return _pysgpp_swig.refinement_map_erase(self, *args)

    def find(self, *args):
        """
        find(self, x) -> std::map< std::pair< size_t,unsigned int >,double >::iterator

        Parameters:
            x: std::map< std::pair< size_t,unsigned int >,double >::key_type const &


        1
        """
        return _pysgpp_swig.refinement_map_find(self, *args)

    def lower_bound(self, *args):
        """
        lower_bound(self, x) -> std::map< std::pair< size_t,unsigned int >,double >::iterator

        Parameters:
            x: std::map< std::pair< size_t,unsigned int >,double >::key_type const &


        1
        """
        return _pysgpp_swig.refinement_map_lower_bound(self, *args)

    def upper_bound(self, *args):
        """
        upper_bound(self, x) -> std::map< std::pair< size_t,unsigned int >,double >::iterator

        Parameters:
            x: std::map< std::pair< size_t,unsigned int >,double >::key_type const &


        1
        """
        return _pysgpp_swig.refinement_map_upper_bound(self, *args)

    __swig_destroy__ = _pysgpp_swig.delete_refinement_map
    __del__ = lambda self : None;
refinement_map_swigregister = _pysgpp_swig.refinement_map_swigregister
refinement_map_swigregister(refinement_map)

class SBasis(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SBasis, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SBasis, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def eval(self, *args):
        """
        eval(self, level, index, x) -> sg::float_t

        Parameters:
            level: unsigned int
            index: unsigned int
            x: sg::float_t


        1
        """
        return _pysgpp_swig.SBasis_eval(self, *args)

    __swig_destroy__ = _pysgpp_swig.delete_SBasis
    __del__ = lambda self : None;
SBasis_swigregister = _pysgpp_swig.SBasis_swigregister
SBasis_swigregister(SBasis)


def free_array(*args):
  """
    free_array(ptr, dv)

    Parameters:
        ptr: void *
        dv: void *


    1
    """
  return _pysgpp_swig.free_array(*args)
class DataVector(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DataVector, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, size) -> DataVector

        Parameters:
            size: size_t

        __init__(self, size, value) -> DataVector

        Parameters:
            size: size_t
            value: sg::float_t

        __init__(self, vec) -> DataVector

        Parameters:
            vec: sg::base::DataVector &

        __init__(self, input, size) -> DataVector

        Parameters:
            input: sg::float_t *
            size: size_t

        __init__(self, input) -> DataVector

        Parameters:
            input: std::vector< sg::float_t,std::allocator< sg::float_t > >

        __init__(self, DataVectorDef) -> DataVector

        Parameters:
            DataVectorDef: sg::base::DataVectorDefinition &


        1
        """
        this = _pysgpp_swig.new_DataVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def resize(self, *args):
        """
        resize(self, size)

        Parameters:
            size: size_t


        1
        """
        return _pysgpp_swig.DataVector_resize(self, *args)

    def resizeZero(self, *args):
        """
        resizeZero(self, size)

        Parameters:
            size: size_t


        1
        """
        return _pysgpp_swig.DataVector_resizeZero(self, *args)

    def addSize(self, *args):
        """
        addSize(self, add)

        Parameters:
            add: size_t


        1
        """
        return _pysgpp_swig.DataVector_addSize(self, *args)

    def append(self, *args):
        """
        append(self) -> size_t
        append(self, value) -> size_t

        Parameters:
            value: sg::float_t


        1
        """
        return _pysgpp_swig.DataVector_append(self, *args)

    def setAll(self, *args):
        """
        setAll(self, value)

        Parameters:
            value: sg::float_t


        1
        """
        return _pysgpp_swig.DataVector_setAll(self, *args)

    def copyFrom(self, *args):
        """
        copyFrom(self, vec)

        Parameters:
            vec: sg::base::DataVector const &


        1
        """
        return _pysgpp_swig.DataVector_copyFrom(self, *args)

    def assign(self, *args):
        """
        assign(self, vec) -> DataVector

        Parameters:
            vec: sg::base::DataVector const &


        1
        """
        return _pysgpp_swig.DataVector_assign(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(self, i) -> sg::float_t

        Parameters:
            i: size_t


        1
        """
        return _pysgpp_swig.DataVector___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(self, i, value)

        Parameters:
            i: size_t
            value: sg::float_t


        1
        """
        return _pysgpp_swig.DataVector___setitem__(self, *args)

    def add(self, *args):
        """
        add(self, vec)

        Parameters:
            vec: sg::base::DataVector &


        1
        """
        return _pysgpp_swig.DataVector_add(self, *args)

    def sub(self, *args):
        """
        sub(self, vec)

        Parameters:
            vec: sg::base::DataVector &


        1
        """
        return _pysgpp_swig.DataVector_sub(self, *args)

    def componentwise_mult(self, *args):
        """
        componentwise_mult(self, vec)

        Parameters:
            vec: sg::base::DataVector &


        1
        """
        return _pysgpp_swig.DataVector_componentwise_mult(self, *args)

    def componentwise_div(self, *args):
        """
        componentwise_div(self, vec)

        Parameters:
            vec: sg::base::DataVector &


        1
        """
        return _pysgpp_swig.DataVector_componentwise_div(self, *args)

    def mult(self, *args):
        """
        mult(self, scalar)

        Parameters:
            scalar: sg::float_t


        1
        """
        return _pysgpp_swig.DataVector_mult(self, *args)

    def sqr(self):
        """
        sqr(self)

        Parameters:
            self: sg::base::DataVector *


        1
        """
        return _pysgpp_swig.DataVector_sqr(self)

    def sqrt(self):
        """
        sqrt(self)

        Parameters:
            self: sg::base::DataVector *


        1
        """
        return _pysgpp_swig.DataVector_sqrt(self)

    def abs(self):
        """
        abs(self)

        Parameters:
            self: sg::base::DataVector *


        1
        """
        return _pysgpp_swig.DataVector_abs(self)

    def sum(self):
        """
        sum(self) -> sg::float_t

        Parameters:
            self: sg::base::DataVector const *


        1
        """
        return _pysgpp_swig.DataVector_sum(self)

    def min(self):
        """
        min(self) -> sg::float_t

        Parameters:
            self: sg::base::DataVector const *


        1
        """
        return _pysgpp_swig.DataVector_min(self)

    def max(self):
        """
        max(self) -> sg::float_t

        Parameters:
            self: sg::base::DataVector const *


        1
        """
        return _pysgpp_swig.DataVector_max(self)

    def minmax(self):
        """
        minmax(self)

        Parameters:
            self: sg::base::DataVector const *


        1
        """
        return _pysgpp_swig.DataVector_minmax(self)

    def maxNorm(self):
        """
        maxNorm(self) -> sg::float_t

        Parameters:
            self: sg::base::DataVector const *


        1
        """
        return _pysgpp_swig.DataVector_maxNorm(self)

    def RMSNorm(self):
        """
        RMSNorm(self) -> sg::float_t

        Parameters:
            self: sg::base::DataVector const *


        1
        """
        return _pysgpp_swig.DataVector_RMSNorm(self)

    def l2Norm(self):
        """
        l2Norm(self) -> sg::float_t

        Parameters:
            self: sg::base::DataVector const *


        1
        """
        return _pysgpp_swig.DataVector_l2Norm(self)

    def dotProduct(self, *args):
        """
        dotProduct(self, vec) -> sg::float_t

        Parameters:
            vec: sg::base::DataVector const &


        1
        """
        return _pysgpp_swig.DataVector_dotProduct(self, *args)

    def axpy(self, *args):
        """
        axpy(self, alpha, x)

        Parameters:
            alpha: sg::float_t
            x: sg::base::DataVector &


        1
        """
        return _pysgpp_swig.DataVector_axpy(self, *args)

    def __len__(self):
        """
        __len__(self) -> size_t

        Parameters:
            self: sg::base::DataVector const *


        1
        """
        return _pysgpp_swig.DataVector___len__(self)

    def getUnused(self):
        """
        getUnused(self) -> size_t

        Parameters:
            self: sg::base::DataVector const *


        1
        """
        return _pysgpp_swig.DataVector_getUnused(self)

    def getInc(self):
        """
        getInc(self) -> size_t

        Parameters:
            self: sg::base::DataVector const *


        1
        """
        return _pysgpp_swig.DataVector_getInc(self)

    def setInc(self, *args):
        """
        setInc(self, inc_elems)

        Parameters:
            inc_elems: size_t


        1
        """
        return _pysgpp_swig.DataVector_setInc(self, *args)

    def getNumberNonZero(self):
        """
        getNumberNonZero(self) -> size_t

        Parameters:
            self: sg::base::DataVector const *


        1
        """
        return _pysgpp_swig.DataVector_getNumberNonZero(self)

    def partitionClasses(self, *args):
        """
        partitionClasses(self, border)

        Parameters:
            border: sg::float_t


        1
        """
        return _pysgpp_swig.DataVector_partitionClasses(self, *args)

    def normalize(self, *args):
        """
        normalize(self)
        normalize(self, border)

        Parameters:
            border: sg::float_t


        1
        """
        return _pysgpp_swig.DataVector_normalize(self, *args)

    def __str__(self):
        """
        __str__(self) -> std::string

        Parameters:
            self: sg::base::DataVector const *


        1
        """
        return _pysgpp_swig.DataVector___str__(self)

    def __array(self, *args):
        """
        __array(self, datavector) -> PyObject *

        Parameters:
            datavector: PyObject *


        1
        """
        return _pysgpp_swig.DataVector___array(self, *args)

    def array(self):   
      return self.__array(self)

    __swig_destroy__ = _pysgpp_swig.delete_DataVector
    __del__ = lambda self : None;
DataVector_swigregister = _pysgpp_swig.DataVector_swigregister
DataVector_swigregister(DataVector)

class DataMatrix(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataMatrix, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DataMatrix, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, nrows, ncols) -> DataMatrix

        Parameters:
            nrows: size_t
            ncols: size_t

        __init__(self, nrows, ncols, value) -> DataMatrix

        Parameters:
            nrows: size_t
            ncols: size_t
            value: sg::float_t

        __init__(self, matr) -> DataMatrix

        Parameters:
            matr: sg::base::DataMatrix const &

        __init__(self, input) -> DataMatrix

        Parameters:
            input: sg::float_t *


        1
        """
        this = _pysgpp_swig.new_DataMatrix(*args)
        try: self.this.append(this)
        except: self.this = this
    def resize(self, *args):
        """
        resize(self, size)

        Parameters:
            size: size_t


        1
        """
        return _pysgpp_swig.DataMatrix_resize(self, *args)

    def resizeZero(self, *args):
        """
        resizeZero(self, nrows)

        Parameters:
            nrows: size_t


        1
        """
        return _pysgpp_swig.DataMatrix_resizeZero(self, *args)

    def transpose(self):
        """
        transpose(self)

        Parameters:
            self: sg::base::DataMatrix *


        1
        """
        return _pysgpp_swig.DataMatrix_transpose(self)

    def addSize(self, *args):
        """
        addSize(self, inc_nrows)

        Parameters:
            inc_nrows: size_t


        1
        """
        return _pysgpp_swig.DataMatrix_addSize(self, *args)

    def appendRow(self):
        """
        appendRow(self) -> size_t

        Parameters:
            self: sg::base::DataMatrix *


        1
        """
        return _pysgpp_swig.DataMatrix_appendRow(self)

    def setAll(self, *args):
        """
        setAll(self, value)

        Parameters:
            value: sg::float_t


        1
        """
        return _pysgpp_swig.DataMatrix_setAll(self, *args)

    def copyFrom(self, *args):
        """
        copyFrom(self, matr)

        Parameters:
            matr: sg::base::DataMatrix const &


        1
        """
        return _pysgpp_swig.DataMatrix_copyFrom(self, *args)

    def get(self, *args):
        """
        get(self, row, col) -> sg::float_t

        Parameters:
            row: size_t
            col: size_t


        1
        """
        return _pysgpp_swig.DataMatrix_get(self, *args)

    def set(self, *args):
        """
        set(self, row, col, value)

        Parameters:
            row: size_t
            col: size_t
            value: sg::float_t


        1
        """
        return _pysgpp_swig.DataMatrix_set(self, *args)

    def getRow(self, *args):
        """
        getRow(self, row, vec)

        Parameters:
            row: size_t
            vec: sg::base::DataVector &


        1
        """
        return _pysgpp_swig.DataMatrix_getRow(self, *args)

    def setRow(self, *args):
        """
        setRow(self, row, vec)

        Parameters:
            row: size_t
            vec: sg::base::DataVector const &


        1
        """
        return _pysgpp_swig.DataMatrix_setRow(self, *args)

    def getColumn(self, *args):
        """
        getColumn(self, col, vec)

        Parameters:
            col: size_t
            vec: sg::base::DataVector &


        1
        """
        return _pysgpp_swig.DataMatrix_getColumn(self, *args)

    def setColumn(self, *args):
        """
        setColumn(self, col, vec)

        Parameters:
            col: size_t
            vec: sg::base::DataVector const &


        1
        """
        return _pysgpp_swig.DataMatrix_setColumn(self, *args)

    def getPointer(self):
        """
        getPointer(self) -> sg::float_t *

        Parameters:
            self: sg::base::DataMatrix *


        1
        """
        return _pysgpp_swig.DataMatrix_getPointer(self)

    def add(self, *args):
        """
        add(self, matr)

        Parameters:
            matr: sg::base::DataMatrix &


        1
        """
        return _pysgpp_swig.DataMatrix_add(self, *args)

    def sub(self, *args):
        """
        sub(self, matr)

        Parameters:
            matr: sg::base::DataMatrix &


        1
        """
        return _pysgpp_swig.DataMatrix_sub(self, *args)

    def componentwise_mult(self, *args):
        """
        componentwise_mult(self, matr)

        Parameters:
            matr: sg::base::DataMatrix &


        1
        """
        return _pysgpp_swig.DataMatrix_componentwise_mult(self, *args)

    def componentwise_div(self, *args):
        """
        componentwise_div(self, matr)

        Parameters:
            matr: sg::base::DataMatrix &


        1
        """
        return _pysgpp_swig.DataMatrix_componentwise_div(self, *args)

    def mult(self, *args):
        """
        mult(self, scalar)

        Parameters:
            scalar: sg::float_t


        1
        """
        return _pysgpp_swig.DataMatrix_mult(self, *args)

    def sqr(self):
        """
        sqr(self)

        Parameters:
            self: sg::base::DataMatrix *


        1
        """
        return _pysgpp_swig.DataMatrix_sqr(self)

    def sqrt(self):
        """
        sqrt(self)

        Parameters:
            self: sg::base::DataMatrix *


        1
        """
        return _pysgpp_swig.DataMatrix_sqrt(self)

    def abs(self):
        """
        abs(self)

        Parameters:
            self: sg::base::DataMatrix *


        1
        """
        return _pysgpp_swig.DataMatrix_abs(self)

    def sum(self):
        """
        sum(self) -> sg::float_t

        Parameters:
            self: sg::base::DataMatrix const *


        1
        """
        return _pysgpp_swig.DataMatrix_sum(self)

    def getSize(self):
        """
        getSize(self) -> size_t

        Parameters:
            self: sg::base::DataMatrix const *


        1
        """
        return _pysgpp_swig.DataMatrix_getSize(self)

    def getUnused(self):
        """
        getUnused(self) -> size_t

        Parameters:
            self: sg::base::DataMatrix const *


        1
        """
        return _pysgpp_swig.DataMatrix_getUnused(self)

    def getNumberNonZero(self):
        """
        getNumberNonZero(self) -> size_t

        Parameters:
            self: sg::base::DataMatrix const *


        1
        """
        return _pysgpp_swig.DataMatrix_getNumberNonZero(self)

    def getNrows(self):
        """
        getNrows(self) -> size_t

        Parameters:
            self: sg::base::DataMatrix const *


        1
        """
        return _pysgpp_swig.DataMatrix_getNrows(self)

    def getNcols(self):
        """
        getNcols(self) -> size_t

        Parameters:
            self: sg::base::DataMatrix const *


        1
        """
        return _pysgpp_swig.DataMatrix_getNcols(self)

    def getInc(self):
        """
        getInc(self) -> size_t

        Parameters:
            self: sg::base::DataMatrix const *


        1
        """
        return _pysgpp_swig.DataMatrix_getInc(self)

    def setInc(self, *args):
        """
        setInc(self, inc_rows)

        Parameters:
            inc_rows: size_t


        1
        """
        return _pysgpp_swig.DataMatrix_setInc(self, *args)

    def normalizeDimension(self, *args):
        """
        normalizeDimension(self, d)

        Parameters:
            d: size_t

        normalizeDimension(self, d, border)

        Parameters:
            d: size_t
            border: sg::float_t


        1
        """
        return _pysgpp_swig.DataMatrix_normalizeDimension(self, *args)

    def min(self, *args):
        """
        min(self, col) -> sg::float_t

        Parameters:
            col: size_t

        min(self) -> sg::float_t

        Parameters:
            self: sg::base::DataMatrix const *


        1
        """
        return _pysgpp_swig.DataMatrix_min(self, *args)

    def max(self, *args):
        """
        max(self, col) -> sg::float_t

        Parameters:
            col: size_t

        max(self) -> sg::float_t

        Parameters:
            self: sg::base::DataMatrix const *


        1
        """
        return _pysgpp_swig.DataMatrix_max(self, *args)

    def minmax(self, *args):
        """
        minmax(self, col)

        Parameters:
            col: size_t

        minmax(self)

        Parameters:
            self: sg::base::DataMatrix const *


        1
        """
        return _pysgpp_swig.DataMatrix_minmax(self, *args)

    def __str__(self):
        """
        __str__(self) -> std::string

        Parameters:
            self: sg::base::DataMatrix const *


        1
        """
        return _pysgpp_swig.DataMatrix___str__(self)

    def __array(self, *args):
        """
        __array(self, datavector) -> PyObject *

        Parameters:
            datavector: PyObject *


        1
        """
        return _pysgpp_swig.DataMatrix___array(self, *args)

    def array(self):   
      return self.__array(self)

    __swig_destroy__ = _pysgpp_swig.delete_DataMatrix
    __del__ = lambda self : None;
DataMatrix_swigregister = _pysgpp_swig.DataMatrix_swigregister
DataMatrix_swigregister(DataMatrix)

class RegularGridConfiguration(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RegularGridConfiguration, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RegularGridConfiguration, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type_"] = _pysgpp_swig.RegularGridConfiguration_type__set
    __swig_getmethods__["type_"] = _pysgpp_swig.RegularGridConfiguration_type__get
    if _newclass:type_ = _swig_property(_pysgpp_swig.RegularGridConfiguration_type__get, _pysgpp_swig.RegularGridConfiguration_type__set)
    __swig_setmethods__["dim_"] = _pysgpp_swig.RegularGridConfiguration_dim__set
    __swig_getmethods__["dim_"] = _pysgpp_swig.RegularGridConfiguration_dim__get
    if _newclass:dim_ = _swig_property(_pysgpp_swig.RegularGridConfiguration_dim__get, _pysgpp_swig.RegularGridConfiguration_dim__set)
    __swig_setmethods__["level_"] = _pysgpp_swig.RegularGridConfiguration_level__set
    __swig_getmethods__["level_"] = _pysgpp_swig.RegularGridConfiguration_level__get
    if _newclass:level_ = _swig_property(_pysgpp_swig.RegularGridConfiguration_level__get, _pysgpp_swig.RegularGridConfiguration_level__set)
    def __init__(self): 
        """
        __init__(self) -> RegularGridConfiguration

        1
        """
        this = _pysgpp_swig.new_RegularGridConfiguration()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_RegularGridConfiguration
    __del__ = lambda self : None;
RegularGridConfiguration_swigregister = _pysgpp_swig.RegularGridConfiguration_swigregister
RegularGridConfiguration_swigregister(RegularGridConfiguration)

class AdpativityConfiguration(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AdpativityConfiguration, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AdpativityConfiguration, name)
    __repr__ = _swig_repr
    __swig_setmethods__["numRefinements_"] = _pysgpp_swig.AdpativityConfiguration_numRefinements__set
    __swig_getmethods__["numRefinements_"] = _pysgpp_swig.AdpativityConfiguration_numRefinements__get
    if _newclass:numRefinements_ = _swig_property(_pysgpp_swig.AdpativityConfiguration_numRefinements__get, _pysgpp_swig.AdpativityConfiguration_numRefinements__set)
    __swig_setmethods__["threshold_"] = _pysgpp_swig.AdpativityConfiguration_threshold__set
    __swig_getmethods__["threshold_"] = _pysgpp_swig.AdpativityConfiguration_threshold__get
    if _newclass:threshold_ = _swig_property(_pysgpp_swig.AdpativityConfiguration_threshold__get, _pysgpp_swig.AdpativityConfiguration_threshold__set)
    __swig_setmethods__["maxLevelType_"] = _pysgpp_swig.AdpativityConfiguration_maxLevelType__set
    __swig_getmethods__["maxLevelType_"] = _pysgpp_swig.AdpativityConfiguration_maxLevelType__get
    if _newclass:maxLevelType_ = _swig_property(_pysgpp_swig.AdpativityConfiguration_maxLevelType__get, _pysgpp_swig.AdpativityConfiguration_maxLevelType__set)
    __swig_setmethods__["noPoints_"] = _pysgpp_swig.AdpativityConfiguration_noPoints__set
    __swig_getmethods__["noPoints_"] = _pysgpp_swig.AdpativityConfiguration_noPoints__get
    if _newclass:noPoints_ = _swig_property(_pysgpp_swig.AdpativityConfiguration_noPoints__get, _pysgpp_swig.AdpativityConfiguration_noPoints__set)
    __swig_setmethods__["percent_"] = _pysgpp_swig.AdpativityConfiguration_percent__set
    __swig_getmethods__["percent_"] = _pysgpp_swig.AdpativityConfiguration_percent__get
    if _newclass:percent_ = _swig_property(_pysgpp_swig.AdpativityConfiguration_percent__get, _pysgpp_swig.AdpativityConfiguration_percent__set)
    def __init__(self): 
        """
        __init__(self) -> AdpativityConfiguration

        1
        """
        this = _pysgpp_swig.new_AdpativityConfiguration()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_AdpativityConfiguration
    __del__ = lambda self : None;
AdpativityConfiguration_swigregister = _pysgpp_swig.AdpativityConfiguration_swigregister
AdpativityConfiguration_swigregister(AdpativityConfiguration)

Linear = _pysgpp_swig.Linear
LinearStretched = _pysgpp_swig.LinearStretched
LinearL0Boundary = _pysgpp_swig.LinearL0Boundary
LinearBoundary = _pysgpp_swig.LinearBoundary
LinearStretchedBoundary = _pysgpp_swig.LinearStretchedBoundary
LinearTruncatedBoundary = _pysgpp_swig.LinearTruncatedBoundary
ModLinear = _pysgpp_swig.ModLinear
Poly = _pysgpp_swig.Poly
PolyBoundary = _pysgpp_swig.PolyBoundary
ModPoly = _pysgpp_swig.ModPoly
ModWavelet = _pysgpp_swig.ModWavelet
ModBspline = _pysgpp_swig.ModBspline
Prewavelet = _pysgpp_swig.Prewavelet
SquareRoot = _pysgpp_swig.SquareRoot
Periodic = _pysgpp_swig.Periodic
LinearClenshawCurtis = _pysgpp_swig.LinearClenshawCurtis
Bspline = _pysgpp_swig.Bspline
BsplineBoundary = _pysgpp_swig.BsplineBoundary
BsplineClenshawCurtis = _pysgpp_swig.BsplineClenshawCurtis
Wavelet = _pysgpp_swig.Wavelet
WaveletBoundary = _pysgpp_swig.WaveletBoundary
FundamentalSpline = _pysgpp_swig.FundamentalSpline
ModFundamentalSpline = _pysgpp_swig.ModFundamentalSpline
ModBsplineClenshawCurtis = _pysgpp_swig.ModBsplineClenshawCurtis
LinearStencil = _pysgpp_swig.LinearStencil
ModLinearStencil = _pysgpp_swig.ModLinearStencil
class Grid(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Grid, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Grid, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def createLinearGrid(*args):
        """
        createLinearGrid(dim) -> Grid

        Parameters:
            dim: size_t


        1
        """
        return _pysgpp_swig.Grid_createLinearGrid(*args)

    if _newclass:createLinearGrid = staticmethod(createLinearGrid)
    __swig_getmethods__["createLinearGrid"] = lambda x: createLinearGrid
    def createLinearStretchedGrid(*args):
        """
        createLinearStretchedGrid(dim) -> Grid

        Parameters:
            dim: size_t


        1
        """
        return _pysgpp_swig.Grid_createLinearStretchedGrid(*args)

    if _newclass:createLinearStretchedGrid = staticmethod(createLinearStretchedGrid)
    __swig_getmethods__["createLinearStretchedGrid"] = lambda x: createLinearStretchedGrid
    def createLinearClenshawCurtisGrid(*args):
        """
        createLinearClenshawCurtisGrid(dim) -> Grid

        Parameters:
            dim: size_t


        1
        """
        return _pysgpp_swig.Grid_createLinearClenshawCurtisGrid(*args)

    if _newclass:createLinearClenshawCurtisGrid = staticmethod(createLinearClenshawCurtisGrid)
    __swig_getmethods__["createLinearClenshawCurtisGrid"] = lambda x: createLinearClenshawCurtisGrid
    def createLinearBoundaryGrid(*args):
        """
        createLinearBoundaryGrid(dim, boundaryLevel) -> Grid

        Parameters:
            dim: size_t
            boundaryLevel: size_t

        createLinearBoundaryGrid(dim) -> Grid

        Parameters:
            dim: size_t


        1
        """
        return _pysgpp_swig.Grid_createLinearBoundaryGrid(*args)

    if _newclass:createLinearBoundaryGrid = staticmethod(createLinearBoundaryGrid)
    __swig_getmethods__["createLinearBoundaryGrid"] = lambda x: createLinearBoundaryGrid
    def createLinearStretchedBoundaryGrid(*args):
        """
        createLinearStretchedBoundaryGrid(dim) -> Grid

        Parameters:
            dim: size_t


        1
        """
        return _pysgpp_swig.Grid_createLinearStretchedBoundaryGrid(*args)

    if _newclass:createLinearStretchedBoundaryGrid = staticmethod(createLinearStretchedBoundaryGrid)
    __swig_getmethods__["createLinearStretchedBoundaryGrid"] = lambda x: createLinearStretchedBoundaryGrid
    def createModLinearGrid(*args):
        """
        createModLinearGrid(dim) -> Grid

        Parameters:
            dim: size_t


        1
        """
        return _pysgpp_swig.Grid_createModLinearGrid(*args)

    if _newclass:createModLinearGrid = staticmethod(createModLinearGrid)
    __swig_getmethods__["createModLinearGrid"] = lambda x: createModLinearGrid
    def createPolyGrid(*args):
        """
        createPolyGrid(dim, degree) -> Grid

        Parameters:
            dim: size_t
            degree: size_t


        1
        """
        return _pysgpp_swig.Grid_createPolyGrid(*args)

    if _newclass:createPolyGrid = staticmethod(createPolyGrid)
    __swig_getmethods__["createPolyGrid"] = lambda x: createPolyGrid
    def createPolyBoundaryGrid(*args):
        """
        createPolyBoundaryGrid(dim, degree) -> Grid

        Parameters:
            dim: size_t
            degree: size_t


        1
        """
        return _pysgpp_swig.Grid_createPolyBoundaryGrid(*args)

    if _newclass:createPolyBoundaryGrid = staticmethod(createPolyBoundaryGrid)
    __swig_getmethods__["createPolyBoundaryGrid"] = lambda x: createPolyBoundaryGrid
    def createModPolyGrid(*args):
        """
        createModPolyGrid(dim, degree) -> Grid

        Parameters:
            dim: size_t
            degree: size_t


        1
        """
        return _pysgpp_swig.Grid_createModPolyGrid(*args)

    if _newclass:createModPolyGrid = staticmethod(createModPolyGrid)
    __swig_getmethods__["createModPolyGrid"] = lambda x: createModPolyGrid
    def createWaveletGrid(*args):
        """
        createWaveletGrid(dim) -> Grid

        Parameters:
            dim: size_t


        1
        """
        return _pysgpp_swig.Grid_createWaveletGrid(*args)

    if _newclass:createWaveletGrid = staticmethod(createWaveletGrid)
    __swig_getmethods__["createWaveletGrid"] = lambda x: createWaveletGrid
    def createWaveletBoundaryGrid(*args):
        """
        createWaveletBoundaryGrid(dim) -> Grid

        Parameters:
            dim: size_t


        1
        """
        return _pysgpp_swig.Grid_createWaveletBoundaryGrid(*args)

    if _newclass:createWaveletBoundaryGrid = staticmethod(createWaveletBoundaryGrid)
    __swig_getmethods__["createWaveletBoundaryGrid"] = lambda x: createWaveletBoundaryGrid
    def createModWaveletGrid(*args):
        """
        createModWaveletGrid(dim) -> Grid

        Parameters:
            dim: size_t


        1
        """
        return _pysgpp_swig.Grid_createModWaveletGrid(*args)

    if _newclass:createModWaveletGrid = staticmethod(createModWaveletGrid)
    __swig_getmethods__["createModWaveletGrid"] = lambda x: createModWaveletGrid
    def createBsplineGrid(*args):
        """
        createBsplineGrid(dim, degree) -> Grid

        Parameters:
            dim: size_t
            degree: size_t


        1
        """
        return _pysgpp_swig.Grid_createBsplineGrid(*args)

    if _newclass:createBsplineGrid = staticmethod(createBsplineGrid)
    __swig_getmethods__["createBsplineGrid"] = lambda x: createBsplineGrid
    def createBsplineBoundaryGrid(*args):
        """
        createBsplineBoundaryGrid(dim, degree) -> Grid

        Parameters:
            dim: size_t
            degree: size_t


        1
        """
        return _pysgpp_swig.Grid_createBsplineBoundaryGrid(*args)

    if _newclass:createBsplineBoundaryGrid = staticmethod(createBsplineBoundaryGrid)
    __swig_getmethods__["createBsplineBoundaryGrid"] = lambda x: createBsplineBoundaryGrid
    def createBsplineClenshawCurtisGrid(*args):
        """
        createBsplineClenshawCurtisGrid(dim, degree) -> Grid

        Parameters:
            dim: size_t
            degree: size_t


        1
        """
        return _pysgpp_swig.Grid_createBsplineClenshawCurtisGrid(*args)

    if _newclass:createBsplineClenshawCurtisGrid = staticmethod(createBsplineClenshawCurtisGrid)
    __swig_getmethods__["createBsplineClenshawCurtisGrid"] = lambda x: createBsplineClenshawCurtisGrid
    def createModBsplineGrid(*args):
        """
        createModBsplineGrid(dim, degree) -> Grid

        Parameters:
            dim: size_t
            degree: size_t


        1
        """
        return _pysgpp_swig.Grid_createModBsplineGrid(*args)

    if _newclass:createModBsplineGrid = staticmethod(createModBsplineGrid)
    __swig_getmethods__["createModBsplineGrid"] = lambda x: createModBsplineGrid
    def createModBsplineClenshawCurtisGrid(*args):
        """
        createModBsplineClenshawCurtisGrid(dim, degree) -> Grid

        Parameters:
            dim: size_t
            degree: size_t


        1
        """
        return _pysgpp_swig.Grid_createModBsplineClenshawCurtisGrid(*args)

    if _newclass:createModBsplineClenshawCurtisGrid = staticmethod(createModBsplineClenshawCurtisGrid)
    __swig_getmethods__["createModBsplineClenshawCurtisGrid"] = lambda x: createModBsplineClenshawCurtisGrid
    def createFundamentalSplineGrid(*args):
        """
        createFundamentalSplineGrid(dim, degree) -> Grid

        Parameters:
            dim: size_t
            degree: size_t


        1
        """
        return _pysgpp_swig.Grid_createFundamentalSplineGrid(*args)

    if _newclass:createFundamentalSplineGrid = staticmethod(createFundamentalSplineGrid)
    __swig_getmethods__["createFundamentalSplineGrid"] = lambda x: createFundamentalSplineGrid
    def createModFundamentalSplineGrid(*args):
        """
        createModFundamentalSplineGrid(dim, degree) -> Grid

        Parameters:
            dim: size_t
            degree: size_t


        1
        """
        return _pysgpp_swig.Grid_createModFundamentalSplineGrid(*args)

    if _newclass:createModFundamentalSplineGrid = staticmethod(createModFundamentalSplineGrid)
    __swig_getmethods__["createModFundamentalSplineGrid"] = lambda x: createModFundamentalSplineGrid
    def createSquareRootGrid(*args):
        """
        createSquareRootGrid(dim) -> Grid

        Parameters:
            dim: size_t


        1
        """
        return _pysgpp_swig.Grid_createSquareRootGrid(*args)

    if _newclass:createSquareRootGrid = staticmethod(createSquareRootGrid)
    __swig_getmethods__["createSquareRootGrid"] = lambda x: createSquareRootGrid
    def createLinearTruncatedBoundaryGrid(*args):
        """
        createLinearTruncatedBoundaryGrid(dim) -> Grid

        Parameters:
            dim: size_t


        1
        """
        return _pysgpp_swig.Grid_createLinearTruncatedBoundaryGrid(*args)

    if _newclass:createLinearTruncatedBoundaryGrid = staticmethod(createLinearTruncatedBoundaryGrid)
    __swig_getmethods__["createLinearTruncatedBoundaryGrid"] = lambda x: createLinearTruncatedBoundaryGrid
    def createPrewaveletGrid(*args):
        """
        createPrewaveletGrid(dim) -> Grid

        Parameters:
            dim: size_t


        1
        """
        return _pysgpp_swig.Grid_createPrewaveletGrid(*args)

    if _newclass:createPrewaveletGrid = staticmethod(createPrewaveletGrid)
    __swig_getmethods__["createPrewaveletGrid"] = lambda x: createPrewaveletGrid
    def createLinearGridStencil(*args):
        """
        createLinearGridStencil(dim) -> Grid

        Parameters:
            dim: size_t


        1
        """
        return _pysgpp_swig.Grid_createLinearGridStencil(*args)

    if _newclass:createLinearGridStencil = staticmethod(createLinearGridStencil)
    __swig_getmethods__["createLinearGridStencil"] = lambda x: createLinearGridStencil
    def createModLinearGridStencil(*args):
        """
        createModLinearGridStencil(dim) -> Grid

        Parameters:
            dim: size_t


        1
        """
        return _pysgpp_swig.Grid_createModLinearGridStencil(*args)

    if _newclass:createModLinearGridStencil = staticmethod(createModLinearGridStencil)
    __swig_getmethods__["createModLinearGridStencil"] = lambda x: createModLinearGridStencil
    def createPeriodicGrid(*args):
        """
        createPeriodicGrid(dim) -> Grid

        Parameters:
            dim: size_t


        1
        """
        return _pysgpp_swig.Grid_createPeriodicGrid(*args)

    if _newclass:createPeriodicGrid = staticmethod(createPeriodicGrid)
    __swig_getmethods__["createPeriodicGrid"] = lambda x: createPeriodicGrid
    def unserialize(*args):
        """
        unserialize(istr) -> Grid

        Parameters:
            istr: std::string &


        1
        """
        return _pysgpp_swig.Grid_unserialize(*args)

    if _newclass:unserialize = staticmethod(unserialize)
    __swig_getmethods__["unserialize"] = lambda x: unserialize
    __swig_destroy__ = _pysgpp_swig.delete_Grid
    __del__ = lambda self : None;
    def createGridGenerator(self):
        """
        createGridGenerator(self) -> GridGenerator

        Parameters:
            self: sg::base::Grid *


        1
        """
        return _pysgpp_swig.Grid_createGridGenerator(self)

    def getStorage(self):
        """
        getStorage(self) -> HashGridStorage

        Parameters:
            self: sg::base::Grid *


        1
        """
        return _pysgpp_swig.Grid_getStorage(self)

    def getBoundingBox(self):
        """
        getBoundingBox(self) -> BoundingBox

        Parameters:
            self: sg::base::Grid *


        1
        """
        return _pysgpp_swig.Grid_getBoundingBox(self)

    def getStretching(self):
        """
        getStretching(self) -> Stretching

        Parameters:
            self: sg::base::Grid *


        1
        """
        return _pysgpp_swig.Grid_getStretching(self)

    def getType(self):
        """
        getType(self) -> sg::base::GridType

        Parameters:
            self: sg::base::Grid *


        1
        """
        return _pysgpp_swig.Grid_getType(self)

    def getBasis(self):
        """
        getBasis(self) -> SBasis

        Parameters:
            self: sg::base::Grid *


        1
        """
        return _pysgpp_swig.Grid_getBasis(self)

    def serialize(self):
        """
        serialize(self)

        Parameters:
            self: sg::base::Grid *


        1
        """
        return _pysgpp_swig.Grid_serialize(self)

    def refine(self, *args):
        """
        refine(self, vector, num)

        Parameters:
            vector: sg::base::DataVector *
            num: int


        1
        """
        return _pysgpp_swig.Grid_refine(self, *args)

    def eval(self, *args):
        """
        eval(self, alpha, point) -> sg::float_t

        Parameters:
            alpha: sg::base::DataVector &
            point: sg::base::DataVector &


        1
        """
        return _pysgpp_swig.Grid_eval(self, *args)

    def insertPoint(self, *args):
        """
        insertPoint(self, dim, levels, indeces, isLeaf)

        Parameters:
            dim: size_t
            levels: unsigned int []
            indeces: unsigned int []
            isLeaf: bool


        1
        """
        return _pysgpp_swig.Grid_insertPoint(self, *args)

    def getSize(self):
        """
        getSize(self) -> int

        Parameters:
            self: sg::base::Grid *


        1
        """
        return _pysgpp_swig.Grid_getSize(self)

    def createMemento(self):
        """
        createMemento(self) -> Grid

        Parameters:
            self: sg::base::Grid *


        1
        """
        return _pysgpp_swig.Grid_createMemento(self)

    def setMemento(*args):
        """
        setMemento(istr) -> Grid

        Parameters:
            istr: std::string &


        1
        """
        return _pysgpp_swig.Grid_setMemento(*args)

    if _newclass:setMemento = staticmethod(setMemento)
    __swig_getmethods__["setMemento"] = lambda x: setMemento
    def getDegree(self):
        """
        getDegree(self) -> int

        Parameters:
            self: sg::base::Grid *


        1
        """
        return _pysgpp_swig.Grid_getDegree(self)

Grid_swigregister = _pysgpp_swig.Grid_swigregister
Grid_swigregister(Grid)

def Grid_createLinearGrid(*args):
  """
    Grid_createLinearGrid(dim) -> Grid

    Parameters:
        dim: size_t


    1
    """
  return _pysgpp_swig.Grid_createLinearGrid(*args)

def Grid_createLinearStretchedGrid(*args):
  """
    Grid_createLinearStretchedGrid(dim) -> Grid

    Parameters:
        dim: size_t


    1
    """
  return _pysgpp_swig.Grid_createLinearStretchedGrid(*args)

def Grid_createLinearClenshawCurtisGrid(*args):
  """
    Grid_createLinearClenshawCurtisGrid(dim) -> Grid

    Parameters:
        dim: size_t


    1
    """
  return _pysgpp_swig.Grid_createLinearClenshawCurtisGrid(*args)

def Grid_createLinearBoundaryGrid(*args):
  """
    createLinearBoundaryGrid(dim, boundaryLevel) -> Grid

    Parameters:
        dim: size_t
        boundaryLevel: size_t

    Grid_createLinearBoundaryGrid(dim) -> Grid

    Parameters:
        dim: size_t


    1
    """
  return _pysgpp_swig.Grid_createLinearBoundaryGrid(*args)

def Grid_createLinearStretchedBoundaryGrid(*args):
  """
    Grid_createLinearStretchedBoundaryGrid(dim) -> Grid

    Parameters:
        dim: size_t


    1
    """
  return _pysgpp_swig.Grid_createLinearStretchedBoundaryGrid(*args)

def Grid_createModLinearGrid(*args):
  """
    Grid_createModLinearGrid(dim) -> Grid

    Parameters:
        dim: size_t


    1
    """
  return _pysgpp_swig.Grid_createModLinearGrid(*args)

def Grid_createPolyGrid(*args):
  """
    Grid_createPolyGrid(dim, degree) -> Grid

    Parameters:
        dim: size_t
        degree: size_t


    1
    """
  return _pysgpp_swig.Grid_createPolyGrid(*args)

def Grid_createPolyBoundaryGrid(*args):
  """
    Grid_createPolyBoundaryGrid(dim, degree) -> Grid

    Parameters:
        dim: size_t
        degree: size_t


    1
    """
  return _pysgpp_swig.Grid_createPolyBoundaryGrid(*args)

def Grid_createModPolyGrid(*args):
  """
    Grid_createModPolyGrid(dim, degree) -> Grid

    Parameters:
        dim: size_t
        degree: size_t


    1
    """
  return _pysgpp_swig.Grid_createModPolyGrid(*args)

def Grid_createWaveletGrid(*args):
  """
    Grid_createWaveletGrid(dim) -> Grid

    Parameters:
        dim: size_t


    1
    """
  return _pysgpp_swig.Grid_createWaveletGrid(*args)

def Grid_createWaveletBoundaryGrid(*args):
  """
    Grid_createWaveletBoundaryGrid(dim) -> Grid

    Parameters:
        dim: size_t


    1
    """
  return _pysgpp_swig.Grid_createWaveletBoundaryGrid(*args)

def Grid_createModWaveletGrid(*args):
  """
    Grid_createModWaveletGrid(dim) -> Grid

    Parameters:
        dim: size_t


    1
    """
  return _pysgpp_swig.Grid_createModWaveletGrid(*args)

def Grid_createBsplineGrid(*args):
  """
    Grid_createBsplineGrid(dim, degree) -> Grid

    Parameters:
        dim: size_t
        degree: size_t


    1
    """
  return _pysgpp_swig.Grid_createBsplineGrid(*args)

def Grid_createBsplineBoundaryGrid(*args):
  """
    Grid_createBsplineBoundaryGrid(dim, degree) -> Grid

    Parameters:
        dim: size_t
        degree: size_t


    1
    """
  return _pysgpp_swig.Grid_createBsplineBoundaryGrid(*args)

def Grid_createBsplineClenshawCurtisGrid(*args):
  """
    Grid_createBsplineClenshawCurtisGrid(dim, degree) -> Grid

    Parameters:
        dim: size_t
        degree: size_t


    1
    """
  return _pysgpp_swig.Grid_createBsplineClenshawCurtisGrid(*args)

def Grid_createModBsplineGrid(*args):
  """
    Grid_createModBsplineGrid(dim, degree) -> Grid

    Parameters:
        dim: size_t
        degree: size_t


    1
    """
  return _pysgpp_swig.Grid_createModBsplineGrid(*args)

def Grid_createModBsplineClenshawCurtisGrid(*args):
  """
    Grid_createModBsplineClenshawCurtisGrid(dim, degree) -> Grid

    Parameters:
        dim: size_t
        degree: size_t


    1
    """
  return _pysgpp_swig.Grid_createModBsplineClenshawCurtisGrid(*args)

def Grid_createFundamentalSplineGrid(*args):
  """
    Grid_createFundamentalSplineGrid(dim, degree) -> Grid

    Parameters:
        dim: size_t
        degree: size_t


    1
    """
  return _pysgpp_swig.Grid_createFundamentalSplineGrid(*args)

def Grid_createModFundamentalSplineGrid(*args):
  """
    Grid_createModFundamentalSplineGrid(dim, degree) -> Grid

    Parameters:
        dim: size_t
        degree: size_t


    1
    """
  return _pysgpp_swig.Grid_createModFundamentalSplineGrid(*args)

def Grid_createSquareRootGrid(*args):
  """
    Grid_createSquareRootGrid(dim) -> Grid

    Parameters:
        dim: size_t


    1
    """
  return _pysgpp_swig.Grid_createSquareRootGrid(*args)

def Grid_createLinearTruncatedBoundaryGrid(*args):
  """
    Grid_createLinearTruncatedBoundaryGrid(dim) -> Grid

    Parameters:
        dim: size_t


    1
    """
  return _pysgpp_swig.Grid_createLinearTruncatedBoundaryGrid(*args)

def Grid_createPrewaveletGrid(*args):
  """
    Grid_createPrewaveletGrid(dim) -> Grid

    Parameters:
        dim: size_t


    1
    """
  return _pysgpp_swig.Grid_createPrewaveletGrid(*args)

def Grid_createLinearGridStencil(*args):
  """
    Grid_createLinearGridStencil(dim) -> Grid

    Parameters:
        dim: size_t


    1
    """
  return _pysgpp_swig.Grid_createLinearGridStencil(*args)

def Grid_createModLinearGridStencil(*args):
  """
    Grid_createModLinearGridStencil(dim) -> Grid

    Parameters:
        dim: size_t


    1
    """
  return _pysgpp_swig.Grid_createModLinearGridStencil(*args)

def Grid_createPeriodicGrid(*args):
  """
    Grid_createPeriodicGrid(dim) -> Grid

    Parameters:
        dim: size_t


    1
    """
  return _pysgpp_swig.Grid_createPeriodicGrid(*args)

def Grid_unserialize(*args):
  """
    Grid_unserialize(istr) -> Grid

    Parameters:
        istr: std::string &


    1
    """
  return _pysgpp_swig.Grid_unserialize(*args)

def Grid_setMemento(*args):
  """
    Grid_setMemento(istr) -> Grid

    Parameters:
        istr: std::string &


    1
    """
  return _pysgpp_swig.Grid_setMemento(*args)

class DataVectorSP(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataVectorSP, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DataVectorSP, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, size) -> DataVectorSP

        Parameters:
            size: size_t

        __init__(self, size, value) -> DataVectorSP

        Parameters:
            size: size_t
            value: float

        __init__(self, vec) -> DataVectorSP

        Parameters:
            vec: sg::base::DataVectorSP const &

        __init__(self, input, size) -> DataVectorSP

        Parameters:
            input: float *
            size: size_t

        __init__(self, input) -> DataVectorSP

        Parameters:
            input: std::vector< int,std::allocator< int > >


        1
        """
        this = _pysgpp_swig.new_DataVectorSP(*args)
        try: self.this.append(this)
        except: self.this = this
    def resize(self, *args):
        """
        resize(self, size)

        Parameters:
            size: size_t


        1
        """
        return _pysgpp_swig.DataVectorSP_resize(self, *args)

    def resizeZero(self, *args):
        """
        resizeZero(self, nrows)

        Parameters:
            nrows: size_t


        1
        """
        return _pysgpp_swig.DataVectorSP_resizeZero(self, *args)

    def restructure(self, *args):
        """
        restructure(self, remainingIndex)

        Parameters:
            remainingIndex: std::vector< size_t,std::allocator< size_t > > &


        1
        """
        return _pysgpp_swig.DataVectorSP_restructure(self, *args)

    def addSize(self, *args):
        """
        addSize(self, inc_elems)

        Parameters:
            inc_elems: size_t


        1
        """
        return _pysgpp_swig.DataVectorSP_addSize(self, *args)

    def append(self, *args):
        """
        append(self) -> size_t
        append(self, value) -> size_t

        Parameters:
            value: float


        1
        """
        return _pysgpp_swig.DataVectorSP_append(self, *args)

    def insert(self, *args):
        """
        insert(self, index, value)

        Parameters:
            index: size_t
            value: float


        1
        """
        return _pysgpp_swig.DataVectorSP_insert(self, *args)

    def setAll(self, *args):
        """
        setAll(self, value)

        Parameters:
            value: float


        1
        """
        return _pysgpp_swig.DataVectorSP_setAll(self, *args)

    def copyFrom(self, *args):
        """
        copyFrom(self, vec)

        Parameters:
            vec: sg::base::DataVectorSP const &


        1
        """
        return _pysgpp_swig.DataVectorSP_copyFrom(self, *args)

    def get(self, *args):
        """
        get(self, i) -> float

        Parameters:
            i: size_t


        1
        """
        return _pysgpp_swig.DataVectorSP_get(self, *args)

    def set(self, *args):
        """
        set(self, i, value)

        Parameters:
            i: size_t
            value: float


        1
        """
        return _pysgpp_swig.DataVectorSP_set(self, *args)

    def add(self, *args):
        """
        add(self, vec)

        Parameters:
            vec: sg::base::DataVectorSP &


        1
        """
        return _pysgpp_swig.DataVectorSP_add(self, *args)

    def sub(self, *args):
        """
        sub(self, vec)

        Parameters:
            vec: sg::base::DataVectorSP const &


        1
        """
        return _pysgpp_swig.DataVectorSP_sub(self, *args)

    def componentwise_mult(self, *args):
        """
        componentwise_mult(self, vec)

        Parameters:
            vec: sg::base::DataVectorSP &


        1
        """
        return _pysgpp_swig.DataVectorSP_componentwise_mult(self, *args)

    def componentwise_div(self, *args):
        """
        componentwise_div(self, vec)

        Parameters:
            vec: sg::base::DataVectorSP &


        1
        """
        return _pysgpp_swig.DataVectorSP_componentwise_div(self, *args)

    def mult(self, *args):
        """
        mult(self, scalar)

        Parameters:
            scalar: float


        1
        """
        return _pysgpp_swig.DataVectorSP_mult(self, *args)

    def sqr(self):
        """
        sqr(self)

        Parameters:
            self: sg::base::DataVectorSP *


        1
        """
        return _pysgpp_swig.DataVectorSP_sqr(self)

    def sqrt(self):
        """
        sqrt(self)

        Parameters:
            self: sg::base::DataVectorSP *


        1
        """
        return _pysgpp_swig.DataVectorSP_sqrt(self)

    def abs(self):
        """
        abs(self)

        Parameters:
            self: sg::base::DataVectorSP *


        1
        """
        return _pysgpp_swig.DataVectorSP_abs(self)

    def sum(self):
        """
        sum(self) -> float

        Parameters:
            self: sg::base::DataVectorSP const *


        1
        """
        return _pysgpp_swig.DataVectorSP_sum(self)

    def maxNorm(self):
        """
        maxNorm(self) -> float

        Parameters:
            self: sg::base::DataVectorSP const *


        1
        """
        return _pysgpp_swig.DataVectorSP_maxNorm(self)

    def RMSNorm(self):
        """
        RMSNorm(self) -> float

        Parameters:
            self: sg::base::DataVectorSP const *


        1
        """
        return _pysgpp_swig.DataVectorSP_RMSNorm(self)

    def l2Norm(self):
        """
        l2Norm(self) -> float

        Parameters:
            self: sg::base::DataVectorSP const *


        1
        """
        return _pysgpp_swig.DataVectorSP_l2Norm(self)

    def min(self):
        """
        min(self) -> float

        Parameters:
            self: sg::base::DataVectorSP const *


        1
        """
        return _pysgpp_swig.DataVectorSP_min(self)

    def max(self):
        """
        max(self) -> float

        Parameters:
            self: sg::base::DataVectorSP const *


        1
        """
        return _pysgpp_swig.DataVectorSP_max(self)

    def minmax(self, *args):
        """
        minmax(self, min, max)

        Parameters:
            min: float *
            max: float *


        1
        """
        return _pysgpp_swig.DataVectorSP_minmax(self, *args)

    def axpy(self, *args):
        """
        axpy(self, a, x)

        Parameters:
            a: float
            x: sg::base::DataVectorSP &


        1
        """
        return _pysgpp_swig.DataVectorSP_axpy(self, *args)

    def dotProduct(self, *args):
        """
        dotProduct(self, vec) -> float

        Parameters:
            vec: sg::base::DataVectorSP &


        1
        """
        return _pysgpp_swig.DataVectorSP_dotProduct(self, *args)

    def getPointer(self, *args):
        """
        getPointer(self) -> float
        getPointer(self) -> float const *

        Parameters:
            self: sg::base::DataVectorSP const *


        1
        """
        return _pysgpp_swig.DataVectorSP_getPointer(self, *args)

    def getSize(self):
        """
        getSize(self) -> size_t

        Parameters:
            self: sg::base::DataVectorSP const *


        1
        """
        return _pysgpp_swig.DataVectorSP_getSize(self)

    def getUnused(self):
        """
        getUnused(self) -> size_t

        Parameters:
            self: sg::base::DataVectorSP const *


        1
        """
        return _pysgpp_swig.DataVectorSP_getUnused(self)

    def getNumberNonZero(self):
        """
        getNumberNonZero(self) -> size_t

        Parameters:
            self: sg::base::DataVectorSP const *


        1
        """
        return _pysgpp_swig.DataVectorSP_getNumberNonZero(self)

    def getInc(self):
        """
        getInc(self) -> size_t

        Parameters:
            self: sg::base::DataVectorSP const *


        1
        """
        return _pysgpp_swig.DataVectorSP_getInc(self)

    def setInc(self, *args):
        """
        setInc(self, inc_elems)

        Parameters:
            inc_elems: size_t


        1
        """
        return _pysgpp_swig.DataVectorSP_setInc(self, *args)

    def partitionClasses(self, *args):
        """
        partitionClasses(self, threshold)

        Parameters:
            threshold: float


        1
        """
        return _pysgpp_swig.DataVectorSP_partitionClasses(self, *args)

    def normalize(self, *args):
        """
        normalize(self)
        normalize(self, border)

        Parameters:
            border: float


        1
        """
        return _pysgpp_swig.DataVectorSP_normalize(self, *args)

    def toString(self):
        """
        toString(self) -> std::string

        Parameters:
            self: sg::base::DataVectorSP const *


        1
        """
        return _pysgpp_swig.DataVectorSP_toString(self)

    __swig_destroy__ = _pysgpp_swig.delete_DataVectorSP
    __del__ = lambda self : None;
DataVectorSP_swigregister = _pysgpp_swig.DataVectorSP_swigregister
DataVectorSP_swigregister(DataVectorSP)

class DataMatrixSP(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataMatrixSP, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DataMatrixSP, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, nrows, ncols) -> DataMatrixSP

        Parameters:
            nrows: size_t
            ncols: size_t

        __init__(self, nrows, ncols, value) -> DataMatrixSP

        Parameters:
            nrows: size_t
            ncols: size_t
            value: float

        __init__(self, matr) -> DataMatrixSP

        Parameters:
            matr: sg::base::DataMatrixSP const &

        __init__(self, input, nrows, ncols) -> DataMatrixSP

        Parameters:
            input: float *
            nrows: size_t
            ncols: size_t


        1
        """
        this = _pysgpp_swig.new_DataMatrixSP(*args)
        try: self.this.append(this)
        except: self.this = this
    def resize(self, *args):
        """
        resize(self, nrows)

        Parameters:
            nrows: size_t

        resize(self, nrows, ncols)

        Parameters:
            nrows: size_t
            ncols: size_t


        1
        """
        return _pysgpp_swig.DataMatrixSP_resize(self, *args)

    def resizeZero(self, *args):
        """
        resizeZero(self, nrows)

        Parameters:
            nrows: size_t

        resizeZero(self, nrows, ncols)

        Parameters:
            nrows: size_t
            ncols: size_t


        1
        """
        return _pysgpp_swig.DataMatrixSP_resizeZero(self, *args)

    def addSize(self, *args):
        """
        addSize(self, inc_nrows)

        Parameters:
            inc_nrows: size_t


        1
        """
        return _pysgpp_swig.DataMatrixSP_addSize(self, *args)

    def appendRow(self, *args):
        """
        appendRow(self) -> size_t
        appendRow(self, vec) -> size_t

        Parameters:
            vec: sg::base::DataVectorSP const &


        1
        """
        return _pysgpp_swig.DataMatrixSP_appendRow(self, *args)

    def setAll(self, *args):
        """
        setAll(self, value)

        Parameters:
            value: float


        1
        """
        return _pysgpp_swig.DataMatrixSP_setAll(self, *args)

    def copyFrom(self, *args):
        """
        copyFrom(self, matr)

        Parameters:
            matr: sg::base::DataMatrixSP const &


        1
        """
        return _pysgpp_swig.DataMatrixSP_copyFrom(self, *args)

    def transpose(self):
        """
        transpose(self)

        Parameters:
            self: sg::base::DataMatrixSP *


        1
        """
        return _pysgpp_swig.DataMatrixSP_transpose(self)

    def __call__(self, *args):
        """
        __call__(self, row, col) -> float

        Parameters:
            row: size_t
            col: size_t

        __call__(self, row, col) -> float const &

        Parameters:
            row: size_t
            col: size_t


        1
        """
        return _pysgpp_swig.DataMatrixSP___call__(self, *args)

    def get(self, *args):
        """
        get(self, row, col) -> float

        Parameters:
            row: size_t
            col: size_t


        1
        """
        return _pysgpp_swig.DataMatrixSP_get(self, *args)

    def set(self, *args):
        """
        set(self, row, col, value)

        Parameters:
            row: size_t
            col: size_t
            value: float


        1
        """
        return _pysgpp_swig.DataMatrixSP_set(self, *args)

    def getRow(self, *args):
        """
        getRow(self, row, vec)

        Parameters:
            row: size_t
            vec: sg::base::DataVectorSP &

        getRow(self, row, vec)

        Parameters:
            row: size_t
            vec: std::vector< float,std::allocator< float > > &


        1
        """
        return _pysgpp_swig.DataMatrixSP_getRow(self, *args)

    def setRow(self, *args):
        """
        setRow(self, row, vec)

        Parameters:
            row: size_t
            vec: sg::base::DataVectorSP const &


        1
        """
        return _pysgpp_swig.DataMatrixSP_setRow(self, *args)

    def getColumn(self, *args):
        """
        getColumn(self, col, vec)

        Parameters:
            col: size_t
            vec: sg::base::DataVectorSP &


        1
        """
        return _pysgpp_swig.DataMatrixSP_getColumn(self, *args)

    def setColumn(self, *args):
        """
        setColumn(self, col, vec)

        Parameters:
            col: size_t
            vec: sg::base::DataVectorSP const &


        1
        """
        return _pysgpp_swig.DataMatrixSP_setColumn(self, *args)

    def add(self, *args):
        """
        add(self, matr)

        Parameters:
            matr: sg::base::DataMatrixSP &


        1
        """
        return _pysgpp_swig.DataMatrixSP_add(self, *args)

    def sub(self, *args):
        """
        sub(self, matr)

        Parameters:
            matr: sg::base::DataMatrixSP const &


        1
        """
        return _pysgpp_swig.DataMatrixSP_sub(self, *args)

    def addReduce(self, *args):
        """
        addReduce(self, reduction)

        Parameters:
            reduction: sg::base::DataVectorSP &

        addReduce(self, reduction, beta, start_beta)

        Parameters:
            reduction: sg::base::DataVectorSP &
            beta: sg::base::DataVectorSP &
            start_beta: size_t


        1
        """
        return _pysgpp_swig.DataMatrixSP_addReduce(self, *args)

    def expand(self, *args):
        """
        expand(self, expand)

        Parameters:
            expand: sg::base::DataVectorSP const &


        1
        """
        return _pysgpp_swig.DataMatrixSP_expand(self, *args)

    def componentwise_mult(self, *args):
        """
        componentwise_mult(self, matr)

        Parameters:
            matr: sg::base::DataMatrixSP &


        1
        """
        return _pysgpp_swig.DataMatrixSP_componentwise_mult(self, *args)

    def componentwise_div(self, *args):
        """
        componentwise_div(self, matr)

        Parameters:
            matr: sg::base::DataMatrixSP &


        1
        """
        return _pysgpp_swig.DataMatrixSP_componentwise_div(self, *args)

    def mult(self, *args):
        """
        mult(self, x, y)

        Parameters:
            x: sg::base::DataVectorSP const &
            y: sg::base::DataVectorSP &

        mult(self, scalar)

        Parameters:
            scalar: float


        1
        """
        return _pysgpp_swig.DataMatrixSP_mult(self, *args)

    def sqr(self):
        """
        sqr(self)

        Parameters:
            self: sg::base::DataMatrixSP *


        1
        """
        return _pysgpp_swig.DataMatrixSP_sqr(self)

    def sqrt(self):
        """
        sqrt(self)

        Parameters:
            self: sg::base::DataMatrixSP *


        1
        """
        return _pysgpp_swig.DataMatrixSP_sqrt(self)

    def abs(self):
        """
        abs(self)

        Parameters:
            self: sg::base::DataMatrixSP *


        1
        """
        return _pysgpp_swig.DataMatrixSP_abs(self)

    def sum(self):
        """
        sum(self) -> float

        Parameters:
            self: sg::base::DataMatrixSP const *


        1
        """
        return _pysgpp_swig.DataMatrixSP_sum(self)

    def min(self, *args):
        """
        min(self, col) -> float

        Parameters:
            col: size_t

        min(self) -> float

        Parameters:
            self: sg::base::DataMatrixSP const *


        1
        """
        return _pysgpp_swig.DataMatrixSP_min(self, *args)

    def max(self, *args):
        """
        max(self, col) -> float

        Parameters:
            col: size_t

        max(self) -> float

        Parameters:
            self: sg::base::DataMatrixSP const *


        1
        """
        return _pysgpp_swig.DataMatrixSP_max(self, *args)

    def minmax(self, *args):
        """
        minmax(self, col, min, max)

        Parameters:
            col: size_t
            min: float *
            max: float *

        minmax(self, min, max)

        Parameters:
            min: float *
            max: float *


        1
        """
        return _pysgpp_swig.DataMatrixSP_minmax(self, *args)

    def getPointer(self, *args):
        """
        getPointer(self) -> float
        getPointer(self) -> float const *

        Parameters:
            self: sg::base::DataMatrixSP const *


        1
        """
        return _pysgpp_swig.DataMatrixSP_getPointer(self, *args)

    def getSize(self):
        """
        getSize(self) -> size_t

        Parameters:
            self: sg::base::DataMatrixSP const *


        1
        """
        return _pysgpp_swig.DataMatrixSP_getSize(self)

    def getUnused(self):
        """
        getUnused(self) -> size_t

        Parameters:
            self: sg::base::DataMatrixSP const *


        1
        """
        return _pysgpp_swig.DataMatrixSP_getUnused(self)

    def getNumberNonZero(self):
        """
        getNumberNonZero(self) -> size_t

        Parameters:
            self: sg::base::DataMatrixSP const *


        1
        """
        return _pysgpp_swig.DataMatrixSP_getNumberNonZero(self)

    def getNrows(self):
        """
        getNrows(self) -> size_t

        Parameters:
            self: sg::base::DataMatrixSP const *


        1
        """
        return _pysgpp_swig.DataMatrixSP_getNrows(self)

    def getNcols(self):
        """
        getNcols(self) -> size_t

        Parameters:
            self: sg::base::DataMatrixSP const *


        1
        """
        return _pysgpp_swig.DataMatrixSP_getNcols(self)

    def getInc(self):
        """
        getInc(self) -> size_t

        Parameters:
            self: sg::base::DataMatrixSP const *


        1
        """
        return _pysgpp_swig.DataMatrixSP_getInc(self)

    def setInc(self, *args):
        """
        setInc(self, inc_rows)

        Parameters:
            inc_rows: size_t


        1
        """
        return _pysgpp_swig.DataMatrixSP_setInc(self, *args)

    def normalizeDimension(self, *args):
        """
        normalizeDimension(self, d)

        Parameters:
            d: size_t

        normalizeDimension(self, d, border)

        Parameters:
            d: size_t
            border: float


        1
        """
        return _pysgpp_swig.DataMatrixSP_normalizeDimension(self, *args)

    def toString(self):
        """
        toString(self) -> std::string

        Parameters:
            self: sg::base::DataMatrixSP const *


        1
        """
        return _pysgpp_swig.DataMatrixSP_toString(self)

    __swig_destroy__ = _pysgpp_swig.delete_DataMatrixSP
    __del__ = lambda self : None;
DataMatrixSP_swigregister = _pysgpp_swig.DataMatrixSP_swigregister
DataMatrixSP_swigregister(DataMatrixSP)

class DimensionBoundary(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DimensionBoundary, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DimensionBoundary, name)
    __repr__ = _swig_repr
    __swig_setmethods__["leftBoundary"] = _pysgpp_swig.DimensionBoundary_leftBoundary_set
    __swig_getmethods__["leftBoundary"] = _pysgpp_swig.DimensionBoundary_leftBoundary_get
    if _newclass:leftBoundary = _swig_property(_pysgpp_swig.DimensionBoundary_leftBoundary_get, _pysgpp_swig.DimensionBoundary_leftBoundary_set)
    __swig_setmethods__["rightBoundary"] = _pysgpp_swig.DimensionBoundary_rightBoundary_set
    __swig_getmethods__["rightBoundary"] = _pysgpp_swig.DimensionBoundary_rightBoundary_get
    if _newclass:rightBoundary = _swig_property(_pysgpp_swig.DimensionBoundary_rightBoundary_get, _pysgpp_swig.DimensionBoundary_rightBoundary_set)
    __swig_setmethods__["bDirichletLeft"] = _pysgpp_swig.DimensionBoundary_bDirichletLeft_set
    __swig_getmethods__["bDirichletLeft"] = _pysgpp_swig.DimensionBoundary_bDirichletLeft_get
    if _newclass:bDirichletLeft = _swig_property(_pysgpp_swig.DimensionBoundary_bDirichletLeft_get, _pysgpp_swig.DimensionBoundary_bDirichletLeft_set)
    __swig_setmethods__["bDirichletRight"] = _pysgpp_swig.DimensionBoundary_bDirichletRight_set
    __swig_getmethods__["bDirichletRight"] = _pysgpp_swig.DimensionBoundary_bDirichletRight_get
    if _newclass:bDirichletRight = _swig_property(_pysgpp_swig.DimensionBoundary_bDirichletRight_get, _pysgpp_swig.DimensionBoundary_bDirichletRight_set)
    def __init__(self): 
        """
        __init__(self) -> DimensionBoundary

        1
        """
        this = _pysgpp_swig.new_DimensionBoundary()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_DimensionBoundary
    __del__ = lambda self : None;
DimensionBoundary_swigregister = _pysgpp_swig.DimensionBoundary_swigregister
DimensionBoundary_swigregister(DimensionBoundary)

class BoundingBox(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BoundingBox, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BoundingBox, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, dim) -> BoundingBox

        Parameters:
            dim: size_t

        __init__(self, dim, boundaries) -> BoundingBox

        Parameters:
            dim: size_t
            boundaries: sg::base::DimensionBoundary *

        __init__(self, copyBoundingBox) -> BoundingBox

        Parameters:
            copyBoundingBox: sg::base::BoundingBox &


        1
        """
        this = _pysgpp_swig.new_BoundingBox(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_BoundingBox
    __del__ = lambda self : None;
    def setBoundary(self, *args):
        """
        setBoundary(self, dimension, newBoundaries)

        Parameters:
            dimension: size_t
            newBoundaries: sg::base::DimensionBoundary &


        1
        """
        return _pysgpp_swig.BoundingBox_setBoundary(self, *args)

    def getBoundary(self, *args):
        """
        getBoundary(self, dimension) -> DimensionBoundary

        Parameters:
            dimension: size_t


        1
        """
        return _pysgpp_swig.BoundingBox_getBoundary(self, *args)

    def getDimensions(self):
        """
        getDimensions(self) -> size_t

        Parameters:
            self: sg::base::BoundingBox *


        1
        """
        return _pysgpp_swig.BoundingBox_getDimensions(self)

    def getIntervalWidth(self, *args):
        """
        getIntervalWidth(self, dimension) -> sg::float_t

        Parameters:
            dimension: size_t


        1
        """
        return _pysgpp_swig.BoundingBox_getIntervalWidth(self, *args)

    def getIntervalOffset(self, *args):
        """
        getIntervalOffset(self, dimension) -> sg::float_t

        Parameters:
            dimension: size_t


        1
        """
        return _pysgpp_swig.BoundingBox_getIntervalOffset(self, *args)

    def isTrivialCube(self):
        """
        isTrivialCube(self) -> bool

        Parameters:
            self: sg::base::BoundingBox *


        1
        """
        return _pysgpp_swig.BoundingBox_isTrivialCube(self)

    def hasDirichletBoundaryLeft(self, *args):
        """
        hasDirichletBoundaryLeft(self, dimension) -> bool

        Parameters:
            dimension: size_t


        1
        """
        return _pysgpp_swig.BoundingBox_hasDirichletBoundaryLeft(self, *args)

    def hasDirichletBoundaryRight(self, *args):
        """
        hasDirichletBoundaryRight(self, dimension) -> bool

        Parameters:
            dimension: size_t


        1
        """
        return _pysgpp_swig.BoundingBox_hasDirichletBoundaryRight(self, *args)

    def toString(self):
        """
        toString(self) -> std::string

        Parameters:
            self: sg::base::BoundingBox *


        1
        """
        return _pysgpp_swig.BoundingBox_toString(self)

BoundingBox_swigregister = _pysgpp_swig.BoundingBox_swigregister
BoundingBox_swigregister(BoundingBox)

LOOKUPSIZE = _pysgpp_swig.LOOKUPSIZE
LOOKUPMAX = _pysgpp_swig.LOOKUPMAX
class Stretching1D(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Stretching1D, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Stretching1D, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _pysgpp_swig.Stretching1D_type_set
    __swig_getmethods__["type"] = _pysgpp_swig.Stretching1D_type_get
    if _newclass:type = _swig_property(_pysgpp_swig.Stretching1D_type_get, _pysgpp_swig.Stretching1D_type_set)
    __swig_setmethods__["x_0"] = _pysgpp_swig.Stretching1D_x_0_set
    __swig_getmethods__["x_0"] = _pysgpp_swig.Stretching1D_x_0_get
    if _newclass:x_0 = _swig_property(_pysgpp_swig.Stretching1D_x_0_get, _pysgpp_swig.Stretching1D_x_0_set)
    __swig_setmethods__["xsi"] = _pysgpp_swig.Stretching1D_xsi_set
    __swig_getmethods__["xsi"] = _pysgpp_swig.Stretching1D_xsi_get
    if _newclass:xsi = _swig_property(_pysgpp_swig.Stretching1D_xsi_get, _pysgpp_swig.Stretching1D_xsi_set)
    __swig_setmethods__["lookup"] = _pysgpp_swig.Stretching1D_lookup_set
    __swig_getmethods__["lookup"] = _pysgpp_swig.Stretching1D_lookup_get
    if _newclass:lookup = _swig_property(_pysgpp_swig.Stretching1D_lookup_get, _pysgpp_swig.Stretching1D_lookup_set)
    def __init__(self): 
        """
        __init__(self) -> Stretching1D

        1
        """
        this = _pysgpp_swig.new_Stretching1D()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_Stretching1D
    __del__ = lambda self : None;
Stretching1D_swigregister = _pysgpp_swig.Stretching1D_swigregister
Stretching1D_swigregister(Stretching1D)

class Stretching(BoundingBox):
    """1"""
    __swig_setmethods__ = {}
    for _s in [BoundingBox]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Stretching, name, value)
    __swig_getmethods__ = {}
    for _s in [BoundingBox]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Stretching, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, dim, boundaries, stretching1ds) -> Stretching

        Parameters:
            dim: size_t
            boundaries: sg::base::DimensionBoundary *
            stretching1ds: sg::base::Stretching1D *

        __init__(self, dim, boundaries, t) -> Stretching

        Parameters:
            dim: size_t
            boundaries: std::vector< sg::base::DimensionBoundary,std::allocator< sg::base::DimensionBoundary > >
            t: std::vector< sg::base::Stretching1D,std::allocator< sg::base::Stretching1D > >

        __init__(self, dim, coordinates) -> Stretching

        Parameters:
            dim: size_t
            coordinates: std::vector< sg::float_t,std::allocator< sg::float_t > > *

        __init__(self, copyStretching) -> Stretching

        Parameters:
            copyStretching: sg::base::Stretching &


        1
        """
        this = _pysgpp_swig.new_Stretching(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_Stretching
    __del__ = lambda self : None;
    def getCoordinates(self, *args):
        """
        getCoordinates(self, level, index, dimension) -> sg::float_t

        Parameters:
            level: int
            index: int
            dimension: size_t


        1
        """
        return _pysgpp_swig.Stretching_getCoordinates(self, *args)

    def getStretching1D(self, *args):
        """
        getStretching1D(self, dim) -> Stretching1D

        Parameters:
            dim: size_t


        1
        """
        return _pysgpp_swig.Stretching_getStretching1D(self, *args)

    def printLookupTable(self):
        """
        printLookupTable(self)

        Parameters:
            self: sg::base::Stretching *


        1
        """
        return _pysgpp_swig.Stretching_printLookupTable(self)

    def getAdjacentPositions(self, *args):
        """
        getAdjacentPositions(self, level, index, dimension, posc, posl, posr)

        Parameters:
            level: int
            index: int
            dimension: size_t
            posc: sg::float_t &
            posl: sg::float_t &
            posr: sg::float_t &


        1
        """
        return _pysgpp_swig.Stretching_getAdjacentPositions(self, *args)

    def getStretchingMode(self):
        """
        getStretchingMode(self) -> std::string *

        Parameters:
            self: sg::base::Stretching *


        1
        """
        return _pysgpp_swig.Stretching_getStretchingMode(self)

    def getDiscreteVector(self, *args):
        """
        getDiscreteVector(self, bSort) -> DoubleVector

        Parameters:
            bSort: bool


        1
        """
        return _pysgpp_swig.Stretching_getDiscreteVector(self, *args)

    def getDiscreteVectorLevel(self):
        """
        getDiscreteVectorLevel(self) -> int *

        Parameters:
            self: sg::base::Stretching *


        1
        """
        return _pysgpp_swig.Stretching_getDiscreteVectorLevel(self)

    def calculateNeighborLookup(self, *args):
        """
        calculateNeighborLookup(self, maxlevel)

        Parameters:
            maxlevel: int


        1
        """
        return _pysgpp_swig.Stretching_calculateNeighborLookup(self, *args)

Stretching_swigregister = _pysgpp_swig.Stretching_swigregister
Stretching_swigregister(Stretching)

SERIALIZATION_VERSION = _pysgpp_swig.SERIALIZATION_VERSION
class HashGridIndex(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HashGridIndex, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HashGridIndex, name)
    __repr__ = _swig_repr
    Normal = _pysgpp_swig.HashGridIndex_Normal
    ClenshawCurtis = _pysgpp_swig.HashGridIndex_ClenshawCurtis
    def __init__(self, *args): 
        """
        __init__(self, dim) -> HashGridIndex

        Parameters:
            dim: size_t

        __init__(self) -> HashGridIndex
        __init__(self, o) -> HashGridIndex

        Parameters:
            o: sg::base::HashGridIndex const &

        __init__(self, istream, version) -> HashGridIndex

        Parameters:
            istream: std::istream &
            version: int


        1
        """
        this = _pysgpp_swig.new_HashGridIndex(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_HashGridIndex
    __del__ = lambda self : None;
    def serialize(self, *args):
        """
        serialize(self, ostream)

        Parameters:
            ostream: std::ostream &


        1
        """
        return _pysgpp_swig.HashGridIndex_serialize(self, *args)

    def dim(self):
        """
        dim(self) -> size_t

        Parameters:
            self: sg::base::HashGridIndex const *


        1
        """
        return _pysgpp_swig.HashGridIndex_dim(self)

    def set(self, *args):
        """
        set(self, d, l, i)

        Parameters:
            d: size_t
            l: sg::base::HashGridIndex::level_type
            i: sg::base::HashGridIndex::index_type

        set(self, d, l, i, isLeaf)

        Parameters:
            d: size_t
            l: sg::base::HashGridIndex::level_type
            i: sg::base::HashGridIndex::index_type
            isLeaf: bool


        1
        """
        return _pysgpp_swig.HashGridIndex_set(self, *args)

    def push(self, *args):
        """
        push(self, d, l, i)

        Parameters:
            d: size_t
            l: sg::base::HashGridIndex::level_type
            i: sg::base::HashGridIndex::index_type

        push(self, d, l, i, isLeaf)

        Parameters:
            d: size_t
            l: sg::base::HashGridIndex::level_type
            i: sg::base::HashGridIndex::index_type
            isLeaf: bool


        1
        """
        return _pysgpp_swig.HashGridIndex_push(self, *args)

    def get(self, *args):
        """
        get(self, d)

        Parameters:
            d: size_t


        1
        """
        return _pysgpp_swig.HashGridIndex_get(self, *args)

    def getLevel(self, *args):
        """
        getLevel(self, d) -> sg::base::HashGridIndex::level_type

        Parameters:
            d: size_t


        1
        """
        return _pysgpp_swig.HashGridIndex_getLevel(self, *args)

    def getIndex(self, *args):
        """
        getIndex(self, d) -> sg::base::HashGridIndex::index_type

        Parameters:
            d: size_t


        1
        """
        return _pysgpp_swig.HashGridIndex_getIndex(self, *args)

    def getPointDistribution(self):
        """
        getPointDistribution(self) -> sg::base::HashGridIndex::PointDistribution

        Parameters:
            self: sg::base::HashGridIndex const *


        1
        """
        return _pysgpp_swig.HashGridIndex_getPointDistribution(self)

    def setPointDistribution(self, *args):
        """
        setPointDistribution(self, distr)

        Parameters:
            distr: enum sg::base::HashGridIndex::PointDistribution


        1
        """
        return _pysgpp_swig.HashGridIndex_setPointDistribution(self, *args)

    def setLeaf(self, *args):
        """
        setLeaf(self, isLeaf)

        Parameters:
            isLeaf: bool


        1
        """
        return _pysgpp_swig.HashGridIndex_setLeaf(self, *args)

    def isLeaf(self):
        """
        isLeaf(self) -> bool

        Parameters:
            self: sg::base::HashGridIndex *


        1
        """
        return _pysgpp_swig.HashGridIndex_isLeaf(self)

    def getCoord(self, *args):
        """
        getCoord(self, d) -> sg::float_t

        Parameters:
            d: size_t


        1
        """
        return _pysgpp_swig.HashGridIndex_getCoord(self, *args)

    def getCoordBB(self, *args):
        """
        getCoordBB(self, d, q, t) -> sg::float_t

        Parameters:
            d: size_t
            q: sg::float_t
            t: sg::float_t


        1
        """
        return _pysgpp_swig.HashGridIndex_getCoordBB(self, *args)

    def getCoordStretching(self, *args):
        """
        getCoordStretching(self, d, stretch) -> sg::float_t

        Parameters:
            d: size_t
            stretch: sg::base::Stretching *


        1
        """
        return _pysgpp_swig.HashGridIndex_getCoordStretching(self, *args)

    def isInnerPoint(self):
        """
        isInnerPoint(self) -> bool

        Parameters:
            self: sg::base::HashGridIndex const *


        1
        """
        return _pysgpp_swig.HashGridIndex_isInnerPoint(self)

    def getPointer(self):
        """
        getPointer(self) -> HashGridIndex

        Parameters:
            self: sg::base::HashGridIndex *


        1
        """
        return _pysgpp_swig.HashGridIndex_getPointer(self)

    def rehash(self):
        """
        rehash(self)

        Parameters:
            self: sg::base::HashGridIndex *


        1
        """
        return _pysgpp_swig.HashGridIndex_rehash(self)

    def hash(self):
        """
        hash(self) -> size_t

        Parameters:
            self: sg::base::HashGridIndex const *


        1
        """
        return _pysgpp_swig.HashGridIndex_hash(self)

    def equals(self, *args):
        """
        equals(self, rhs) -> bool

        Parameters:
            rhs: sg::base::HashGridIndex const &


        1
        """
        return _pysgpp_swig.HashGridIndex_equals(self, *args)

    def assign(self, *args):
        """
        assign(self, rhs) -> HashGridIndex

        Parameters:
            rhs: sg::base::HashGridIndex const &


        1
        """
        return _pysgpp_swig.HashGridIndex_assign(self, *args)

    def toString(self, *args):
        """
        toString(self) -> std::string
        toString(self, stream)

        Parameters:
            stream: std::ostream &


        1
        """
        return _pysgpp_swig.HashGridIndex_toString(self, *args)

    def getCoords(self, *args):
        """
        getCoords(self, p)

        Parameters:
            p: sg::base::DataVector &


        1
        """
        return _pysgpp_swig.HashGridIndex_getCoords(self, *args)

    def getCoordsBB(self, *args):
        """
        getCoordsBB(self, p, BB)

        Parameters:
            p: sg::base::DataVector &
            BB: sg::base::BoundingBox &


        1
        """
        return _pysgpp_swig.HashGridIndex_getCoordsBB(self, *args)

    def getCoordsStretching(self, *args):
        """
        getCoordsStretching(self, p, stretch)

        Parameters:
            p: sg::base::DataVector &
            stretch: sg::base::Stretching &


        1
        """
        return _pysgpp_swig.HashGridIndex_getCoordsStretching(self, *args)

    def getCoordsString(self):
        """
        getCoordsString(self) -> std::string

        Parameters:
            self: sg::base::HashGridIndex const *


        1
        """
        return _pysgpp_swig.HashGridIndex_getCoordsString(self)

    def getCoordsStringBB(self, *args):
        """
        getCoordsStringBB(self, BB) -> std::string

        Parameters:
            BB: sg::base::BoundingBox &


        1
        """
        return _pysgpp_swig.HashGridIndex_getCoordsStringBB(self, *args)

    def getCoordsStringStretching(self, *args):
        """
        getCoordsStringStretching(self, stretch) -> std::string

        Parameters:
            stretch: sg::base::Stretching &


        1
        """
        return _pysgpp_swig.HashGridIndex_getCoordsStringStretching(self, *args)

    def getLevelSum(self):
        """
        getLevelSum(self) -> sg::base::HashGridIndex::level_type

        Parameters:
            self: sg::base::HashGridIndex const *


        1
        """
        return _pysgpp_swig.HashGridIndex_getLevelSum(self)

    def getLevelMax(self):
        """
        getLevelMax(self) -> sg::base::HashGridIndex::level_type

        Parameters:
            self: sg::base::HashGridIndex const *


        1
        """
        return _pysgpp_swig.HashGridIndex_getLevelMax(self)

    def getLevelMin(self):
        """
        getLevelMin(self) -> sg::base::HashGridIndex::level_type

        Parameters:
            self: sg::base::HashGridIndex const *


        1
        """
        return _pysgpp_swig.HashGridIndex_getLevelMin(self)

HashGridIndex_swigregister = _pysgpp_swig.HashGridIndex_swigregister
HashGridIndex_swigregister(HashGridIndex)

class HashGridIndexPointerHashFunctor(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HashGridIndexPointerHashFunctor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HashGridIndexPointerHashFunctor, name)
    __repr__ = _swig_repr
    def __call__(self, *args):
        """
        __call__(self, index) -> size_t

        Parameters:
            index: sg::base::HashGridIndex const *


        1
        """
        return _pysgpp_swig.HashGridIndexPointerHashFunctor___call__(self, *args)

    def __init__(self): 
        """
        __init__(self) -> HashGridIndexPointerHashFunctor

        1
        """
        this = _pysgpp_swig.new_HashGridIndexPointerHashFunctor()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_HashGridIndexPointerHashFunctor
    __del__ = lambda self : None;
HashGridIndexPointerHashFunctor_swigregister = _pysgpp_swig.HashGridIndexPointerHashFunctor_swigregister
HashGridIndexPointerHashFunctor_swigregister(HashGridIndexPointerHashFunctor)

class HashGridIndexPointerEqualityFunctor(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HashGridIndexPointerEqualityFunctor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HashGridIndexPointerEqualityFunctor, name)
    __repr__ = _swig_repr
    def __call__(self, *args):
        """
        __call__(self, s1, s2) -> size_t

        Parameters:
            s1: sg::base::HashGridIndex const *
            s2: sg::base::HashGridIndex const *


        1
        """
        return _pysgpp_swig.HashGridIndexPointerEqualityFunctor___call__(self, *args)

    def __init__(self): 
        """
        __init__(self) -> HashGridIndexPointerEqualityFunctor

        1
        """
        this = _pysgpp_swig.new_HashGridIndexPointerEqualityFunctor()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_HashGridIndexPointerEqualityFunctor
    __del__ = lambda self : None;
HashGridIndexPointerEqualityFunctor_swigregister = _pysgpp_swig.HashGridIndexPointerEqualityFunctor_swigregister
HashGridIndexPointerEqualityFunctor_swigregister(HashGridIndexPointerEqualityFunctor)

class HashGridIndexHashFunctor(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HashGridIndexHashFunctor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HashGridIndexHashFunctor, name)
    __repr__ = _swig_repr
    def __call__(self, *args):
        """
        __call__(self, index) -> size_t

        Parameters:
            index: sg::base::HashGridIndex const &


        1
        """
        return _pysgpp_swig.HashGridIndexHashFunctor___call__(self, *args)

    def __init__(self): 
        """
        __init__(self) -> HashGridIndexHashFunctor

        1
        """
        this = _pysgpp_swig.new_HashGridIndexHashFunctor()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_HashGridIndexHashFunctor
    __del__ = lambda self : None;
HashGridIndexHashFunctor_swigregister = _pysgpp_swig.HashGridIndexHashFunctor_swigregister
HashGridIndexHashFunctor_swigregister(HashGridIndexHashFunctor)

class HashGridIndexEqualityFunctor(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HashGridIndexEqualityFunctor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HashGridIndexEqualityFunctor, name)
    __repr__ = _swig_repr
    def __call__(self, *args):
        """
        __call__(self, s1, s2) -> size_t

        Parameters:
            s1: sg::base::HashGridIndex const &
            s2: sg::base::HashGridIndex const &


        1
        """
        return _pysgpp_swig.HashGridIndexEqualityFunctor___call__(self, *args)

    def __init__(self): 
        """
        __init__(self) -> HashGridIndexEqualityFunctor

        1
        """
        this = _pysgpp_swig.new_HashGridIndexEqualityFunctor()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_HashGridIndexEqualityFunctor
    __del__ = lambda self : None;
HashGridIndexEqualityFunctor_swigregister = _pysgpp_swig.HashGridIndexEqualityFunctor_swigregister
HashGridIndexEqualityFunctor_swigregister(HashGridIndexEqualityFunctor)

class HashGridStorage(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HashGridStorage, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HashGridStorage, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, dim) -> HashGridStorage

        Parameters:
            dim: size_t

        __init__(self, creationBoundingBox) -> HashGridStorage

        Parameters:
            creationBoundingBox: sg::base::BoundingBox &

        __init__(self, creationStretching) -> HashGridStorage

        Parameters:
            creationStretching: sg::base::Stretching &

        __init__(self, istr) -> HashGridStorage

        Parameters:
            istr: std::string &

        __init__(self, istream) -> HashGridStorage

        Parameters:
            istream: std::istream &

        __init__(self, copyFrom) -> HashGridStorage

        Parameters:
            copyFrom: sg::base::HashGridStorage &


        1
        """
        this = _pysgpp_swig.new_HashGridStorage(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_HashGridStorage
    __del__ = lambda self : None;
    def emptyStorage(self):
        """
        emptyStorage(self)

        Parameters:
            self: sg::base::HashGridStorage *


        1
        """
        return _pysgpp_swig.HashGridStorage_emptyStorage(self)

    def deletePoints(self, *args):
        """
        deletePoints(self, removePoints) -> IndexVector

        Parameters:
            removePoints: std::list< size_t,std::allocator< size_t > > &


        1
        """
        return _pysgpp_swig.HashGridStorage_deletePoints(self, *args)

    def unserialize_noAlgoDims(self, *args):
        """
        unserialize_noAlgoDims(self, istr)

        Parameters:
            istr: std::string &


        1
        """
        return _pysgpp_swig.HashGridStorage_unserialize_noAlgoDims(self, *args)

    def serialize(self, *args):
        """
        serialize(self) -> std::string
        serialize(self, ostream)

        Parameters:
            ostream: std::ostream &


        1
        """
        return _pysgpp_swig.HashGridStorage_serialize(self, *args)

    def toString(self, *args):
        """
        toString(self) -> std::string
        toString(self, stream)

        Parameters:
            stream: std::ostream &


        1
        """
        return _pysgpp_swig.HashGridStorage_toString(self, *args)

    def size(self):
        """
        size(self) -> size_t

        Parameters:
            self: sg::base::HashGridStorage const *


        1
        """
        return _pysgpp_swig.HashGridStorage_size(self)

    def getNumInnerPoints(self):
        """
        getNumInnerPoints(self) -> size_t

        Parameters:
            self: sg::base::HashGridStorage const *


        1
        """
        return _pysgpp_swig.HashGridStorage_getNumInnerPoints(self)

    def dim(self):
        """
        dim(self) -> size_t

        Parameters:
            self: sg::base::HashGridStorage const *


        1
        """
        return _pysgpp_swig.HashGridStorage_dim(self)

    def get(self, *args):
        """
        get(self, seq) -> HashGridIndex

        Parameters:
            seq: size_t


        1
        """
        return _pysgpp_swig.HashGridStorage_get(self, *args)

    def insert(self, *args):
        """
        insert(self, index) -> size_t

        Parameters:
            index: sg::base::HashGridStorage::index_type &


        1
        """
        return _pysgpp_swig.HashGridStorage_insert(self, *args)

    def update(self, *args):
        """
        update(self, index, pos)

        Parameters:
            index: sg::base::HashGridStorage::index_type &
            pos: size_t


        1
        """
        return _pysgpp_swig.HashGridStorage_update(self, *args)

    def deleteLast(self):
        """
        deleteLast(self)

        Parameters:
            self: sg::base::HashGridStorage *


        1
        """
        return _pysgpp_swig.HashGridStorage_deleteLast(self)

    def create(self, *args):
        """
        create(self, index) -> HashGridIndex

        Parameters:
            index: sg::base::HashGridStorage::index_type &


        1
        """
        return _pysgpp_swig.HashGridStorage_create(self, *args)

    def destroy(self, *args):
        """
        destroy(self, index)

        Parameters:
            index: sg::base::HashGridStorage::index_pointer


        1
        """
        return _pysgpp_swig.HashGridStorage_destroy(self, *args)

    def store(self, *args):
        """
        store(self, index) -> unsigned int

        Parameters:
            index: sg::base::HashGridStorage::index_pointer


        1
        """
        return _pysgpp_swig.HashGridStorage_store(self, *args)

    def find(self, *args):
        """
        find(self, index) -> sg::base::HashGridStorage::grid_map_iterator

        Parameters:
            index: sg::base::HashGridStorage::index_pointer


        1
        """
        return _pysgpp_swig.HashGridStorage_find(self, *args)

    def begin(self):
        """
        begin(self) -> sg::base::HashGridStorage::grid_map_iterator

        Parameters:
            self: sg::base::HashGridStorage *


        1
        """
        return _pysgpp_swig.HashGridStorage_begin(self)

    def has_key(self, *args):
        """
        has_key(self, index) -> bool

        Parameters:
            index: sg::base::HashGridIndex *


        1
        """
        return _pysgpp_swig.HashGridStorage_has_key(self, *args)

    def left_levelzero(self, *args):
        """
        left_levelzero(self, index, dim)

        Parameters:
            index: sg::base::HashGridIndex *
            dim: size_t


        1
        """
        return _pysgpp_swig.HashGridStorage_left_levelzero(self, *args)

    def right_levelzero(self, *args):
        """
        right_levelzero(self, index, dim)

        Parameters:
            index: sg::base::HashGridIndex *
            dim: size_t


        1
        """
        return _pysgpp_swig.HashGridStorage_right_levelzero(self, *args)

    def left_child(self, *args):
        """
        left_child(self, index, dim)

        Parameters:
            index: sg::base::HashGridIndex *
            dim: size_t


        1
        """
        return _pysgpp_swig.HashGridStorage_left_child(self, *args)

    def right_child(self, *args):
        """
        right_child(self, index, dim)

        Parameters:
            index: sg::base::HashGridIndex *
            dim: size_t


        1
        """
        return _pysgpp_swig.HashGridStorage_right_child(self, *args)

    def top(self, *args):
        """
        top(self, index, d)

        Parameters:
            index: sg::base::HashGridIndex *
            d: size_t


        1
        """
        return _pysgpp_swig.HashGridStorage_top(self, *args)

    def seq(self, *args):
        """
        seq(self, index) -> size_t

        Parameters:
            index: sg::base::HashGridIndex *


        1
        """
        return _pysgpp_swig.HashGridStorage_seq(self, *args)

    def end(self, *args):
        """
        end(self) -> sg::base::HashGridStorage::grid_map_iterator
        end(self, s) -> bool

        Parameters:
            s: size_t


        1
        """
        return _pysgpp_swig.HashGridStorage_end(self, *args)

    def getAlgorithmicDimensions(self):
        """
        getAlgorithmicDimensions(self) -> IndexVector

        Parameters:
            self: sg::base::HashGridStorage *


        1
        """
        return _pysgpp_swig.HashGridStorage_getAlgorithmicDimensions(self)

    def setAlgorithmicDimensions(self, *args):
        """
        setAlgorithmicDimensions(self, newAlgoDims)

        Parameters:
            newAlgoDims: std::vector< size_t,std::allocator< size_t > >


        1
        """
        return _pysgpp_swig.HashGridStorage_setAlgorithmicDimensions(self, *args)

    def recalcLeafProperty(self):
        """
        recalcLeafProperty(self)

        Parameters:
            self: sg::base::HashGridStorage *


        1
        """
        return _pysgpp_swig.HashGridStorage_recalcLeafProperty(self)

    def getBoundingBox(self):
        """
        getBoundingBox(self) -> BoundingBox

        Parameters:
            self: sg::base::HashGridStorage *


        1
        """
        return _pysgpp_swig.HashGridStorage_getBoundingBox(self)

    def getStretching(self):
        """
        getStretching(self) -> Stretching

        Parameters:
            self: sg::base::HashGridStorage *


        1
        """
        return _pysgpp_swig.HashGridStorage_getStretching(self)

    def setBoundingBox(self, *args):
        """
        setBoundingBox(self, bb)

        Parameters:
            bb: sg::base::BoundingBox &


        1
        """
        return _pysgpp_swig.HashGridStorage_setBoundingBox(self, *args)

    def setStretching(self, *args):
        """
        setStretching(self, bb)

        Parameters:
            bb: sg::base::Stretching &


        1
        """
        return _pysgpp_swig.HashGridStorage_setStretching(self, *args)

    def getLevelIndexArraysForEval(self, *args):
        """
        getLevelIndexArraysForEval(self, level, index)

        Parameters:
            level: sg::base::DataMatrix &
            index: sg::base::DataMatrix &

        getLevelIndexArraysForEval(self, level, index)

        Parameters:
            level: sg::base::DataMatrixSP &
            index: sg::base::DataMatrixSP &


        1
        """
        return _pysgpp_swig.HashGridStorage_getLevelIndexArraysForEval(self, *args)

    def getLevelForIntegral(self, *args):
        """
        getLevelForIntegral(self, level)

        Parameters:
            level: sg::base::DataMatrix &


        1
        """
        return _pysgpp_swig.HashGridStorage_getLevelForIntegral(self, *args)

    def getMaxLevel(self):
        """
        getMaxLevel(self) -> size_t

        Parameters:
            self: sg::base::HashGridStorage const *


        1
        """
        return _pysgpp_swig.HashGridStorage_getMaxLevel(self)

    def getLevelIndexMaskArraysForModEval(self, *args):
        """
        getLevelIndexMaskArraysForModEval(self, level, index, mask, offset)

        Parameters:
            level: sg::base::DataMatrix &
            index: sg::base::DataMatrix &
            mask: sg::base::DataMatrix &
            offset: sg::base::DataMatrix &

        getLevelIndexMaskArraysForModEval(self, level, index, mask, offset)

        Parameters:
            level: sg::base::DataMatrixSP &
            index: sg::base::DataMatrixSP &
            mask: sg::base::DataMatrixSP &
            offset: sg::base::DataMatrixSP &


        1
        """
        return _pysgpp_swig.HashGridStorage_getLevelIndexMaskArraysForModEval(self, *args)

HashGridStorage_swigregister = _pysgpp_swig.HashGridStorage_swigregister
HashGridStorage_swigregister(HashGridStorage)

class HashGridIterator(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HashGridIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HashGridIterator, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, storage) -> HashGridIterator

        Parameters:
            storage: sg::base::HashGridStorage *

        __init__(self, copy) -> HashGridIterator

        Parameters:
            copy: sg::base::HashGridIterator &


        1
        """
        this = _pysgpp_swig.new_HashGridIterator(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_HashGridIterator
    __del__ = lambda self : None;
    def resetToLevelZero(self):
        """
        resetToLevelZero(self)

        Parameters:
            self: sg::base::HashGridIterator *


        1
        """
        return _pysgpp_swig.HashGridIterator_resetToLevelZero(self)

    def resetToLeftLevelZero(self, *args):
        """
        resetToLeftLevelZero(self, dim)

        Parameters:
            dim: size_t


        1
        """
        return _pysgpp_swig.HashGridIterator_resetToLeftLevelZero(self, *args)

    def resetToRightLevelZero(self, *args):
        """
        resetToRightLevelZero(self, dim)

        Parameters:
            dim: size_t


        1
        """
        return _pysgpp_swig.HashGridIterator_resetToRightLevelZero(self, *args)

    def resetToLevelOne(self, *args):
        """
        resetToLevelOne(self, d)

        Parameters:
            d: size_t


        1
        """
        return _pysgpp_swig.HashGridIterator_resetToLevelOne(self, *args)

    def leftChild(self, *args):
        """
        leftChild(self, dim)

        Parameters:
            dim: size_t


        1
        """
        return _pysgpp_swig.HashGridIterator_leftChild(self, *args)

    def rightChild(self, *args):
        """
        rightChild(self, dim)

        Parameters:
            dim: size_t


        1
        """
        return _pysgpp_swig.HashGridIterator_rightChild(self, *args)

    def up(self, *args):
        """
        up(self, d)

        Parameters:
            d: size_t


        1
        """
        return _pysgpp_swig.HashGridIterator_up(self, *args)

    def stepLeft(self, *args):
        """
        stepLeft(self, d)

        Parameters:
            d: size_t


        1
        """
        return _pysgpp_swig.HashGridIterator_stepLeft(self, *args)

    def stepRight(self, *args):
        """
        stepRight(self, d)

        Parameters:
            d: size_t


        1
        """
        return _pysgpp_swig.HashGridIterator_stepRight(self, *args)

    def isInnerPoint(self):
        """
        isInnerPoint(self) -> bool

        Parameters:
            self: sg::base::HashGridIterator const *


        1
        """
        return _pysgpp_swig.HashGridIterator_isInnerPoint(self)

    def hint(self):
        """
        hint(self) -> bool

        Parameters:
            self: sg::base::HashGridIterator const *


        1
        """
        return _pysgpp_swig.HashGridIterator_hint(self)

    def hintLeft(self, *args):
        """
        hintLeft(self, d) -> bool

        Parameters:
            d: size_t


        1
        """
        return _pysgpp_swig.HashGridIterator_hintLeft(self, *args)

    def hintRight(self, *args):
        """
        hintRight(self, d) -> bool

        Parameters:
            d: size_t


        1
        """
        return _pysgpp_swig.HashGridIterator_hintRight(self, *args)

    def get(self, *args):
        """
        get(self, d)

        Parameters:
            d: size_t


        1
        """
        return _pysgpp_swig.HashGridIterator_get(self, *args)

    def set(self, *args):
        """
        set(self, d, l, i)

        Parameters:
            d: size_t
            l: sg::base::HashGridIterator::index_type::level_type
            i: sg::base::HashGridIterator::index_type::index_type

        set(self, point)

        Parameters:
            point: sg::base::HashGridIterator::index_type const &


        1
        """
        return _pysgpp_swig.HashGridIterator_set(self, *args)

    def push(self, *args):
        """
        push(self, d, l, i)

        Parameters:
            d: size_t
            l: sg::base::HashGridIterator::index_type::level_type
            i: sg::base::HashGridIterator::index_type::index_type


        1
        """
        return _pysgpp_swig.HashGridIterator_push(self, *args)

    def seq(self):
        """
        seq(self) -> size_t

        Parameters:
            self: sg::base::HashGridIterator const *


        1
        """
        return _pysgpp_swig.HashGridIterator_seq(self)

    def getGridDepth(self, *args):
        """
        getGridDepth(self, dim) -> sg::base::HashGridIterator::level_t

        Parameters:
            dim: size_t


        1
        """
        return _pysgpp_swig.HashGridIterator_getGridDepth(self, *args)

    def toString(self):
        """
        toString(self) -> std::string

        Parameters:
            self: sg::base::HashGridIterator *


        1
        """
        return _pysgpp_swig.HashGridIterator_toString(self)

HashGridIterator_swigregister = _pysgpp_swig.HashGridIterator_swigregister
HashGridIterator_swigregister(HashGridIterator)

class RefinementFunctor(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RefinementFunctor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RefinementFunctor, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pysgpp_swig.delete_RefinementFunctor
    __del__ = lambda self : None;
    def __call__(self, *args):
        """
        __call__(self, storage, seq) -> sg::float_t

        Parameters:
            storage: sg::base::GridStorage *
            seq: size_t


        1
        """
        return _pysgpp_swig.RefinementFunctor___call__(self, *args)

    def start(self):
        """
        start(self) -> sg::float_t

        Parameters:
            self: sg::base::RefinementFunctor *


        1
        """
        return _pysgpp_swig.RefinementFunctor_start(self)

    def getRefinementsNum(self):
        """
        getRefinementsNum(self) -> size_t

        Parameters:
            self: sg::base::RefinementFunctor *


        1
        """
        return _pysgpp_swig.RefinementFunctor_getRefinementsNum(self)

    def getRefinementThreshold(self):
        """
        getRefinementThreshold(self) -> sg::float_t

        Parameters:
            self: sg::base::RefinementFunctor *


        1
        """
        return _pysgpp_swig.RefinementFunctor_getRefinementThreshold(self)

    def getTotalRefinementValue(self, *args):
        """
        getTotalRefinementValue(self, storage) -> sg::float_t

        Parameters:
            storage: sg::base::GridStorage *


        1
        """
        return _pysgpp_swig.RefinementFunctor_getTotalRefinementValue(self, *args)

RefinementFunctor_swigregister = _pysgpp_swig.RefinementFunctor_swigregister
RefinementFunctor_swigregister(RefinementFunctor)

class SurplusRefinementFunctor(RefinementFunctor):
    """1"""
    __swig_setmethods__ = {}
    for _s in [RefinementFunctor]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SurplusRefinementFunctor, name, value)
    __swig_getmethods__ = {}
    for _s in [RefinementFunctor]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SurplusRefinementFunctor, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, alpha, refinements_num=1, threshold=0.0) -> SurplusRefinementFunctor

        Parameters:
            alpha: sg::base::DataVector *
            refinements_num: size_t
            threshold: sg::float_t

        __init__(self, alpha, refinements_num=1) -> SurplusRefinementFunctor

        Parameters:
            alpha: sg::base::DataVector *
            refinements_num: size_t

        __init__(self, alpha) -> SurplusRefinementFunctor

        Parameters:
            alpha: sg::base::DataVector *


        1
        """
        this = _pysgpp_swig.new_SurplusRefinementFunctor(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_SurplusRefinementFunctor
    __del__ = lambda self : None;
SurplusRefinementFunctor_swigregister = _pysgpp_swig.SurplusRefinementFunctor_swigregister
SurplusRefinementFunctor_swigregister(SurplusRefinementFunctor)

class CoarseningFunctor(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CoarseningFunctor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CoarseningFunctor, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pysgpp_swig.delete_CoarseningFunctor
    __del__ = lambda self : None;
    def __call__(self, *args):
        """
        __call__(self, storage, seq) -> sg::float_t

        Parameters:
            storage: sg::base::GridStorage *
            seq: size_t


        1
        """
        return _pysgpp_swig.CoarseningFunctor___call__(self, *args)

    def start(self):
        """
        start(self) -> sg::float_t

        Parameters:
            self: sg::base::CoarseningFunctor *


        1
        """
        return _pysgpp_swig.CoarseningFunctor_start(self)

    def getRemovementsNum(self):
        """
        getRemovementsNum(self) -> size_t

        Parameters:
            self: sg::base::CoarseningFunctor *


        1
        """
        return _pysgpp_swig.CoarseningFunctor_getRemovementsNum(self)

    def getCoarseningThreshold(self):
        """
        getCoarseningThreshold(self) -> sg::float_t

        Parameters:
            self: sg::base::CoarseningFunctor *


        1
        """
        return _pysgpp_swig.CoarseningFunctor_getCoarseningThreshold(self)

CoarseningFunctor_swigregister = _pysgpp_swig.CoarseningFunctor_swigregister
CoarseningFunctor_swigregister(CoarseningFunctor)

class GridGenerator(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GridGenerator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GridGenerator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pysgpp_swig.delete_GridGenerator
    __del__ = lambda self : None;
    def regular(self, *args):
        """
        regular(self, level)

        Parameters:
            level: size_t


        1
        """
        return _pysgpp_swig.GridGenerator_regular(self, *args)

    def cliques(self, *args):
        """
        cliques(self, level, clique_size)

        Parameters:
            level: size_t
            clique_size: size_t


        1
        """
        return _pysgpp_swig.GridGenerator_cliques(self, *args)

    def full(self, *args):
        """
        full(self, level)

        Parameters:
            level: size_t


        1
        """
        return _pysgpp_swig.GridGenerator_full(self, *args)

    def truncated(self, *args):
        """
        truncated(self, level, l_user)

        Parameters:
            level: size_t
            l_user: size_t


        1
        """
        return _pysgpp_swig.GridGenerator_truncated(self, *args)

    def refine(self, *args):
        """
        refine(self, func)

        Parameters:
            func: sg::base::RefinementFunctor *


        1
        """
        return _pysgpp_swig.GridGenerator_refine(self, *args)

    def coarsen(self, *args):
        """
        coarsen(self, func, alpha)

        Parameters:
            func: sg::base::CoarseningFunctor *
            alpha: sg::base::DataVector *


        1
        """
        return _pysgpp_swig.GridGenerator_coarsen(self, *args)

    def coarsenNFirstOnly(self, *args):
        """
        coarsenNFirstOnly(self, func, alpha, numFirstOnly)

        Parameters:
            func: sg::base::CoarseningFunctor *
            alpha: sg::base::DataVector *
            numFirstOnly: size_t


        1
        """
        return _pysgpp_swig.GridGenerator_coarsenNFirstOnly(self, *args)

    def getNumberOfRefinablePoints(self):
        """
        getNumberOfRefinablePoints(self) -> size_t

        Parameters:
            self: sg::base::GridGenerator *


        1
        """
        return _pysgpp_swig.GridGenerator_getNumberOfRefinablePoints(self)

    def getNumberOfRemovablePoints(self):
        """
        getNumberOfRemovablePoints(self) -> size_t

        Parameters:
            self: sg::base::GridGenerator *


        1
        """
        return _pysgpp_swig.GridGenerator_getNumberOfRemovablePoints(self)

    def refineMaxLevel(self, *args):
        """
        refineMaxLevel(self, func, maxLevel)

        Parameters:
            func: sg::base::RefinementFunctor *
            maxLevel: size_t


        1
        """
        return _pysgpp_swig.GridGenerator_refineMaxLevel(self, *args)

    def getNumberOfRefinablePointsToMaxLevel(self, *args):
        """
        getNumberOfRefinablePointsToMaxLevel(self, maxLevel) -> size_t

        Parameters:
            maxLevel: size_t


        1
        """
        return _pysgpp_swig.GridGenerator_getNumberOfRefinablePointsToMaxLevel(self, *args)

GridGenerator_swigregister = _pysgpp_swig.GridGenerator_swigregister
GridGenerator_swigregister(GridGenerator)

class OperationMultipleEval(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OperationMultipleEval, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OperationMultipleEval, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pysgpp_swig.delete_OperationMultipleEval
    __del__ = lambda self : None;
    def mult(self, *args):
        """
        mult(self, alpha, result)

        Parameters:
            alpha: sg::base::DataVector &
            result: sg::base::DataVector &


        1
        """
        return _pysgpp_swig.OperationMultipleEval_mult(self, *args)

    def multTranspose(self, *args):
        """
        multTranspose(self, source, result)

        Parameters:
            source: sg::base::DataVector &
            result: sg::base::DataVector &


        1
        """
        return _pysgpp_swig.OperationMultipleEval_multTranspose(self, *args)

    def eval(self, *args):
        """
        eval(self, alpha, result)

        Parameters:
            alpha: sg::base::DataVector &
            result: sg::base::DataVector &


        1
        """
        return _pysgpp_swig.OperationMultipleEval_eval(self, *args)

    def prepare(self):
        """
        prepare(self)

        Parameters:
            self: sg::base::OperationMultipleEval *


        1
        """
        return _pysgpp_swig.OperationMultipleEval_prepare(self)

    def getImplementationName(self):
        """
        getImplementationName(self) -> std::string

        Parameters:
            self: sg::base::OperationMultipleEval *


        1
        """
        return _pysgpp_swig.OperationMultipleEval_getImplementationName(self)

OperationMultipleEval_swigregister = _pysgpp_swig.OperationMultipleEval_swigregister
OperationMultipleEval_swigregister(OperationMultipleEval)

class OperationMatrix(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OperationMatrix, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OperationMatrix, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pysgpp_swig.delete_OperationMatrix
    __del__ = lambda self : None;
    def mult(self, *args):
        """
        mult(self, alpha, result)

        Parameters:
            alpha: sg::base::DataVector &
            result: sg::base::DataVector &


        1
        """
        return _pysgpp_swig.OperationMatrix_mult(self, *args)

OperationMatrix_swigregister = _pysgpp_swig.OperationMatrix_swigregister
OperationMatrix_swigregister(OperationMatrix)

class OperationConvert(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OperationConvert, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OperationConvert, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pysgpp_swig.delete_OperationConvert
    __del__ = lambda self : None;
    def doConvertToLinear(self, *args):
        """
        doConvertToLinear(self, alpha)

        Parameters:
            alpha: sg::base::DataVector &


        1
        """
        return _pysgpp_swig.OperationConvert_doConvertToLinear(self, *args)

    def doConvertFromLinear(self, *args):
        """
        doConvertFromLinear(self, alpha)

        Parameters:
            alpha: sg::base::DataVector &


        1
        """
        return _pysgpp_swig.OperationConvert_doConvertFromLinear(self, *args)

OperationConvert_swigregister = _pysgpp_swig.OperationConvert_swigregister
OperationConvert_swigregister(OperationConvert)

class OperationEval(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OperationEval, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OperationEval, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pysgpp_swig.delete_OperationEval
    __del__ = lambda self : None;
    def eval(self, *args):
        """
        eval(self, alpha, point) -> sg::float_t

        Parameters:
            alpha: sg::base::DataVector const &
            point: std::vector< sg::float_t,std::allocator< sg::float_t > > const &

        eval(self, alpha, point) -> sg::float_t

        Parameters:
            alpha: sg::base::DataVector const &
            point: sg::base::DataVector const &


        1
        """
        return _pysgpp_swig.OperationEval_eval(self, *args)

OperationEval_swigregister = _pysgpp_swig.OperationEval_swigregister
OperationEval_swigregister(OperationEval)

class OperationNaiveEval(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OperationNaiveEval, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OperationNaiveEval, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pysgpp_swig.delete_OperationNaiveEval
    __del__ = lambda self : None;
    def eval(self, *args):
        """
        eval(self, alpha, point) -> sg::float_t

        Parameters:
            alpha: sg::base::DataVector const &
            point: std::vector< sg::float_t,std::allocator< sg::float_t > > const &

        eval(self, alpha, point) -> sg::float_t

        Parameters:
            alpha: sg::base::DataVector const &
            point: sg::base::DataVector const &


        1
        """
        return _pysgpp_swig.OperationNaiveEval_eval(self, *args)

OperationNaiveEval_swigregister = _pysgpp_swig.OperationNaiveEval_swigregister
OperationNaiveEval_swigregister(OperationNaiveEval)

class OperationNaiveEvalGradient(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OperationNaiveEvalGradient, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OperationNaiveEvalGradient, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pysgpp_swig.delete_OperationNaiveEvalGradient
    __del__ = lambda self : None;
    def evalGradient(self, *args):
        """
        evalGradient(self, alpha, point, gradient) -> sg::float_t

        Parameters:
            alpha: sg::base::DataVector const &
            point: std::vector< sg::float_t,std::allocator< sg::float_t > > const &
            gradient: sg::base::DataVector &

        evalGradient(self, alpha, point, gradient) -> sg::float_t

        Parameters:
            alpha: sg::base::DataVector const &
            point: sg::base::DataVector const &
            gradient: sg::base::DataVector &


        1
        """
        return _pysgpp_swig.OperationNaiveEvalGradient_evalGradient(self, *args)

OperationNaiveEvalGradient_swigregister = _pysgpp_swig.OperationNaiveEvalGradient_swigregister
OperationNaiveEvalGradient_swigregister(OperationNaiveEvalGradient)

class OperationNaiveEvalHessian(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OperationNaiveEvalHessian, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OperationNaiveEvalHessian, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pysgpp_swig.delete_OperationNaiveEvalHessian
    __del__ = lambda self : None;
    def evalHessian(self, *args):
        """
        evalHessian(self, alpha, point, gradient, hessian) -> sg::float_t

        Parameters:
            alpha: sg::base::DataVector const &
            point: std::vector< sg::float_t,std::allocator< sg::float_t > > const &
            gradient: sg::base::DataVector &
            hessian: sg::base::DataMatrix &

        evalHessian(self, alpha, point, gradient, hessian) -> sg::float_t

        Parameters:
            alpha: sg::base::DataVector const &
            point: sg::base::DataVector const &
            gradient: sg::base::DataVector &
            hessian: sg::base::DataMatrix &


        1
        """
        return _pysgpp_swig.OperationNaiveEvalHessian_evalHessian(self, *args)

OperationNaiveEvalHessian_swigregister = _pysgpp_swig.OperationNaiveEvalHessian_swigregister
OperationNaiveEvalHessian_swigregister(OperationNaiveEvalHessian)

class OperationNaiveEvalPartialDerivative(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OperationNaiveEvalPartialDerivative, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OperationNaiveEvalPartialDerivative, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pysgpp_swig.delete_OperationNaiveEvalPartialDerivative
    __del__ = lambda self : None;
    def evalPartialDerivative(self, *args):
        """
        evalPartialDerivative(self, alpha, point, derivDim) -> sg::float_t

        Parameters:
            alpha: sg::base::DataVector const &
            point: std::vector< sg::float_t,std::allocator< sg::float_t > > const &
            derivDim: size_t

        evalPartialDerivative(self, alpha, point, derivDim) -> sg::float_t

        Parameters:
            alpha: sg::base::DataVector const &
            point: sg::base::DataVector const &
            derivDim: size_t


        1
        """
        return _pysgpp_swig.OperationNaiveEvalPartialDerivative_evalPartialDerivative(self, *args)

OperationNaiveEvalPartialDerivative_swigregister = _pysgpp_swig.OperationNaiveEvalPartialDerivative_swigregister
OperationNaiveEvalPartialDerivative_swigregister(OperationNaiveEvalPartialDerivative)

class OperationHierarchisation(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OperationHierarchisation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OperationHierarchisation, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pysgpp_swig.delete_OperationHierarchisation
    __del__ = lambda self : None;
    def doHierarchisation(self, *args):
        """
        doHierarchisation(self, node_values)

        Parameters:
            node_values: sg::base::DataVector &


        1
        """
        return _pysgpp_swig.OperationHierarchisation_doHierarchisation(self, *args)

    def doDehierarchisation(self, *args):
        """
        doDehierarchisation(self, alpha)

        Parameters:
            alpha: sg::base::DataVector &


        1
        """
        return _pysgpp_swig.OperationHierarchisation_doDehierarchisation(self, *args)

OperationHierarchisation_swigregister = _pysgpp_swig.OperationHierarchisation_swigregister
OperationHierarchisation_swigregister(OperationHierarchisation)

class OperationQuadrature(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OperationQuadrature, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OperationQuadrature, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pysgpp_swig.delete_OperationQuadrature
    __del__ = lambda self : None;
    def doQuadrature(self, *args):
        """
        doQuadrature(self, alpha) -> sg::float_t

        Parameters:
            alpha: sg::base::DataVector &


        1
        """
        return _pysgpp_swig.OperationQuadrature_doQuadrature(self, *args)

OperationQuadrature_swigregister = _pysgpp_swig.OperationQuadrature_swigregister
OperationQuadrature_swigregister(OperationQuadrature)

class OperationQuadratureMC(OperationQuadrature):
    """1"""
    __swig_setmethods__ = {}
    for _s in [OperationQuadrature]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OperationQuadratureMC, name, value)
    __swig_getmethods__ = {}
    for _s in [OperationQuadrature]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OperationQuadratureMC, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, grid, mcPaths) -> OperationQuadratureMC

        Parameters:
            grid: sg::base::Grid &
            mcPaths: int


        1
        """
        this = _pysgpp_swig.new_OperationQuadratureMC(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OperationQuadratureMC
    __del__ = lambda self : None;
    def doQuadratureFunc(self, *args):
        """
        doQuadratureFunc(self, func, clientdata) -> sg::float_t

        Parameters:
            func: sg::base::FUNC
            clientdata: void *

        doQuadratureFunc(self, pyfunc) -> sg::float_t

        Parameters:
            pyfunc: PyObject *


        1
        """
        return _pysgpp_swig.OperationQuadratureMC_doQuadratureFunc(self, *args)

    def doQuadratureL2Error(self, *args):
        """
        doQuadratureL2Error(self, func, clientdata, alpha) -> sg::float_t

        Parameters:
            func: sg::base::FUNC
            clientdata: void *
            alpha: sg::base::DataVector &

        doQuadratureL2Error(self, pyfunc, alpha) -> sg::float_t

        Parameters:
            pyfunc: PyObject *
            alpha: sg::base::DataVector &


        1
        """
        return _pysgpp_swig.OperationQuadratureMC_doQuadratureL2Error(self, *args)

OperationQuadratureMC_swigregister = _pysgpp_swig.OperationQuadratureMC_swigregister
OperationQuadratureMC_swigregister(OperationQuadratureMC)

class DirichletUpdateVector(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DirichletUpdateVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DirichletUpdateVector, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, storage) -> DirichletUpdateVector

        Parameters:
            storage: sg::base::GridStorage *


        1
        """
        this = _pysgpp_swig.new_DirichletUpdateVector(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_DirichletUpdateVector
    __del__ = lambda self : None;
    def applyDirichletConditions(self, *args):
        """
        applyDirichletConditions(self, updateVector, sourceVector)

        Parameters:
            updateVector: sg::base::DataVector &
            sourceVector: sg::base::DataVector &


        1
        """
        return _pysgpp_swig.DirichletUpdateVector_applyDirichletConditions(self, *args)

    def setBoundariesToZero(self, *args):
        """
        setBoundariesToZero(self, updateVector)

        Parameters:
            updateVector: sg::base::DataVector &


        1
        """
        return _pysgpp_swig.DirichletUpdateVector_setBoundariesToZero(self, *args)

    def setInnerPointsToZero(self, *args):
        """
        setInnerPointsToZero(self, updateVector)

        Parameters:
            updateVector: sg::base::DataVector &


        1
        """
        return _pysgpp_swig.DirichletUpdateVector_setInnerPointsToZero(self, *args)

    def multiplyBoundaryVector(self, *args):
        """
        multiplyBoundaryVector(self, updateVector, factor)

        Parameters:
            updateVector: sg::base::DataVector &
            factor: sg::base::DataVector &


        1
        """
        return _pysgpp_swig.DirichletUpdateVector_multiplyBoundaryVector(self, *args)

    def multiplyBoundary(self, *args):
        """
        multiplyBoundary(self, updateVector, value)

        Parameters:
            updateVector: sg::base::DataVector &
            value: sg::float_t


        1
        """
        return _pysgpp_swig.DirichletUpdateVector_multiplyBoundary(self, *args)

    def multiply(self, *args):
        """
        multiply(self, updateVector, value, predicate)

        Parameters:
            updateVector: sg::base::DataVector &
            value: sg::float_t
            predicate: bool (*)(sg::base::GridIndex *,sg::base::GridStorage *)


        1
        """
        return _pysgpp_swig.DirichletUpdateVector_multiply(self, *args)

DirichletUpdateVector_swigregister = _pysgpp_swig.DirichletUpdateVector_swigregister
DirichletUpdateVector_swigregister(DirichletUpdateVector)

class HashGenerator(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HashGenerator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HashGenerator, name)
    __repr__ = _swig_repr
    def regular(self, *args):
        """
        regular(self, storage, level)

        Parameters:
            storage: sg::base::GridStorage *
            level: sg::base::HashGenerator::level_t


        1
        """
        return _pysgpp_swig.HashGenerator_regular(self, *args)

    def cliques(self, *args):
        """
        cliques(self, storage, level, clique_size)

        Parameters:
            storage: sg::base::GridStorage *
            level: sg::base::HashGenerator::level_t
            clique_size: size_t


        1
        """
        return _pysgpp_swig.HashGenerator_cliques(self, *args)

    def full(self, *args):
        """
        full(self, storage, level)

        Parameters:
            storage: sg::base::GridStorage *
            level: sg::base::HashGenerator::level_t


        1
        """
        return _pysgpp_swig.HashGenerator_full(self, *args)

    def fullWithBoundary(self, *args):
        """
        fullWithBoundary(self, storage, level)

        Parameters:
            storage: sg::base::GridStorage *
            level: sg::base::HashGenerator::level_t


        1
        """
        return _pysgpp_swig.HashGenerator_fullWithBoundary(self, *args)

    def regularWithBoundaries(self, *args):
        """
        regularWithBoundaries(self, storage, level, bTruncatedBoundaries)

        Parameters:
            storage: sg::base::GridStorage *
            level: sg::base::HashGenerator::level_t
            bTruncatedBoundaries: bool


        1
        """
        return _pysgpp_swig.HashGenerator_regularWithBoundaries(self, *args)

    def regularWithPeriodicBoundaries(self, *args):
        """
        regularWithPeriodicBoundaries(self, storage, level)

        Parameters:
            storage: sg::base::GridStorage *
            level: sg::base::HashGenerator::level_t


        1
        """
        return _pysgpp_swig.HashGenerator_regularWithPeriodicBoundaries(self, *args)

    def squareRoot(self, *args):
        """
        squareRoot(self, storage, level)

        Parameters:
            storage: sg::base::GridStorage *
            level: sg::base::HashGenerator::level_t


        1
        """
        return _pysgpp_swig.HashGenerator_squareRoot(self, *args)

    def truncated(self, *args):
        """
        truncated(self, storage, level, k)

        Parameters:
            storage: sg::base::GridStorage *
            level: sg::base::HashGenerator::level_t
            k: sg::base::HashGenerator::level_t


        1
        """
        return _pysgpp_swig.HashGenerator_truncated(self, *args)

    def __init__(self): 
        """
        __init__(self) -> HashGenerator

        1
        """
        this = _pysgpp_swig.new_HashGenerator()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_HashGenerator
    __del__ = lambda self : None;
HashGenerator_swigregister = _pysgpp_swig.HashGenerator_swigregister
HashGenerator_swigregister(HashGenerator)

class AbstractRefinement(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AbstractRefinement, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AbstractRefinement, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def free_refine(self, *args):
        """
        free_refine(self, storage, functor)

        Parameters:
            storage: sg::base::GridStorage *
            functor: sg::base::RefinementFunctor *


        1
        """
        return _pysgpp_swig.AbstractRefinement_free_refine(self, *args)

    def getNumberOfRefinablePoints(self, *args):
        """
        getNumberOfRefinablePoints(self, storage) -> size_t

        Parameters:
            storage: sg::base::GridStorage *


        1
        """
        return _pysgpp_swig.AbstractRefinement_getNumberOfRefinablePoints(self, *args)

    def refineGridpoint1D(self, *args):
        """
        refineGridpoint1D(self, storage, index, d)

        Parameters:
            storage: sg::base::GridStorage *
            index: sg::base::AbstractRefinement::index_type &
            d: size_t

        refineGridpoint1D(self, storage, seq, d)

        Parameters:
            storage: sg::base::GridStorage *
            seq: size_t
            d: size_t


        1
        """
        return _pysgpp_swig.AbstractRefinement_refineGridpoint1D(self, *args)

    def isRefinable(self, *args):
        """
        isRefinable(self, storage, index) -> bool

        Parameters:
            storage: sg::base::GridStorage *
            index: sg::base::AbstractRefinement::index_type &


        1
        """
        return _pysgpp_swig.AbstractRefinement_isRefinable(self, *args)

    __swig_destroy__ = _pysgpp_swig.delete_AbstractRefinement
    __del__ = lambda self : None;
    def getIndexOfMin(self, *args):
        """
        getIndexOfMin(self, array, length) -> size_t

        Parameters:
            array: sg::base::RefinementFunctor::value_type *
            length: size_t


        1
        """
        return _pysgpp_swig.AbstractRefinement_getIndexOfMin(self, *args)

AbstractRefinement_swigregister = _pysgpp_swig.AbstractRefinement_swigregister
AbstractRefinement_swigregister(AbstractRefinement)

class RefinementDecorator(AbstractRefinement):
    """1"""
    __swig_setmethods__ = {}
    for _s in [AbstractRefinement]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RefinementDecorator, name, value)
    __swig_getmethods__ = {}
    for _s in [AbstractRefinement]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, RefinementDecorator, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, refinement) -> RefinementDecorator

        Parameters:
            refinement: sg::base::AbstractRefinement *


        1
        """
        this = _pysgpp_swig.new_RefinementDecorator(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_RefinementDecorator
    __del__ = lambda self : None;
    def checkAdmissibility(self, *args):
        """
        checkAdmissibility(self, storage, subspace) -> bool

        Parameters:
            storage: sg::base::GridStorage *
            subspace: sg::base::AbstractRefinement::index_type &


        1
        """
        return _pysgpp_swig.RefinementDecorator_checkAdmissibility(self, *args)

RefinementDecorator_swigregister = _pysgpp_swig.RefinementDecorator_swigregister
RefinementDecorator_swigregister(RefinementDecorator)

class HashRefinement(AbstractRefinement):
    """1"""
    __swig_setmethods__ = {}
    for _s in [AbstractRefinement]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HashRefinement, name, value)
    __swig_getmethods__ = {}
    for _s in [AbstractRefinement]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, HashRefinement, name)
    __repr__ = _swig_repr
    def refineGridpoint1D(self, *args):
        """
        refineGridpoint1D(self, storage, index, d)

        Parameters:
            storage: sg::base::GridStorage *
            index: sg::base::AbstractRefinement::index_type &
            d: size_t

        refineGridpoint1D(self, storage, seq, d)

        Parameters:
            storage: sg::base::GridStorage *
            seq: size_t
            d: size_t


        1
        """
        return _pysgpp_swig.HashRefinement_refineGridpoint1D(self, *args)

    def __init__(self): 
        """
        __init__(self) -> HashRefinement

        1
        """
        this = _pysgpp_swig.new_HashRefinement()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_HashRefinement
    __del__ = lambda self : None;
HashRefinement_swigregister = _pysgpp_swig.HashRefinement_swigregister
HashRefinement_swigregister(HashRefinement)

class HashCoarsening(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HashCoarsening, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HashCoarsening, name)
    __repr__ = _swig_repr
    def free_coarsen_NFirstOnly(self, *args):
        """
        free_coarsen_NFirstOnly(self, storage, functor, alpha, numFirstPoints)

        Parameters:
            storage: sg::base::GridStorage *
            functor: sg::base::CoarseningFunctor *
            alpha: sg::base::DataVector *
            numFirstPoints: size_t


        1
        """
        return _pysgpp_swig.HashCoarsening_free_coarsen_NFirstOnly(self, *args)

    def free_coarsen(self, *args):
        """
        free_coarsen(self, storage, functor, alpha)

        Parameters:
            storage: sg::base::GridStorage *
            functor: sg::base::CoarseningFunctor *
            alpha: sg::base::DataVector *


        1
        """
        return _pysgpp_swig.HashCoarsening_free_coarsen(self, *args)

    def getNumberOfRemovablePoints(self, *args):
        """
        getNumberOfRemovablePoints(self, storage) -> size_t

        Parameters:
            storage: sg::base::GridStorage *


        1
        """
        return _pysgpp_swig.HashCoarsening_getNumberOfRemovablePoints(self, *args)

    def __init__(self): 
        """
        __init__(self) -> HashCoarsening

        1
        """
        this = _pysgpp_swig.new_HashCoarsening()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_HashCoarsening
    __del__ = lambda self : None;
HashCoarsening_swigregister = _pysgpp_swig.HashCoarsening_swigregister
HashCoarsening_swigregister(HashCoarsening)

class HashRefinementBoundaries(AbstractRefinement):
    """1"""
    __swig_setmethods__ = {}
    for _s in [AbstractRefinement]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HashRefinementBoundaries, name, value)
    __swig_getmethods__ = {}
    for _s in [AbstractRefinement]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, HashRefinementBoundaries, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """
        __init__(self) -> HashRefinementBoundaries

        1
        """
        this = _pysgpp_swig.new_HashRefinementBoundaries()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_HashRefinementBoundaries
    __del__ = lambda self : None;
HashRefinementBoundaries_swigregister = _pysgpp_swig.HashRefinementBoundaries_swigregister
HashRefinementBoundaries_swigregister(HashRefinementBoundaries)

class PredictiveRefinementIndicator(RefinementFunctor):
    """1"""
    __swig_setmethods__ = {}
    for _s in [RefinementFunctor]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PredictiveRefinementIndicator, name, value)
    __swig_getmethods__ = {}
    for _s in [RefinementFunctor]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PredictiveRefinementIndicator, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, grid, dataSet, errorVector, refinements_num=1, threshold=0.0) -> PredictiveRefinementIndicator

        Parameters:
            grid: sg::base::Grid *
            dataSet: sg::base::DataMatrix *
            errorVector: sg::base::DataVector *
            refinements_num: size_t
            threshold: sg::float_t

        __init__(self, grid, dataSet, errorVector, refinements_num=1) -> PredictiveRefinementIndicator

        Parameters:
            grid: sg::base::Grid *
            dataSet: sg::base::DataMatrix *
            errorVector: sg::base::DataVector *
            refinements_num: size_t

        __init__(self, grid, dataSet, errorVector) -> PredictiveRefinementIndicator

        Parameters:
            grid: sg::base::Grid *
            dataSet: sg::base::DataMatrix *
            errorVector: sg::base::DataVector *


        1
        """
        this = _pysgpp_swig.new_PredictiveRefinementIndicator(*args)
        try: self.this.append(this)
        except: self.this = this
    def __call__(self, *args):
        """
        __call__(self, gridPoint) -> sg::float_t

        Parameters:
            gridPoint: sg::base::AbstractRefinement::index_type *

        __call__(self, storage, seq) -> sg::float_t

        Parameters:
            storage: sg::base::GridStorage *
            seq: size_t


        1
        """
        return _pysgpp_swig.PredictiveRefinementIndicator___call__(self, *args)

    __swig_destroy__ = _pysgpp_swig.delete_PredictiveRefinementIndicator
    __del__ = lambda self : None;
PredictiveRefinementIndicator_swigregister = _pysgpp_swig.PredictiveRefinementIndicator_swigregister
PredictiveRefinementIndicator_swigregister(PredictiveRefinementIndicator)

class PredictiveRefinementDimensionIndicator(RefinementFunctor):
    """1"""
    __swig_setmethods__ = {}
    for _s in [RefinementFunctor]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PredictiveRefinementDimensionIndicator, name, value)
    __swig_getmethods__ = {}
    for _s in [RefinementFunctor]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PredictiveRefinementDimensionIndicator, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, grid, dataSet, errorVector, refinements_num=1, threshold=0.0, minSupportPoints=0) -> PredictiveRefinementDimensionIndicator

        Parameters:
            grid: sg::base::Grid *
            dataSet: sg::base::DataMatrix *
            errorVector: sg::base::DataVector *
            refinements_num: size_t
            threshold: sg::float_t
            minSupportPoints: unsigned long

        __init__(self, grid, dataSet, errorVector, refinements_num=1, threshold=0.0) -> PredictiveRefinementDimensionIndicator

        Parameters:
            grid: sg::base::Grid *
            dataSet: sg::base::DataMatrix *
            errorVector: sg::base::DataVector *
            refinements_num: size_t
            threshold: sg::float_t

        __init__(self, grid, dataSet, errorVector, refinements_num=1) -> PredictiveRefinementDimensionIndicator

        Parameters:
            grid: sg::base::Grid *
            dataSet: sg::base::DataMatrix *
            errorVector: sg::base::DataVector *
            refinements_num: size_t

        __init__(self, grid, dataSet, errorVector) -> PredictiveRefinementDimensionIndicator

        Parameters:
            grid: sg::base::Grid *
            dataSet: sg::base::DataMatrix *
            errorVector: sg::base::DataVector *


        1
        """
        this = _pysgpp_swig.new_PredictiveRefinementDimensionIndicator(*args)
        try: self.this.append(this)
        except: self.this = this
    def runOperator(self, *args):
        """
        runOperator(self, storage, seq) -> sg::float_t

        Parameters:
            storage: sg::base::GridStorage *
            seq: size_t


        1
        """
        return _pysgpp_swig.PredictiveRefinementDimensionIndicator_runOperator(self, *args)

    def __call__(self, *args):
        """
        __call__(self, gridPoint) -> sg::float_t

        Parameters:
            gridPoint: sg::base::AbstractRefinement::index_type *

        __call__(self, storage, seq) -> sg::float_t

        Parameters:
            storage: sg::base::GridStorage *
            seq: size_t


        1
        """
        return _pysgpp_swig.PredictiveRefinementDimensionIndicator___call__(self, *args)

    def getMinSupportPoints(self):
        """
        getMinSupportPoints(self) -> long

        Parameters:
            self: sg::base::PredictiveRefinementDimensionIndicator const *


        1
        """
        return _pysgpp_swig.PredictiveRefinementDimensionIndicator_getMinSupportPoints(self)

    def setMinSupportPoints(self, *args):
        """
        setMinSupportPoints(self, minSupportPoints)

        Parameters:
            minSupportPoints: unsigned long


        1
        """
        return _pysgpp_swig.PredictiveRefinementDimensionIndicator_setMinSupportPoints(self, *args)

    __swig_setmethods__["countersMap"] = _pysgpp_swig.PredictiveRefinementDimensionIndicator_countersMap_set
    __swig_getmethods__["countersMap"] = _pysgpp_swig.PredictiveRefinementDimensionIndicator_countersMap_get
    if _newclass:countersMap = _swig_property(_pysgpp_swig.PredictiveRefinementDimensionIndicator_countersMap_get, _pysgpp_swig.PredictiveRefinementDimensionIndicator_countersMap_set)
    __swig_destroy__ = _pysgpp_swig.delete_PredictiveRefinementDimensionIndicator
    __del__ = lambda self : None;
PredictiveRefinementDimensionIndicator_swigregister = _pysgpp_swig.PredictiveRefinementDimensionIndicator_swigregister
PredictiveRefinementDimensionIndicator_swigregister(PredictiveRefinementDimensionIndicator)

class ANOVARefinement(RefinementDecorator):
    """1"""
    __swig_setmethods__ = {}
    for _s in [RefinementDecorator]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ANOVARefinement, name, value)
    __swig_getmethods__ = {}
    for _s in [RefinementDecorator]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ANOVARefinement, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, refinement) -> ANOVARefinement

        Parameters:
            refinement: sg::base::AbstractRefinement *


        1
        """
        this = _pysgpp_swig.new_ANOVARefinement(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_ANOVARefinement
    __del__ = lambda self : None;
ANOVARefinement_swigregister = _pysgpp_swig.ANOVARefinement_swigregister
ANOVARefinement_swigregister(ANOVARefinement)

class PredictiveRefinement(RefinementDecorator):
    """1"""
    __swig_setmethods__ = {}
    for _s in [RefinementDecorator]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PredictiveRefinement, name, value)
    __swig_getmethods__ = {}
    for _s in [RefinementDecorator]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PredictiveRefinement, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, refinement) -> PredictiveRefinement

        Parameters:
            refinement: sg::base::AbstractRefinement *


        1
        """
        this = _pysgpp_swig.new_PredictiveRefinement(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_PredictiveRefinement
    __del__ = lambda self : None;
PredictiveRefinement_swigregister = _pysgpp_swig.PredictiveRefinement_swigregister
PredictiveRefinement_swigregister(PredictiveRefinement)

class PredictiveANOVARefinement(PredictiveRefinement,ANOVARefinement):
    """1"""
    __swig_setmethods__ = {}
    for _s in [PredictiveRefinement,ANOVARefinement]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PredictiveANOVARefinement, name, value)
    __swig_getmethods__ = {}
    for _s in [PredictiveRefinement,ANOVARefinement]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PredictiveANOVARefinement, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, refinement) -> PredictiveANOVARefinement

        Parameters:
            refinement: sg::base::AbstractRefinement *


        1
        """
        this = _pysgpp_swig.new_PredictiveANOVARefinement(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_PredictiveANOVARefinement
    __del__ = lambda self : None;
PredictiveANOVARefinement_swigregister = _pysgpp_swig.PredictiveANOVARefinement_swigregister
PredictiveANOVARefinement_swigregister(PredictiveANOVARefinement)

class OnlinePredictiveRefinementDimension(RefinementDecorator):
    """1"""
    __swig_setmethods__ = {}
    for _s in [RefinementDecorator]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OnlinePredictiveRefinementDimension, name, value)
    __swig_getmethods__ = {}
    for _s in [RefinementDecorator]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OnlinePredictiveRefinementDimension, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, refinement, dim) -> OnlinePredictiveRefinementDimension

        Parameters:
            refinement: sg::base::AbstractRefinement *
            dim: size_t


        1
        """
        this = _pysgpp_swig.new_OnlinePredictiveRefinementDimension(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OnlinePredictiveRefinementDimension
    __del__ = lambda self : None;
    def collectRefinablePoints(self, *args):
        """
        collectRefinablePoints(self, storage, refinements_num, result)

        Parameters:
            storage: sg::base::GridStorage *
            refinements_num: size_t
            result: sg::base::OnlinePredictiveRefinementDimension::refinement_map *


        1
        """
        return _pysgpp_swig.OnlinePredictiveRefinementDimension_collectRefinablePoints(self, *args)

    def hasLeftChild(self, *args):
        """
        hasLeftChild(self, storage, gridIndex, dim) -> bool

        Parameters:
            storage: sg::base::GridStorage *
            gridIndex: sg::base::GridIndex *
            dim: size_t


        1
        """
        return _pysgpp_swig.OnlinePredictiveRefinementDimension_hasLeftChild(self, *args)

    def hasRightChild(self, *args):
        """
        hasRightChild(self, storage, gridIndex, dim) -> bool

        Parameters:
            storage: sg::base::GridStorage *
            gridIndex: sg::base::GridIndex *
            dim: size_t


        1
        """
        return _pysgpp_swig.OnlinePredictiveRefinementDimension_hasRightChild(self, *args)

    def setTrainDataset(self, *args):
        """
        setTrainDataset(self, trainDataset_)

        Parameters:
            trainDataset_: sg::base::DataMatrix *


        1
        """
        return _pysgpp_swig.OnlinePredictiveRefinementDimension_setTrainDataset(self, *args)

    def setErrors(self, *args):
        """
        setErrors(self, errors_)

        Parameters:
            errors_: sg::base::DataVector *


        1
        """
        return _pysgpp_swig.OnlinePredictiveRefinementDimension_setErrors(self, *args)

    def basisFunctionEvalHelper(self, *args):
        """
        basisFunctionEvalHelper(self, level, index, value) -> sg::float_t

        Parameters:
            level: unsigned int
            index: unsigned int
            value: sg::float_t


        1
        """
        return _pysgpp_swig.OnlinePredictiveRefinementDimension_basisFunctionEvalHelper(self, *args)

OnlinePredictiveRefinementDimension_swigregister = _pysgpp_swig.OnlinePredictiveRefinementDimension_swigregister
OnlinePredictiveRefinementDimension_swigregister(OnlinePredictiveRefinementDimension)

class OnlinePredictiveRefinementDimensionOld(RefinementDecorator):
    """1"""
    __swig_setmethods__ = {}
    for _s in [RefinementDecorator]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OnlinePredictiveRefinementDimensionOld, name, value)
    __swig_getmethods__ = {}
    for _s in [RefinementDecorator]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OnlinePredictiveRefinementDimensionOld, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, refinement) -> OnlinePredictiveRefinementDimensionOld

        Parameters:
            refinement: sg::base::AbstractRefinement *


        1
        """
        this = _pysgpp_swig.new_OnlinePredictiveRefinementDimensionOld(*args)
        try: self.this.append(this)
        except: self.this = this
    def free_refine(self, *args):
        """
        free_refine(self, storage, functor)

        Parameters:
            storage: sg::base::GridStorage *
            functor: sg::base::PredictiveRefinementDimensionIndicator *


        1
        """
        return _pysgpp_swig.OnlinePredictiveRefinementDimensionOld_free_refine(self, *args)

    def collectRefinablePoints(self, *args):
        """
        collectRefinablePoints(self, storage, functor, refinements_num, max_indices, max_values)

        Parameters:
            storage: sg::base::GridStorage *
            functor: sg::base::RefinementFunctor *
            refinements_num: size_t
            max_indices: size_t *
            max_values: sg::base::PredictiveRefinementDimensionIndicator::value_type *


        1
        """
        return _pysgpp_swig.OnlinePredictiveRefinementDimensionOld_collectRefinablePoints(self, *args)

    def setAlpha(self, *args):
        """
        setAlpha(self, alpha)

        Parameters:
            alpha: sg::base::DataVector *


        1
        """
        return _pysgpp_swig.OnlinePredictiveRefinementDimensionOld_setAlpha(self, *args)

    __swig_destroy__ = _pysgpp_swig.delete_OnlinePredictiveRefinementDimensionOld
    __del__ = lambda self : None;
OnlinePredictiveRefinementDimensionOld_swigregister = _pysgpp_swig.OnlinePredictiveRefinementDimensionOld_swigregister
OnlinePredictiveRefinementDimensionOld_swigregister(OnlinePredictiveRefinementDimensionOld)

class StandardGridGenerator(GridGenerator):
    """1"""
    __swig_setmethods__ = {}
    for _s in [GridGenerator]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StandardGridGenerator, name, value)
    __swig_getmethods__ = {}
    for _s in [GridGenerator]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, StandardGridGenerator, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, storage) -> StandardGridGenerator

        Parameters:
            storage: sg::base::GridStorage *


        1
        """
        this = _pysgpp_swig.new_StandardGridGenerator(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_StandardGridGenerator
    __del__ = lambda self : None;
StandardGridGenerator_swigregister = _pysgpp_swig.StandardGridGenerator_swigregister
StandardGridGenerator_swigregister(StandardGridGenerator)

class L0BoundaryGridGenerator(GridGenerator):
    """1"""
    __swig_setmethods__ = {}
    for _s in [GridGenerator]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, L0BoundaryGridGenerator, name, value)
    __swig_getmethods__ = {}
    for _s in [GridGenerator]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, L0BoundaryGridGenerator, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, storage) -> L0BoundaryGridGenerator

        Parameters:
            storage: sg::base::GridStorage *


        1
        """
        this = _pysgpp_swig.new_L0BoundaryGridGenerator(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_L0BoundaryGridGenerator
    __del__ = lambda self : None;
L0BoundaryGridGenerator_swigregister = _pysgpp_swig.L0BoundaryGridGenerator_swigregister
L0BoundaryGridGenerator_swigregister(L0BoundaryGridGenerator)

class PrewaveletGridGenerator(GridGenerator):
    """1"""
    __swig_setmethods__ = {}
    for _s in [GridGenerator]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PrewaveletGridGenerator, name, value)
    __swig_getmethods__ = {}
    for _s in [GridGenerator]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PrewaveletGridGenerator, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, storage, shadowstorage) -> PrewaveletGridGenerator

        Parameters:
            storage: sg::base::GridStorage *
            shadowstorage: sg::base::GridStorage *


        1
        """
        this = _pysgpp_swig.new_PrewaveletGridGenerator(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_PrewaveletGridGenerator
    __del__ = lambda self : None;
PrewaveletGridGenerator_swigregister = _pysgpp_swig.PrewaveletGridGenerator_swigregister
PrewaveletGridGenerator_swigregister(PrewaveletGridGenerator)

class PeriodicGridGenerator(GridGenerator):
    """1"""
    __swig_setmethods__ = {}
    for _s in [GridGenerator]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PeriodicGridGenerator, name, value)
    __swig_getmethods__ = {}
    for _s in [GridGenerator]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PeriodicGridGenerator, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, storage) -> PeriodicGridGenerator

        Parameters:
            storage: sg::base::GridStorage *


        1
        """
        this = _pysgpp_swig.new_PeriodicGridGenerator(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_PeriodicGridGenerator
    __del__ = lambda self : None;
PeriodicGridGenerator_swigregister = _pysgpp_swig.PeriodicGridGenerator_swigregister
PeriodicGridGenerator_swigregister(PeriodicGridGenerator)

class StretchedBoundaryGridGenerator(GridGenerator):
    """1"""
    __swig_setmethods__ = {}
    for _s in [GridGenerator]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StretchedBoundaryGridGenerator, name, value)
    __swig_getmethods__ = {}
    for _s in [GridGenerator]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, StretchedBoundaryGridGenerator, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, storage) -> StretchedBoundaryGridGenerator

        Parameters:
            storage: sg::base::GridStorage *


        1
        """
        this = _pysgpp_swig.new_StretchedBoundaryGridGenerator(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_StretchedBoundaryGridGenerator
    __del__ = lambda self : None;
StretchedBoundaryGridGenerator_swigregister = _pysgpp_swig.StretchedBoundaryGridGenerator_swigregister
StretchedBoundaryGridGenerator_swigregister(StretchedBoundaryGridGenerator)

class BoundaryGridGenerator(GridGenerator):
    """1"""
    __swig_setmethods__ = {}
    for _s in [GridGenerator]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BoundaryGridGenerator, name, value)
    __swig_getmethods__ = {}
    for _s in [GridGenerator]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, BoundaryGridGenerator, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, storage) -> BoundaryGridGenerator

        Parameters:
            storage: sg::base::GridStorage *


        1
        """
        this = _pysgpp_swig.new_BoundaryGridGenerator(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_BoundaryGridGenerator
    __del__ = lambda self : None;
BoundaryGridGenerator_swigregister = _pysgpp_swig.BoundaryGridGenerator_swigregister
BoundaryGridGenerator_swigregister(BoundaryGridGenerator)

class SquareRootGridGenerator(GridGenerator):
    """1"""
    __swig_setmethods__ = {}
    for _s in [GridGenerator]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SquareRootGridGenerator, name, value)
    __swig_getmethods__ = {}
    for _s in [GridGenerator]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SquareRootGridGenerator, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, storage) -> SquareRootGridGenerator

        Parameters:
            storage: sg::base::GridStorage *


        1
        """
        this = _pysgpp_swig.new_SquareRootGridGenerator(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_SquareRootGridGenerator
    __del__ = lambda self : None;
SquareRootGridGenerator_swigregister = _pysgpp_swig.SquareRootGridGenerator_swigregister
SquareRootGridGenerator_swigregister(SquareRootGridGenerator)

class WeightedErrorRefinementFunctor(RefinementFunctor):
    """1"""
    __swig_setmethods__ = {}
    for _s in [RefinementFunctor]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, WeightedErrorRefinementFunctor, name, value)
    __swig_getmethods__ = {}
    for _s in [RefinementFunctor]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, WeightedErrorRefinementFunctor, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, alpha, grid, refinements_num=1, threshold=0.0) -> WeightedErrorRefinementFunctor

        Parameters:
            alpha: sg::base::DataVector *
            grid: sg::base::Grid *
            refinements_num: size_t
            threshold: sg::float_t

        __init__(self, alpha, grid, refinements_num=1) -> WeightedErrorRefinementFunctor

        Parameters:
            alpha: sg::base::DataVector *
            grid: sg::base::Grid *
            refinements_num: size_t

        __init__(self, alpha, grid) -> WeightedErrorRefinementFunctor

        Parameters:
            alpha: sg::base::DataVector *
            grid: sg::base::Grid *


        1
        """
        this = _pysgpp_swig.new_WeightedErrorRefinementFunctor(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_WeightedErrorRefinementFunctor
    __del__ = lambda self : None;
    def setTrainDataset(self, *args):
        """
        setTrainDataset(self, trainDataset)

        Parameters:
            trainDataset: sg::base::DataMatrix *


        1
        """
        return _pysgpp_swig.WeightedErrorRefinementFunctor_setTrainDataset(self, *args)

    def setClasses(self, *args):
        """
        setClasses(self, classes)

        Parameters:
            classes: sg::base::DataVector *


        1
        """
        return _pysgpp_swig.WeightedErrorRefinementFunctor_setClasses(self, *args)

    def setErrors(self, *args):
        """
        setErrors(self, classes)

        Parameters:
            classes: sg::base::DataVector *


        1
        """
        return _pysgpp_swig.WeightedErrorRefinementFunctor_setErrors(self, *args)

WeightedErrorRefinementFunctor_swigregister = _pysgpp_swig.WeightedErrorRefinementFunctor_swigregister
WeightedErrorRefinementFunctor_swigregister(WeightedErrorRefinementFunctor)

class PersistentErrorRefinementFunctor(RefinementFunctor):
    """1"""
    __swig_setmethods__ = {}
    for _s in [RefinementFunctor]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PersistentErrorRefinementFunctor, name, value)
    __swig_getmethods__ = {}
    for _s in [RefinementFunctor]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PersistentErrorRefinementFunctor, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, alpha, grid, refinements_num=1, threshold=0.0) -> PersistentErrorRefinementFunctor

        Parameters:
            alpha: sg::base::DataVector *
            grid: sg::base::Grid *
            refinements_num: size_t
            threshold: sg::float_t

        __init__(self, alpha, grid, refinements_num=1) -> PersistentErrorRefinementFunctor

        Parameters:
            alpha: sg::base::DataVector *
            grid: sg::base::Grid *
            refinements_num: size_t

        __init__(self, alpha, grid) -> PersistentErrorRefinementFunctor

        Parameters:
            alpha: sg::base::DataVector *
            grid: sg::base::Grid *


        1
        """
        this = _pysgpp_swig.new_PersistentErrorRefinementFunctor(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_PersistentErrorRefinementFunctor
    __del__ = lambda self : None;
    def setTrainDataset(self, *args):
        """
        setTrainDataset(self, trainDataset_)

        Parameters:
            trainDataset_: sg::base::DataMatrix *


        1
        """
        return _pysgpp_swig.PersistentErrorRefinementFunctor_setTrainDataset(self, *args)

    def setClasses(self, *args):
        """
        setClasses(self, classes_)

        Parameters:
            classes_: sg::base::DataVector *


        1
        """
        return _pysgpp_swig.PersistentErrorRefinementFunctor_setClasses(self, *args)

    def setErrors(self, *args):
        """
        setErrors(self, errors)

        Parameters:
            errors: sg::base::DataVector *


        1
        """
        return _pysgpp_swig.PersistentErrorRefinementFunctor_setErrors(self, *args)

PersistentErrorRefinementFunctor_swigregister = _pysgpp_swig.PersistentErrorRefinementFunctor_swigregister
PersistentErrorRefinementFunctor_swigregister(PersistentErrorRefinementFunctor)

class ClassificationRefinementFunctor(RefinementFunctor):
    """1"""
    __swig_setmethods__ = {}
    for _s in [RefinementFunctor]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ClassificationRefinementFunctor, name, value)
    __swig_getmethods__ = {}
    for _s in [RefinementFunctor]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ClassificationRefinementFunctor, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, alpha, grid, refinements_num=1, threshold=0.0) -> ClassificationRefinementFunctor

        Parameters:
            alpha: sg::base::DataVector *
            grid: sg::base::Grid *
            refinements_num: size_t
            threshold: sg::float_t

        __init__(self, alpha, grid, refinements_num=1) -> ClassificationRefinementFunctor

        Parameters:
            alpha: sg::base::DataVector *
            grid: sg::base::Grid *
            refinements_num: size_t

        __init__(self, alpha, grid) -> ClassificationRefinementFunctor

        Parameters:
            alpha: sg::base::DataVector *
            grid: sg::base::Grid *


        1
        """
        this = _pysgpp_swig.new_ClassificationRefinementFunctor(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_ClassificationRefinementFunctor
    __del__ = lambda self : None;
    def setTrainDataset(self, *args):
        """
        setTrainDataset(self, trainDataset)

        Parameters:
            trainDataset: sg::base::DataMatrix *


        1
        """
        return _pysgpp_swig.ClassificationRefinementFunctor_setTrainDataset(self, *args)

    def setClasses(self, *args):
        """
        setClasses(self, classes)

        Parameters:
            classes: sg::base::DataVector *


        1
        """
        return _pysgpp_swig.ClassificationRefinementFunctor_setClasses(self, *args)

ClassificationRefinementFunctor_swigregister = _pysgpp_swig.ClassificationRefinementFunctor_swigregister
ClassificationRefinementFunctor_swigregister(ClassificationRefinementFunctor)

class SurplusVolumeRefinementFunctor(RefinementFunctor):
    """1"""
    __swig_setmethods__ = {}
    for _s in [RefinementFunctor]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SurplusVolumeRefinementFunctor, name, value)
    __swig_getmethods__ = {}
    for _s in [RefinementFunctor]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SurplusVolumeRefinementFunctor, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, alpha, refinements_num=1, threshold=0.0) -> SurplusVolumeRefinementFunctor

        Parameters:
            alpha: sg::base::DataVector *
            refinements_num: size_t
            threshold: sg::float_t

        __init__(self, alpha, refinements_num=1) -> SurplusVolumeRefinementFunctor

        Parameters:
            alpha: sg::base::DataVector *
            refinements_num: size_t

        __init__(self, alpha) -> SurplusVolumeRefinementFunctor

        Parameters:
            alpha: sg::base::DataVector *


        1
        """
        this = _pysgpp_swig.new_SurplusVolumeRefinementFunctor(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_SurplusVolumeRefinementFunctor
    __del__ = lambda self : None;
SurplusVolumeRefinementFunctor_swigregister = _pysgpp_swig.SurplusVolumeRefinementFunctor_swigregister
SurplusVolumeRefinementFunctor_swigregister(SurplusVolumeRefinementFunctor)

class ANOVACoarseningFunctor(CoarseningFunctor):
    """1"""
    __swig_setmethods__ = {}
    for _s in [CoarseningFunctor]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ANOVACoarseningFunctor, name, value)
    __swig_getmethods__ = {}
    for _s in [CoarseningFunctor]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ANOVACoarseningFunctor, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, alpha, removements_num, threshold, storage) -> ANOVACoarseningFunctor

        Parameters:
            alpha: sg::base::DataVector *
            removements_num: size_t
            threshold: sg::float_t
            storage: sg::base::GridStorage *


        1
        """
        this = _pysgpp_swig.new_ANOVACoarseningFunctor(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_ANOVACoarseningFunctor
    __del__ = lambda self : None;
ANOVACoarseningFunctor_swigregister = _pysgpp_swig.ANOVACoarseningFunctor_swigregister
ANOVACoarseningFunctor_swigregister(ANOVACoarseningFunctor)

class SurplusCoarseningFunctor(CoarseningFunctor):
    """1"""
    __swig_setmethods__ = {}
    for _s in [CoarseningFunctor]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SurplusCoarseningFunctor, name, value)
    __swig_getmethods__ = {}
    for _s in [CoarseningFunctor]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SurplusCoarseningFunctor, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, alpha, removements_num=1, threshold=0.0) -> SurplusCoarseningFunctor

        Parameters:
            alpha: sg::base::DataVector *
            removements_num: size_t
            threshold: sg::float_t

        __init__(self, alpha, removements_num=1) -> SurplusCoarseningFunctor

        Parameters:
            alpha: sg::base::DataVector *
            removements_num: size_t

        __init__(self, alpha) -> SurplusCoarseningFunctor

        Parameters:
            alpha: sg::base::DataVector *


        1
        """
        this = _pysgpp_swig.new_SurplusCoarseningFunctor(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_SurplusCoarseningFunctor
    __del__ = lambda self : None;
SurplusCoarseningFunctor_swigregister = _pysgpp_swig.SurplusCoarseningFunctor_swigregister
SurplusCoarseningFunctor_swigregister(SurplusCoarseningFunctor)

class GridDataBase(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GridDataBase, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GridDataBase, name)
    __repr__ = _swig_repr
    ascii = _pysgpp_swig.GridDataBase_ascii
    binary = _pysgpp_swig.GridDataBase_binary
    def __init__(self, *args): 
        """
        __init__(self, dim) -> GridDataBase

        Parameters:
            dim: size_t

        __init__(self, grid, values) -> GridDataBase

        Parameters:
            grid: sg::base::Grid *
            values: sg::base::DataVector &

        __init__(self, filename) -> GridDataBase

        Parameters:
            filename: std::string const &


        1
        """
        this = _pysgpp_swig.new_GridDataBase(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_GridDataBase
    __del__ = lambda self : None;
    def clear(self):
        """
        clear(self)

        Parameters:
            self: sg::base::GridDataBase *


        1
        """
        return _pysgpp_swig.GridDataBase_clear(self)

    def toString(self):
        """
        toString(self) -> std::string

        Parameters:
            self: sg::base::GridDataBase *


        1
        """
        return _pysgpp_swig.GridDataBase_toString(self)

    def hasKey(self, *args):
        """
        hasKey(self, gi) -> bool

        Parameters:
            gi: sg::base::GridIndex *


        1
        """
        return _pysgpp_swig.GridDataBase_hasKey(self, *args)

    def set(self, *args):
        """
        set(self, gi, value)

        Parameters:
            gi: sg::base::GridIndex *
            value: sg::float_t


        1
        """
        return _pysgpp_swig.GridDataBase_set(self, *args)

    def setValuesFor(self, *args):
        """
        setValuesFor(self, grid, values)

        Parameters:
            grid: sg::base::Grid *
            values: sg::base::DataVector &


        1
        """
        return _pysgpp_swig.GridDataBase_setValuesFor(self, *args)

    def size(self):
        """
        size(self) -> size_t

        Parameters:
            self: sg::base::GridDataBase const *


        1
        """
        return _pysgpp_swig.GridDataBase_size(self)

    def dim(self):
        """
        dim(self) -> size_t

        Parameters:
            self: sg::base::GridDataBase const *


        1
        """
        return _pysgpp_swig.GridDataBase_dim(self)

    def get(self, *args):
        """
        get(self, gi) -> sg::float_t

        Parameters:
            gi: sg::base::GridIndex *


        1
        """
        return _pysgpp_swig.GridDataBase_get(self, *args)

    def remove(self, *args):
        """
        remove(self, gi)

        Parameters:
            gi: sg::base::GridIndex *


        1
        """
        return _pysgpp_swig.GridDataBase_remove(self, *args)

    def save(self, *args):
        """
        save(self, filename, ftype=ascii)

        Parameters:
            filename: std::string
            ftype: char

        save(self, filename)

        Parameters:
            filename: std::string


        1
        """
        return _pysgpp_swig.GridDataBase_save(self, *args)

    def load(self, *args):
        """
        load(self, filename)

        Parameters:
            filename: std::string const


        1
        """
        return _pysgpp_swig.GridDataBase_load(self, *args)

    def begin(self):
        """
        begin(self) -> sg::base::GridDataBase::grid_map_iterator

        Parameters:
            self: sg::base::GridDataBase *


        1
        """
        return _pysgpp_swig.GridDataBase_begin(self)

    def end(self):
        """
        end(self) -> sg::base::GridDataBase::grid_map_iterator

        Parameters:
            self: sg::base::GridDataBase *


        1
        """
        return _pysgpp_swig.GridDataBase_end(self)

GridDataBase_swigregister = _pysgpp_swig.GridDataBase_swigregister
GridDataBase_swigregister(GridDataBase)

class PeriodicGrid(Grid):
    """1"""
    __swig_setmethods__ = {}
    for _s in [Grid]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PeriodicGrid, name, value)
    __swig_getmethods__ = {}
    for _s in [Grid]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PeriodicGrid, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, dim) -> PeriodicGrid

        Parameters:
            dim: size_t


        1
        """
        this = _pysgpp_swig.new_PeriodicGrid(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_PeriodicGrid
    __del__ = lambda self : None;
    def unserialize(*args):
        """
        unserialize(istr) -> Grid

        Parameters:
            istr: std::istream &


        1
        """
        return _pysgpp_swig.PeriodicGrid_unserialize(*args)

    if _newclass:unserialize = staticmethod(unserialize)
    __swig_getmethods__["unserialize"] = lambda x: unserialize
PeriodicGrid_swigregister = _pysgpp_swig.PeriodicGrid_swigregister
PeriodicGrid_swigregister(PeriodicGrid)

def PeriodicGrid_unserialize(*args):
  """
    PeriodicGrid_unserialize(istr) -> Grid

    Parameters:
        istr: std::istream &


    1
    """
  return _pysgpp_swig.PeriodicGrid_unserialize(*args)

class ScreenOutput(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScreenOutput, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScreenOutput, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """
        __init__(self) -> ScreenOutput

        1
        """
        this = _pysgpp_swig.new_ScreenOutput()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_ScreenOutput
    __del__ = lambda self : None;
    def update(self, *args):
        """
        update(self, progress, status)

        Parameters:
            progress: size_t
            status: std::string


        1
        """
        return _pysgpp_swig.ScreenOutput_update(self, *args)

    def writeTitle(self, *args):
        """
        writeTitle(self, appTitle, appAuthor)

        Parameters:
            appTitle: std::string
            appAuthor: std::string


        1
        """
        return _pysgpp_swig.ScreenOutput_writeTitle(self, *args)

    def writeHelp(self, *args):
        """
        writeHelp(self, helpText)

        Parameters:
            helpText: std::string


        1
        """
        return _pysgpp_swig.ScreenOutput_writeHelp(self, *args)

    def writeStartSolve(self, *args):
        """
        writeStartSolve(self, text)

        Parameters:
            text: std::string


        1
        """
        return _pysgpp_swig.ScreenOutput_writeStartSolve(self, *args)

    def writeEmptyLines(self, *args):
        """
        writeEmptyLines(self, numLines)

        Parameters:
            numLines: size_t


        1
        """
        return _pysgpp_swig.ScreenOutput_writeEmptyLines(self, *args)

ScreenOutput_swigregister = _pysgpp_swig.ScreenOutput_swigregister
ScreenOutput_swigregister(ScreenOutput)

class OperationEvalPeriodic(OperationEval):
    """1"""
    __swig_setmethods__ = {}
    for _s in [OperationEval]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OperationEvalPeriodic, name, value)
    __swig_getmethods__ = {}
    for _s in [OperationEval]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OperationEvalPeriodic, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, storage) -> OperationEvalPeriodic

        Parameters:
            storage: sg::base::GridStorage *


        1
        """
        this = _pysgpp_swig.new_OperationEvalPeriodic(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OperationEvalPeriodic
    __del__ = lambda self : None;
OperationEvalPeriodic_swigregister = _pysgpp_swig.OperationEvalPeriodic_swigregister
OperationEvalPeriodic_swigregister(OperationEvalPeriodic)

class OperationMultipleEvalPeriodic(OperationMultipleEval):
    """1"""
    __swig_setmethods__ = {}
    for _s in [OperationMultipleEval]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OperationMultipleEvalPeriodic, name, value)
    __swig_getmethods__ = {}
    for _s in [OperationMultipleEval]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OperationMultipleEvalPeriodic, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, grid, dataset) -> OperationMultipleEvalPeriodic

        Parameters:
            grid: sg::base::Grid &
            dataset: sg::base::DataMatrix &


        1
        """
        this = _pysgpp_swig.new_OperationMultipleEvalPeriodic(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OperationMultipleEvalPeriodic
    __del__ = lambda self : None;
OperationMultipleEvalPeriodic_swigregister = _pysgpp_swig.OperationMultipleEvalPeriodic_swigregister
OperationMultipleEvalPeriodic_swigregister(OperationMultipleEvalPeriodic)

class QuadRule1D(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, QuadRule1D, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, QuadRule1D, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """
        __init__(self) -> QuadRule1D

        1
        """
        this = _pysgpp_swig.new_QuadRule1D()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_QuadRule1D
    __del__ = lambda self : None;
    def getLevelPointsAndWeights(self, *args):
        """
        getLevelPointsAndWeights(self, level, coordinates, weights)

        Parameters:
            level: size_t
            coordinates: sg::base::DataVector &
            weights: sg::base::DataVector &


        1
        """
        return _pysgpp_swig.QuadRule1D_getLevelPointsAndWeights(self, *args)

QuadRule1D_swigregister = _pysgpp_swig.QuadRule1D_swigregister
QuadRule1D_swigregister(QuadRule1D)

class GaussLegendreQuadRule1D(QuadRule1D):
    """1"""
    __swig_setmethods__ = {}
    for _s in [QuadRule1D]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GaussLegendreQuadRule1D, name, value)
    __swig_getmethods__ = {}
    for _s in [QuadRule1D]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GaussLegendreQuadRule1D, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """
        __init__(self) -> GaussLegendreQuadRule1D

        1
        """
        this = _pysgpp_swig.new_GaussLegendreQuadRule1D()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_GaussLegendreQuadRule1D
    __del__ = lambda self : None;
    def getLevelPointsAndWeightsNormalized(self, *args):
        """
        getLevelPointsAndWeightsNormalized(self, level, coordinates, weights)

        Parameters:
            level: size_t
            coordinates: sg::base::DataVector &
            weights: sg::base::DataVector &


        1
        """
        return _pysgpp_swig.GaussLegendreQuadRule1D_getLevelPointsAndWeightsNormalized(self, *args)

GaussLegendreQuadRule1D_swigregister = _pysgpp_swig.GaussLegendreQuadRule1D_swigregister
GaussLegendreQuadRule1D_swigregister(GaussLegendreQuadRule1D)

class GaussHermiteQuadRule1D(QuadRule1D):
    """1"""
    __swig_setmethods__ = {}
    for _s in [QuadRule1D]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GaussHermiteQuadRule1D, name, value)
    __swig_getmethods__ = {}
    for _s in [QuadRule1D]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GaussHermiteQuadRule1D, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """
        __init__(self) -> GaussHermiteQuadRule1D

        1
        """
        this = _pysgpp_swig.new_GaussHermiteQuadRule1D()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_GaussHermiteQuadRule1D
    __del__ = lambda self : None;
    def getLevelPointsAndWeightsNormalized(self, *args):
        """
        getLevelPointsAndWeightsNormalized(self, level, coordinates, weights, mean=0.0, stdd=1.0)

        Parameters:
            level: size_t
            coordinates: sg::base::DataVector &
            weights: sg::base::DataVector &
            mean: sg::float_t
            stdd: sg::float_t

        getLevelPointsAndWeightsNormalized(self, level, coordinates, weights, mean=0.0)

        Parameters:
            level: size_t
            coordinates: sg::base::DataVector &
            weights: sg::base::DataVector &
            mean: sg::float_t

        getLevelPointsAndWeightsNormalized(self, level, coordinates, weights)

        Parameters:
            level: size_t
            coordinates: sg::base::DataVector &
            weights: sg::base::DataVector &


        1
        """
        return _pysgpp_swig.GaussHermiteQuadRule1D_getLevelPointsAndWeightsNormalized(self, *args)

GaussHermiteQuadRule1D_swigregister = _pysgpp_swig.GaussHermiteQuadRule1D_swigregister
GaussHermiteQuadRule1D_swigregister(GaussHermiteQuadRule1D)


def createOperationHierarchisation(*args):
  """
    createOperationHierarchisation(grid) -> OperationHierarchisation

    Parameters:
        grid: sg::base::Grid &


    1
    """
  return _pysgpp_swig.createOperationHierarchisation(*args)

def createOperationQuadrature(*args):
  """
    createOperationQuadrature(grid) -> OperationQuadrature

    Parameters:
        grid: sg::base::Grid &


    1
    """
  return _pysgpp_swig.createOperationQuadrature(*args)

def createOperationFirstMoment(*args):
  """
    createOperationFirstMoment(grid) -> sg::base::OperationFirstMoment *

    Parameters:
        grid: sg::base::Grid &


    1
    """
  return _pysgpp_swig.createOperationFirstMoment(*args)

def createOperationSecondMoment(*args):
  """
    createOperationSecondMoment(grid) -> sg::base::OperationSecondMoment *

    Parameters:
        grid: sg::base::Grid &


    1
    """
  return _pysgpp_swig.createOperationSecondMoment(*args)

def createOperationConvert(*args):
  """
    createOperationConvert(grid) -> OperationConvert

    Parameters:
        grid: sg::base::Grid &


    1
    """
  return _pysgpp_swig.createOperationConvert(*args)

def createOperationIdentity(*args):
  """
    createOperationIdentity(grid) -> OperationMatrix

    Parameters:
        grid: sg::base::Grid &


    1
    """
  return _pysgpp_swig.createOperationIdentity(*args)

def createOperationEval(*args):
  """
    createOperationEval(grid) -> OperationEval

    Parameters:
        grid: sg::base::Grid &


    1
    """
  return _pysgpp_swig.createOperationEval(*args)

def createOperationNaiveEval(*args):
  """
    createOperationNaiveEval(grid) -> OperationNaiveEval

    Parameters:
        grid: sg::base::Grid &


    1
    """
  return _pysgpp_swig.createOperationNaiveEval(*args)

def createOperationNaiveEvalGradient(*args):
  """
    createOperationNaiveEvalGradient(grid) -> OperationNaiveEvalGradient

    Parameters:
        grid: sg::base::Grid &


    1
    """
  return _pysgpp_swig.createOperationNaiveEvalGradient(*args)

def createOperationNaiveEvalHessian(*args):
  """
    createOperationNaiveEvalHessian(grid) -> OperationNaiveEvalHessian

    Parameters:
        grid: sg::base::Grid &


    1
    """
  return _pysgpp_swig.createOperationNaiveEvalHessian(*args)

def createOperationNaiveEvalPartialDerivative(*args):
  """
    createOperationNaiveEvalPartialDerivative(grid) -> OperationNaiveEvalPartialDerivative

    Parameters:
        grid: sg::base::Grid &


    1
    """
  return _pysgpp_swig.createOperationNaiveEvalPartialDerivative(*args)
class SLinearBase(SBasis):
    """1"""
    __swig_setmethods__ = {}
    for _s in [SBasis]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SLinearBase, name, value)
    __swig_getmethods__ = {}
    for _s in [SBasis]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SLinearBase, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """
        __init__(self) -> SLinearBase

        1
        """
        this = _pysgpp_swig.new_SLinearBase()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_SLinearBase
    __del__ = lambda self : None;
SLinearBase_swigregister = _pysgpp_swig.SLinearBase_swigregister
SLinearBase_swigregister(SLinearBase)

class SLinearBoundaryBase(SBasis):
    """1"""
    __swig_setmethods__ = {}
    for _s in [SBasis]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SLinearBoundaryBase, name, value)
    __swig_getmethods__ = {}
    for _s in [SBasis]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SLinearBoundaryBase, name)
    __repr__ = _swig_repr
    def eval(self, *args):
        """
        eval(self, l, i, x) -> sg::float_t

        Parameters:
            l: unsigned int
            i: unsigned int
            x: sg::float_t

        eval(self, l, i, x, q, t) -> sg::float_t

        Parameters:
            l: unsigned int
            i: unsigned int
            x: sg::float_t
            q: sg::float_t
            t: sg::float_t


        1
        """
        return _pysgpp_swig.SLinearBoundaryBase_eval(self, *args)

    def __init__(self): 
        """
        __init__(self) -> SLinearBoundaryBase

        1
        """
        this = _pysgpp_swig.new_SLinearBoundaryBase()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_SLinearBoundaryBase
    __del__ = lambda self : None;
SLinearBoundaryBase_swigregister = _pysgpp_swig.SLinearBoundaryBase_swigregister
SLinearBoundaryBase_swigregister(SLinearBoundaryBase)

class SLinearClenshawCurtisBase(SBasis):
    """1"""
    __swig_setmethods__ = {}
    for _s in [SBasis]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SLinearClenshawCurtisBase, name, value)
    __swig_getmethods__ = {}
    for _s in [SBasis]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SLinearClenshawCurtisBase, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """
        __init__(self) -> SLinearClenshawCurtisBase

        1
        """
        this = _pysgpp_swig.new_SLinearClenshawCurtisBase()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_SLinearClenshawCurtisBase
    __del__ = lambda self : None;
SLinearClenshawCurtisBase_swigregister = _pysgpp_swig.SLinearClenshawCurtisBase_swigregister
SLinearClenshawCurtisBase_swigregister(SLinearClenshawCurtisBase)

class SLinearStretchedBase(SLinearBase):
    """1"""
    __swig_setmethods__ = {}
    for _s in [SLinearBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SLinearStretchedBase, name, value)
    __swig_getmethods__ = {}
    for _s in [SLinearBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SLinearStretchedBase, name)
    __repr__ = _swig_repr
    def stretchedEval(self, *args):
        """
        stretchedEval(self, p, pos0, pos1) -> sg::float_t

        Parameters:
            p: sg::float_t
            pos0: sg::float_t
            pos1: sg::float_t


        1
        """
        return _pysgpp_swig.SLinearStretchedBase_stretchedEval(self, *args)

    def __init__(self): 
        """
        __init__(self) -> SLinearStretchedBase

        1
        """
        this = _pysgpp_swig.new_SLinearStretchedBase()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_SLinearStretchedBase
    __del__ = lambda self : None;
SLinearStretchedBase_swigregister = _pysgpp_swig.SLinearStretchedBase_swigregister
SLinearStretchedBase_swigregister(SLinearStretchedBase)

class SLinearStretchedBoundaryBase(SLinearBoundaryBase):
    """1"""
    __swig_setmethods__ = {}
    for _s in [SLinearBoundaryBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SLinearStretchedBoundaryBase, name, value)
    __swig_getmethods__ = {}
    for _s in [SLinearBoundaryBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SLinearStretchedBoundaryBase, name)
    __repr__ = _swig_repr
    def stretchedEval(self, *args):
        """
        stretchedEval(self, p, pos0, pos1) -> sg::float_t

        Parameters:
            p: sg::float_t
            pos0: sg::float_t
            pos1: sg::float_t


        1
        """
        return _pysgpp_swig.SLinearStretchedBoundaryBase_stretchedEval(self, *args)

    def eval(self, *args):
        """
        eval(self, level, index, p, pos0, pos1) -> sg::float_t

        Parameters:
            level: unsigned int
            index: unsigned int
            p: sg::float_t
            pos0: sg::float_t
            pos1: sg::float_t


        1
        """
        return _pysgpp_swig.SLinearStretchedBoundaryBase_eval(self, *args)

    def __init__(self): 
        """
        __init__(self) -> SLinearStretchedBoundaryBase

        1
        """
        this = _pysgpp_swig.new_SLinearStretchedBoundaryBase()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_SLinearStretchedBoundaryBase
    __del__ = lambda self : None;
SLinearStretchedBoundaryBase_swigregister = _pysgpp_swig.SLinearStretchedBoundaryBase_swigregister
SLinearStretchedBoundaryBase_swigregister(SLinearStretchedBoundaryBase)

class SLinearModifiedBase(SBasis):
    """1"""
    __swig_setmethods__ = {}
    for _s in [SBasis]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SLinearModifiedBase, name, value)
    __swig_getmethods__ = {}
    for _s in [SBasis]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SLinearModifiedBase, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """
        __init__(self) -> SLinearModifiedBase

        1
        """
        this = _pysgpp_swig.new_SLinearModifiedBase()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_SLinearModifiedBase
    __del__ = lambda self : None;
SLinearModifiedBase_swigregister = _pysgpp_swig.SLinearModifiedBase_swigregister
SLinearModifiedBase_swigregister(SLinearModifiedBase)

class SPolyBase(SBasis):
    """1"""
    __swig_setmethods__ = {}
    for _s in [SBasis]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SPolyBase, name, value)
    __swig_getmethods__ = {}
    for _s in [SBasis]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SPolyBase, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, degree) -> SPolyBase

        Parameters:
            degree: size_t


        1
        """
        this = _pysgpp_swig.new_SPolyBase(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_SPolyBase
    __del__ = lambda self : None;
    def evalHierToTop(self, *args):
        """
        evalHierToTop(self, level, index, coeffs, pos) -> sg::float_t

        Parameters:
            level: unsigned int
            index: unsigned int
            coeffs: sg::base::DataVector &
            pos: sg::float_t


        1
        """
        return _pysgpp_swig.SPolyBase_evalHierToTop(self, *args)

    def getDegree(self):
        """
        getDegree(self) -> size_t

        Parameters:
            self: sg::base::PolyBasis< unsigned int,unsigned int > *


        1
        """
        return _pysgpp_swig.SPolyBase_getDegree(self)

    def evalSave(self, *args):
        """
        evalSave(self, level, index, p) -> sg::float_t

        Parameters:
            level: unsigned int
            index: unsigned int
            p: sg::float_t


        1
        """
        return _pysgpp_swig.SPolyBase_evalSave(self, *args)

    def getIntegral(self, *args):
        """
        getIntegral(self, level, index) -> sg::float_t

        Parameters:
            level: unsigned int
            index: unsigned int


        1
        """
        return _pysgpp_swig.SPolyBase_getIntegral(self, *args)

SPolyBase_swigregister = _pysgpp_swig.SPolyBase_swigregister
SPolyBase_swigregister(SPolyBase)

class SPolyBoundaryBase(SBasis):
    """1"""
    __swig_setmethods__ = {}
    for _s in [SBasis]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SPolyBoundaryBase, name, value)
    __swig_getmethods__ = {}
    for _s in [SBasis]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SPolyBoundaryBase, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, degree) -> SPolyBoundaryBase

        Parameters:
            degree: size_t


        1
        """
        this = _pysgpp_swig.new_SPolyBoundaryBase(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_SPolyBoundaryBase
    __del__ = lambda self : None;
    def evalHierToTop(self, *args):
        """
        evalHierToTop(self, level, index, coeffs, pos) -> sg::float_t

        Parameters:
            level: unsigned int
            index: unsigned int
            coeffs: sg::base::DataVector &
            pos: sg::float_t


        1
        """
        return _pysgpp_swig.SPolyBoundaryBase_evalHierToTop(self, *args)

    def getDegree(self):
        """
        getDegree(self) -> size_t

        Parameters:
            self: sg::base::PolyBoundaryBasis< unsigned int,unsigned int > *


        1
        """
        return _pysgpp_swig.SPolyBoundaryBase_getDegree(self)

    def evalSave(self, *args):
        """
        evalSave(self, level, index, p) -> sg::float_t

        Parameters:
            level: unsigned int
            index: unsigned int
            p: sg::float_t


        1
        """
        return _pysgpp_swig.SPolyBoundaryBase_evalSave(self, *args)

    def eval(self, *args):
        """
        eval(self, level, index, p) -> sg::float_t

        Parameters:
            level: unsigned int
            index: unsigned int
            p: sg::float_t

        eval(self, level, index, p, offset, width) -> sg::float_t

        Parameters:
            level: unsigned int
            index: unsigned int
            p: sg::float_t
            offset: sg::float_t
            width: sg::float_t


        1
        """
        return _pysgpp_swig.SPolyBoundaryBase_eval(self, *args)

    def getIntegral(self, *args):
        """
        getIntegral(self, level, index) -> sg::float_t

        Parameters:
            level: unsigned int
            index: unsigned int


        1
        """
        return _pysgpp_swig.SPolyBoundaryBase_getIntegral(self, *args)

SPolyBoundaryBase_swigregister = _pysgpp_swig.SPolyBoundaryBase_swigregister
SPolyBoundaryBase_swigregister(SPolyBoundaryBase)

class SWaveletBase(SBasis):
    """1"""
    __swig_setmethods__ = {}
    for _s in [SBasis]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SWaveletBase, name, value)
    __swig_getmethods__ = {}
    for _s in [SBasis]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SWaveletBase, name)
    __repr__ = _swig_repr
    def evalDx(self, *args):
        """
        evalDx(self, l, i, x) -> sg::float_t

        Parameters:
            l: unsigned int
            i: unsigned int
            x: sg::float_t


        1
        """
        return _pysgpp_swig.SWaveletBase_evalDx(self, *args)

    def evalDxDx(self, *args):
        """
        evalDxDx(self, l, i, x) -> sg::float_t

        Parameters:
            l: unsigned int
            i: unsigned int
            x: sg::float_t


        1
        """
        return _pysgpp_swig.SWaveletBase_evalDxDx(self, *args)

    def __init__(self): 
        """
        __init__(self) -> SWaveletBase

        1
        """
        this = _pysgpp_swig.new_SWaveletBase()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_SWaveletBase
    __del__ = lambda self : None;
SWaveletBase_swigregister = _pysgpp_swig.SWaveletBase_swigregister
SWaveletBase_swigregister(SWaveletBase)

class SWaveletBoundaryBase(SBasis):
    """1"""
    __swig_setmethods__ = {}
    for _s in [SBasis]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SWaveletBoundaryBase, name, value)
    __swig_getmethods__ = {}
    for _s in [SBasis]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SWaveletBoundaryBase, name)
    __repr__ = _swig_repr
    def evalDx(self, *args):
        """
        evalDx(self, l, i, x) -> sg::float_t

        Parameters:
            l: unsigned int
            i: unsigned int
            x: sg::float_t


        1
        """
        return _pysgpp_swig.SWaveletBoundaryBase_evalDx(self, *args)

    def evalDxDx(self, *args):
        """
        evalDxDx(self, l, i, x) -> sg::float_t

        Parameters:
            l: unsigned int
            i: unsigned int
            x: sg::float_t


        1
        """
        return _pysgpp_swig.SWaveletBoundaryBase_evalDxDx(self, *args)

    def __init__(self): 
        """
        __init__(self) -> SWaveletBoundaryBase

        1
        """
        this = _pysgpp_swig.new_SWaveletBoundaryBase()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_SWaveletBoundaryBase
    __del__ = lambda self : None;
SWaveletBoundaryBase_swigregister = _pysgpp_swig.SWaveletBoundaryBase_swigregister
SWaveletBoundaryBase_swigregister(SWaveletBoundaryBase)

class SWaveletModifiedBase(SBasis):
    """1"""
    __swig_setmethods__ = {}
    for _s in [SBasis]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SWaveletModifiedBase, name, value)
    __swig_getmethods__ = {}
    for _s in [SBasis]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SWaveletModifiedBase, name)
    __repr__ = _swig_repr
    def evalDx(self, *args):
        """
        evalDx(self, l, i, x) -> sg::float_t

        Parameters:
            l: unsigned int
            i: unsigned int
            x: sg::float_t


        1
        """
        return _pysgpp_swig.SWaveletModifiedBase_evalDx(self, *args)

    def evalDxDx(self, *args):
        """
        evalDxDx(self, l, i, x) -> sg::float_t

        Parameters:
            l: unsigned int
            i: unsigned int
            x: sg::float_t


        1
        """
        return _pysgpp_swig.SWaveletModifiedBase_evalDxDx(self, *args)

    def __init__(self): 
        """
        __init__(self) -> SWaveletModifiedBase

        1
        """
        this = _pysgpp_swig.new_SWaveletModifiedBase()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_SWaveletModifiedBase
    __del__ = lambda self : None;
SWaveletModifiedBase_swigregister = _pysgpp_swig.SWaveletModifiedBase_swigregister
SWaveletModifiedBase_swigregister(SWaveletModifiedBase)

class SBsplineBase(SBasis):
    """1"""
    __swig_setmethods__ = {}
    for _s in [SBasis]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SBsplineBase, name, value)
    __swig_getmethods__ = {}
    for _s in [SBasis]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SBsplineBase, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> SBsplineBase
        __init__(self, degree) -> SBsplineBase

        Parameters:
            degree: size_t


        1
        """
        this = _pysgpp_swig.new_SBsplineBase(*args)
        try: self.this.append(this)
        except: self.this = this
    def uniformBSpline(self, *args):
        """
        uniformBSpline(self, x, p) -> sg::float_t

        Parameters:
            x: sg::float_t
            p: size_t


        1
        """
        return _pysgpp_swig.SBsplineBase_uniformBSpline(self, *args)

    def uniformBSplineDx(self, *args):
        """
        uniformBSplineDx(self, x, p) -> sg::float_t

        Parameters:
            x: sg::float_t
            p: size_t


        1
        """
        return _pysgpp_swig.SBsplineBase_uniformBSplineDx(self, *args)

    def uniformBSplineDxDx(self, *args):
        """
        uniformBSplineDxDx(self, x, p) -> sg::float_t

        Parameters:
            x: sg::float_t
            p: size_t


        1
        """
        return _pysgpp_swig.SBsplineBase_uniformBSplineDxDx(self, *args)

    def evalDx(self, *args):
        """
        evalDx(self, l, i, x) -> sg::float_t

        Parameters:
            l: unsigned int
            i: unsigned int
            x: sg::float_t


        1
        """
        return _pysgpp_swig.SBsplineBase_evalDx(self, *args)

    def evalDxDx(self, *args):
        """
        evalDxDx(self, l, i, x) -> sg::float_t

        Parameters:
            l: unsigned int
            i: unsigned int
            x: sg::float_t


        1
        """
        return _pysgpp_swig.SBsplineBase_evalDxDx(self, *args)

    def getDegree(self):
        """
        getDegree(self) -> size_t

        Parameters:
            self: sg::base::BsplineBasis< unsigned int,unsigned int > const *


        1
        """
        return _pysgpp_swig.SBsplineBase_getDegree(self)

    __swig_destroy__ = _pysgpp_swig.delete_SBsplineBase
    __del__ = lambda self : None;
SBsplineBase_swigregister = _pysgpp_swig.SBsplineBase_swigregister
SBsplineBase_swigregister(SBsplineBase)

class SBsplineBoundaryBase(SBasis):
    """1"""
    __swig_setmethods__ = {}
    for _s in [SBasis]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SBsplineBoundaryBase, name, value)
    __swig_getmethods__ = {}
    for _s in [SBasis]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SBsplineBoundaryBase, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> SBsplineBoundaryBase
        __init__(self, degree) -> SBsplineBoundaryBase

        Parameters:
            degree: size_t


        1
        """
        this = _pysgpp_swig.new_SBsplineBoundaryBase(*args)
        try: self.this.append(this)
        except: self.this = this
    def evalDx(self, *args):
        """
        evalDx(self, l, i, x) -> sg::float_t

        Parameters:
            l: unsigned int
            i: unsigned int
            x: sg::float_t


        1
        """
        return _pysgpp_swig.SBsplineBoundaryBase_evalDx(self, *args)

    def evalDxDx(self, *args):
        """
        evalDxDx(self, l, i, x) -> sg::float_t

        Parameters:
            l: unsigned int
            i: unsigned int
            x: sg::float_t


        1
        """
        return _pysgpp_swig.SBsplineBoundaryBase_evalDxDx(self, *args)

    def getDegree(self):
        """
        getDegree(self) -> size_t

        Parameters:
            self: sg::base::BsplineBoundaryBasis< unsigned int,unsigned int > const *


        1
        """
        return _pysgpp_swig.SBsplineBoundaryBase_getDegree(self)

    __swig_destroy__ = _pysgpp_swig.delete_SBsplineBoundaryBase
    __del__ = lambda self : None;
SBsplineBoundaryBase_swigregister = _pysgpp_swig.SBsplineBoundaryBase_swigregister
SBsplineBoundaryBase_swigregister(SBsplineBoundaryBase)

class SBsplineClenshawCurtisBase(SBasis):
    """1"""
    __swig_setmethods__ = {}
    for _s in [SBasis]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SBsplineClenshawCurtisBase, name, value)
    __swig_getmethods__ = {}
    for _s in [SBasis]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SBsplineClenshawCurtisBase, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> SBsplineClenshawCurtisBase
        __init__(self, degree) -> SBsplineClenshawCurtisBase

        Parameters:
            degree: size_t


        1
        """
        this = _pysgpp_swig.new_SBsplineClenshawCurtisBase(*args)
        try: self.this.append(this)
        except: self.this = this
    def nonUniformBSpline(self, *args):
        """
        nonUniformBSpline(self, x, p, k) -> sg::float_t

        Parameters:
            x: sg::float_t
            p: size_t
            k: size_t


        1
        """
        return _pysgpp_swig.SBsplineClenshawCurtisBase_nonUniformBSpline(self, *args)

    def nonUniformBSplineDx(self, *args):
        """
        nonUniformBSplineDx(self, x, p, k) -> sg::float_t

        Parameters:
            x: sg::float_t
            p: size_t
            k: size_t


        1
        """
        return _pysgpp_swig.SBsplineClenshawCurtisBase_nonUniformBSplineDx(self, *args)

    def nonUniformBSplineDxDx(self, *args):
        """
        nonUniformBSplineDxDx(self, x, p, k) -> sg::float_t

        Parameters:
            x: sg::float_t
            p: size_t
            k: size_t


        1
        """
        return _pysgpp_swig.SBsplineClenshawCurtisBase_nonUniformBSplineDxDx(self, *args)

    def clenshawCurtisPoint(self, *args):
        """
        clenshawCurtisPoint(self, l, i) -> sg::float_t

        Parameters:
            l: unsigned int
            i: unsigned int


        1
        """
        return _pysgpp_swig.SBsplineClenshawCurtisBase_clenshawCurtisPoint(self, *args)

    def constructKnots(self, *args):
        """
        constructKnots(self, l, i)

        Parameters:
            l: unsigned int
            i: unsigned int


        1
        """
        return _pysgpp_swig.SBsplineClenshawCurtisBase_constructKnots(self, *args)

    def evalDx(self, *args):
        """
        evalDx(self, l, i, x) -> sg::float_t

        Parameters:
            l: unsigned int
            i: unsigned int
            x: sg::float_t


        1
        """
        return _pysgpp_swig.SBsplineClenshawCurtisBase_evalDx(self, *args)

    def evalDxDx(self, *args):
        """
        evalDxDx(self, l, i, x) -> sg::float_t

        Parameters:
            l: unsigned int
            i: unsigned int
            x: sg::float_t


        1
        """
        return _pysgpp_swig.SBsplineClenshawCurtisBase_evalDxDx(self, *args)

    def getDegree(self):
        """
        getDegree(self) -> size_t

        Parameters:
            self: sg::base::BsplineClenshawCurtisBasis< unsigned int,unsigned int > const *


        1
        """
        return _pysgpp_swig.SBsplineClenshawCurtisBase_getDegree(self)

    __swig_destroy__ = _pysgpp_swig.delete_SBsplineClenshawCurtisBase
    __del__ = lambda self : None;
SBsplineClenshawCurtisBase_swigregister = _pysgpp_swig.SBsplineClenshawCurtisBase_swigregister
SBsplineClenshawCurtisBase_swigregister(SBsplineClenshawCurtisBase)

class SBsplineModifiedBase(SBasis):
    """1"""
    __swig_setmethods__ = {}
    for _s in [SBasis]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SBsplineModifiedBase, name, value)
    __swig_getmethods__ = {}
    for _s in [SBasis]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SBsplineModifiedBase, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> SBsplineModifiedBase
        __init__(self, degree) -> SBsplineModifiedBase

        Parameters:
            degree: size_t


        1
        """
        this = _pysgpp_swig.new_SBsplineModifiedBase(*args)
        try: self.this.append(this)
        except: self.this = this
    def modifiedBSpline(self, *args):
        """
        modifiedBSpline(self, x, p) -> sg::float_t

        Parameters:
            x: sg::float_t
            p: size_t


        1
        """
        return _pysgpp_swig.SBsplineModifiedBase_modifiedBSpline(self, *args)

    def modifiedBSplineDx(self, *args):
        """
        modifiedBSplineDx(self, x, p) -> sg::float_t

        Parameters:
            x: sg::float_t
            p: size_t


        1
        """
        return _pysgpp_swig.SBsplineModifiedBase_modifiedBSplineDx(self, *args)

    def modifiedBSplineDxDx(self, *args):
        """
        modifiedBSplineDxDx(self, x, p) -> sg::float_t

        Parameters:
            x: sg::float_t
            p: size_t


        1
        """
        return _pysgpp_swig.SBsplineModifiedBase_modifiedBSplineDxDx(self, *args)

    def evalDx(self, *args):
        """
        evalDx(self, l, i, x) -> sg::float_t

        Parameters:
            l: unsigned int
            i: unsigned int
            x: sg::float_t


        1
        """
        return _pysgpp_swig.SBsplineModifiedBase_evalDx(self, *args)

    def evalDxDx(self, *args):
        """
        evalDxDx(self, l, i, x) -> sg::float_t

        Parameters:
            l: unsigned int
            i: unsigned int
            x: sg::float_t


        1
        """
        return _pysgpp_swig.SBsplineModifiedBase_evalDxDx(self, *args)

    def getDegree(self):
        """
        getDegree(self) -> size_t

        Parameters:
            self: sg::base::BsplineModifiedBasis< unsigned int,unsigned int > const *


        1
        """
        return _pysgpp_swig.SBsplineModifiedBase_getDegree(self)

    __swig_destroy__ = _pysgpp_swig.delete_SBsplineModifiedBase
    __del__ = lambda self : None;
SBsplineModifiedBase_swigregister = _pysgpp_swig.SBsplineModifiedBase_swigregister
SBsplineModifiedBase_swigregister(SBsplineModifiedBase)

class SBsplineModifiedClenshawCurtisBase(SBasis):
    """1"""
    __swig_setmethods__ = {}
    for _s in [SBasis]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SBsplineModifiedClenshawCurtisBase, name, value)
    __swig_getmethods__ = {}
    for _s in [SBasis]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SBsplineModifiedClenshawCurtisBase, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> SBsplineModifiedClenshawCurtisBase
        __init__(self, degree) -> SBsplineModifiedClenshawCurtisBase

        Parameters:
            degree: size_t


        1
        """
        this = _pysgpp_swig.new_SBsplineModifiedClenshawCurtisBase(*args)
        try: self.this.append(this)
        except: self.this = this
    def clenshawCurtisPoint(self, *args):
        """
        clenshawCurtisPoint(self, l, i) -> sg::float_t

        Parameters:
            l: unsigned int
            i: unsigned int


        1
        """
        return _pysgpp_swig.SBsplineModifiedClenshawCurtisBase_clenshawCurtisPoint(self, *args)

    def clenshawCurtisPointNegativeIndex(self, *args):
        """
        clenshawCurtisPointNegativeIndex(self, l, ni) -> sg::float_t

        Parameters:
            l: unsigned int
            ni: unsigned int


        1
        """
        return _pysgpp_swig.SBsplineModifiedClenshawCurtisBase_clenshawCurtisPointNegativeIndex(self, *args)

    def evalDx(self, *args):
        """
        evalDx(self, l, i, x) -> sg::float_t

        Parameters:
            l: unsigned int
            i: unsigned int
            x: sg::float_t


        1
        """
        return _pysgpp_swig.SBsplineModifiedClenshawCurtisBase_evalDx(self, *args)

    def evalDxDx(self, *args):
        """
        evalDxDx(self, l, i, x) -> sg::float_t

        Parameters:
            l: unsigned int
            i: unsigned int
            x: sg::float_t


        1
        """
        return _pysgpp_swig.SBsplineModifiedClenshawCurtisBase_evalDxDx(self, *args)

    def getDegree(self):
        """
        getDegree(self) -> size_t

        Parameters:
            self: sg::base::BsplineModifiedClenshawCurtisBasis< unsigned int,unsigned int > const *


        1
        """
        return _pysgpp_swig.SBsplineModifiedClenshawCurtisBase_getDegree(self)

    __swig_destroy__ = _pysgpp_swig.delete_SBsplineModifiedClenshawCurtisBase
    __del__ = lambda self : None;
SBsplineModifiedClenshawCurtisBase_swigregister = _pysgpp_swig.SBsplineModifiedClenshawCurtisBase_swigregister
SBsplineModifiedClenshawCurtisBase_swigregister(SBsplineModifiedClenshawCurtisBase)

class SFundamentalSplineBase(SBasis):
    """1"""
    __swig_setmethods__ = {}
    for _s in [SBasis]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SFundamentalSplineBase, name, value)
    __swig_getmethods__ = {}
    for _s in [SBasis]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SFundamentalSplineBase, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> SFundamentalSplineBase
        __init__(self, degree) -> SFundamentalSplineBase

        Parameters:
            degree: size_t


        1
        """
        this = _pysgpp_swig.new_SFundamentalSplineBase(*args)
        try: self.this.append(this)
        except: self.this = this
    def evalDx(self, *args):
        """
        evalDx(self, l, i, x) -> sg::float_t

        Parameters:
            l: unsigned int
            i: unsigned int
            x: sg::float_t


        1
        """
        return _pysgpp_swig.SFundamentalSplineBase_evalDx(self, *args)

    def evalDxDx(self, *args):
        """
        evalDxDx(self, l, i, x) -> sg::float_t

        Parameters:
            l: unsigned int
            i: unsigned int
            x: sg::float_t


        1
        """
        return _pysgpp_swig.SFundamentalSplineBase_evalDxDx(self, *args)

    def getDegree(self):
        """
        getDegree(self) -> size_t

        Parameters:
            self: sg::base::FundamentalSplineBasis< unsigned int,unsigned int > const *


        1
        """
        return _pysgpp_swig.SFundamentalSplineBase_getDegree(self)

    __swig_destroy__ = _pysgpp_swig.delete_SFundamentalSplineBase
    __del__ = lambda self : None;
SFundamentalSplineBase_swigregister = _pysgpp_swig.SFundamentalSplineBase_swigregister
SFundamentalSplineBase_swigregister(SFundamentalSplineBase)

class SFundamentalSplineModifiedBase(SBasis):
    """1"""
    __swig_setmethods__ = {}
    for _s in [SBasis]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SFundamentalSplineModifiedBase, name, value)
    __swig_getmethods__ = {}
    for _s in [SBasis]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SFundamentalSplineModifiedBase, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> SFundamentalSplineModifiedBase
        __init__(self, degree) -> SFundamentalSplineModifiedBase

        Parameters:
            degree: size_t


        1
        """
        this = _pysgpp_swig.new_SFundamentalSplineModifiedBase(*args)
        try: self.this.append(this)
        except: self.this = this
    def evalDx(self, *args):
        """
        evalDx(self, l, i, x) -> sg::float_t

        Parameters:
            l: unsigned int
            i: unsigned int
            x: sg::float_t


        1
        """
        return _pysgpp_swig.SFundamentalSplineModifiedBase_evalDx(self, *args)

    def evalDxDx(self, *args):
        """
        evalDxDx(self, l, i, x) -> sg::float_t

        Parameters:
            l: unsigned int
            i: unsigned int
            x: sg::float_t


        1
        """
        return _pysgpp_swig.SFundamentalSplineModifiedBase_evalDxDx(self, *args)

    def getDegree(self):
        """
        getDegree(self) -> size_t

        Parameters:
            self: sg::base::FundamentalSplineModifiedBasis< unsigned int,unsigned int > const *


        1
        """
        return _pysgpp_swig.SFundamentalSplineModifiedBase_getDegree(self)

    __swig_destroy__ = _pysgpp_swig.delete_SFundamentalSplineModifiedBase
    __del__ = lambda self : None;
SFundamentalSplineModifiedBase_swigregister = _pysgpp_swig.SFundamentalSplineModifiedBase_swigregister
SFundamentalSplineModifiedBase_swigregister(SFundamentalSplineModifiedBase)

class SPrewaveletBase(SBasis):
    """1"""
    __swig_setmethods__ = {}
    for _s in [SBasis]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SPrewaveletBase, name, value)
    __swig_getmethods__ = {}
    for _s in [SBasis]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SPrewaveletBase, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """
        __init__(self) -> SPrewaveletBase

        1
        """
        this = _pysgpp_swig.new_SPrewaveletBase()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_SPrewaveletBase
    __del__ = lambda self : None;
SPrewaveletBase_swigregister = _pysgpp_swig.SPrewaveletBase_swigregister
SPrewaveletBase_swigregister(SPrewaveletBase)

class SGetAffectedBasisFunctions(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SGetAffectedBasisFunctions, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SGetAffectedBasisFunctions, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, storage) -> SGetAffectedBasisFunctions

        Parameters:
            storage: sg::base::GridStorage *


        1
        """
        this = _pysgpp_swig.new_SGetAffectedBasisFunctions(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_SGetAffectedBasisFunctions
    __del__ = lambda self : None;
    def __call__(self, *args):
        """
        __call__(self, basis, point)

        Parameters:
            basis: sg::base::LinearBasis< unsigned int,unsigned int > &
            point: sg::base::DataVector const &


        1
        """
        return _pysgpp_swig.SGetAffectedBasisFunctions___call__(self, *args)

SGetAffectedBasisFunctions_swigregister = _pysgpp_swig.SGetAffectedBasisFunctions_swigregister
SGetAffectedBasisFunctions_swigregister(SGetAffectedBasisFunctions)

class SAlgorithmEvaluation(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SAlgorithmEvaluation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SAlgorithmEvaluation, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, storage) -> SAlgorithmEvaluation

        Parameters:
            storage: sg::base::GridStorage *


        1
        """
        this = _pysgpp_swig.new_SAlgorithmEvaluation(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_SAlgorithmEvaluation
    __del__ = lambda self : None;
    def __call__(self, *args):
        """
        __call__(self, basis, point, alpha) -> sg::float_t

        Parameters:
            basis: sg::base::LinearBasis< unsigned int,unsigned int > &
            point: sg::base::DataVector const &
            alpha: sg::base::DataVector const &


        1
        """
        return _pysgpp_swig.SAlgorithmEvaluation___call__(self, *args)

SAlgorithmEvaluation_swigregister = _pysgpp_swig.SAlgorithmEvaluation_swigregister
SAlgorithmEvaluation_swigregister(SAlgorithmEvaluation)

class SGetAffectedBasisFunctionsBoundaries(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SGetAffectedBasisFunctionsBoundaries, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SGetAffectedBasisFunctionsBoundaries, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, storage) -> SGetAffectedBasisFunctionsBoundaries

        Parameters:
            storage: sg::base::GridStorage *


        1
        """
        this = _pysgpp_swig.new_SGetAffectedBasisFunctionsBoundaries(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_SGetAffectedBasisFunctionsBoundaries
    __del__ = lambda self : None;
    def __call__(self, *args):
        """
        __call__(self, basis, point)

        Parameters:
            basis: sg::base::LinearBoundaryBasis< unsigned int,unsigned int > &
            point: sg::base::DataVector const &


        1
        """
        return _pysgpp_swig.SGetAffectedBasisFunctionsBoundaries___call__(self, *args)

SGetAffectedBasisFunctionsBoundaries_swigregister = _pysgpp_swig.SGetAffectedBasisFunctionsBoundaries_swigregister
SGetAffectedBasisFunctionsBoundaries_swigregister(SGetAffectedBasisFunctionsBoundaries)

class SGetAffectedBasisFunctionsLinearStretchedBoundaries(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SGetAffectedBasisFunctionsLinearStretchedBoundaries, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SGetAffectedBasisFunctionsLinearStretchedBoundaries, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, storage) -> SGetAffectedBasisFunctionsLinearStretchedBoundaries

        Parameters:
            storage: sg::base::GridStorage *


        1
        """
        this = _pysgpp_swig.new_SGetAffectedBasisFunctionsLinearStretchedBoundaries(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_SGetAffectedBasisFunctionsLinearStretchedBoundaries
    __del__ = lambda self : None;
    def __call__(self, *args):
        """
        __call__(self, basis, point)

        Parameters:
            basis: sg::base::LinearStretchedBoundaryBasis< unsigned int,unsigned int > &
            point: sg::base::DataVector const &


        1
        """
        return _pysgpp_swig.SGetAffectedBasisFunctionsLinearStretchedBoundaries___call__(self, *args)

SGetAffectedBasisFunctionsLinearStretchedBoundaries_swigregister = _pysgpp_swig.SGetAffectedBasisFunctionsLinearStretchedBoundaries_swigregister
SGetAffectedBasisFunctionsLinearStretchedBoundaries_swigregister(SGetAffectedBasisFunctionsLinearStretchedBoundaries)

class DimensionBoundaryVector(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DimensionBoundaryVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DimensionBoundaryVector, name)
    __repr__ = _swig_repr
    def iterator(self):
        """
        iterator(self) -> SwigPyIterator

        Parameters:
            self: std::vector< sg::base::DimensionBoundary > *


        1
        """
        return _pysgpp_swig.DimensionBoundaryVector_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """
        __nonzero__(self) -> bool

        Parameters:
            self: std::vector< sg::base::DimensionBoundary > const *


        1
        """
        return _pysgpp_swig.DimensionBoundaryVector___nonzero__(self)

    def __bool__(self):
        """
        __bool__(self) -> bool

        Parameters:
            self: std::vector< sg::base::DimensionBoundary > const *


        1
        """
        return _pysgpp_swig.DimensionBoundaryVector___bool__(self)

    def __len__(self):
        """
        __len__(self) -> std::vector< sg::base::DimensionBoundary >::size_type

        Parameters:
            self: std::vector< sg::base::DimensionBoundary > const *


        1
        """
        return _pysgpp_swig.DimensionBoundaryVector___len__(self)

    def pop(self):
        """
        pop(self) -> DimensionBoundary

        Parameters:
            self: std::vector< sg::base::DimensionBoundary > *


        1
        """
        return _pysgpp_swig.DimensionBoundaryVector_pop(self)

    def __getslice__(self, *args):
        """
        __getslice__(self, i, j) -> DimensionBoundaryVector

        Parameters:
            i: std::vector< sg::base::DimensionBoundary >::difference_type
            j: std::vector< sg::base::DimensionBoundary >::difference_type


        1
        """
        return _pysgpp_swig.DimensionBoundaryVector___getslice__(self, *args)

    def __setslice__(self, *args):
        """
        __setslice__(self, i, j, v=std::vector< sg::base::DimensionBoundary,std::allocator< sg::base::DimensionBoundary > >())

        Parameters:
            i: std::vector< sg::base::DimensionBoundary >::difference_type
            j: std::vector< sg::base::DimensionBoundary >::difference_type
            v: std::vector< sg::base::DimensionBoundary,std::allocator< sg::base::DimensionBoundary > > const &

        __setslice__(self, i, j)

        Parameters:
            i: std::vector< sg::base::DimensionBoundary >::difference_type
            j: std::vector< sg::base::DimensionBoundary >::difference_type


        1
        """
        return _pysgpp_swig.DimensionBoundaryVector___setslice__(self, *args)

    def __delslice__(self, *args):
        """
        __delslice__(self, i, j)

        Parameters:
            i: std::vector< sg::base::DimensionBoundary >::difference_type
            j: std::vector< sg::base::DimensionBoundary >::difference_type


        1
        """
        return _pysgpp_swig.DimensionBoundaryVector___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(self, i)

        Parameters:
            i: std::vector< sg::base::DimensionBoundary >::difference_type

        __delitem__(self, slice)

        Parameters:
            slice: PySliceObject *


        1
        """
        return _pysgpp_swig.DimensionBoundaryVector___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(self, slice) -> DimensionBoundaryVector

        Parameters:
            slice: PySliceObject *

        __getitem__(self, i) -> DimensionBoundary

        Parameters:
            i: std::vector< sg::base::DimensionBoundary >::difference_type


        1
        """
        return _pysgpp_swig.DimensionBoundaryVector___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(self, slice, v)

        Parameters:
            slice: PySliceObject *
            v: std::vector< sg::base::DimensionBoundary,std::allocator< sg::base::DimensionBoundary > > const &

        __setitem__(self, slice)

        Parameters:
            slice: PySliceObject *

        __setitem__(self, i, x)

        Parameters:
            i: std::vector< sg::base::DimensionBoundary >::difference_type
            x: std::vector< sg::base::DimensionBoundary >::value_type const &


        1
        """
        return _pysgpp_swig.DimensionBoundaryVector___setitem__(self, *args)

    def append(self, *args):
        """
        append(self, x)

        Parameters:
            x: std::vector< sg::base::DimensionBoundary >::value_type const &


        1
        """
        return _pysgpp_swig.DimensionBoundaryVector_append(self, *args)

    def empty(self):
        """
        empty(self) -> bool

        Parameters:
            self: std::vector< sg::base::DimensionBoundary > const *


        1
        """
        return _pysgpp_swig.DimensionBoundaryVector_empty(self)

    def size(self):
        """
        size(self) -> std::vector< sg::base::DimensionBoundary >::size_type

        Parameters:
            self: std::vector< sg::base::DimensionBoundary > const *


        1
        """
        return _pysgpp_swig.DimensionBoundaryVector_size(self)

    def clear(self):
        """
        clear(self)

        Parameters:
            self: std::vector< sg::base::DimensionBoundary > *


        1
        """
        return _pysgpp_swig.DimensionBoundaryVector_clear(self)

    def swap(self, *args):
        """
        swap(self, v)

        Parameters:
            v: std::vector< sg::base::DimensionBoundary > &


        1
        """
        return _pysgpp_swig.DimensionBoundaryVector_swap(self, *args)

    def get_allocator(self):
        """
        get_allocator(self) -> std::vector< sg::base::DimensionBoundary >::allocator_type

        Parameters:
            self: std::vector< sg::base::DimensionBoundary > const *


        1
        """
        return _pysgpp_swig.DimensionBoundaryVector_get_allocator(self)

    def begin(self):
        """
        begin(self) -> std::vector< sg::base::DimensionBoundary >::iterator

        Parameters:
            self: std::vector< sg::base::DimensionBoundary > *


        1
        """
        return _pysgpp_swig.DimensionBoundaryVector_begin(self)

    def end(self):
        """
        end(self) -> std::vector< sg::base::DimensionBoundary >::iterator

        Parameters:
            self: std::vector< sg::base::DimensionBoundary > *


        1
        """
        return _pysgpp_swig.DimensionBoundaryVector_end(self)

    def rbegin(self):
        """
        rbegin(self) -> std::vector< sg::base::DimensionBoundary >::reverse_iterator

        Parameters:
            self: std::vector< sg::base::DimensionBoundary > *


        1
        """
        return _pysgpp_swig.DimensionBoundaryVector_rbegin(self)

    def rend(self):
        """
        rend(self) -> std::vector< sg::base::DimensionBoundary >::reverse_iterator

        Parameters:
            self: std::vector< sg::base::DimensionBoundary > *


        1
        """
        return _pysgpp_swig.DimensionBoundaryVector_rend(self)

    def pop_back(self):
        """
        pop_back(self)

        Parameters:
            self: std::vector< sg::base::DimensionBoundary > *


        1
        """
        return _pysgpp_swig.DimensionBoundaryVector_pop_back(self)

    def erase(self, *args):
        """
        erase(self, pos) -> std::vector< sg::base::DimensionBoundary >::iterator

        Parameters:
            pos: std::vector< sg::base::DimensionBoundary >::iterator

        erase(self, first, last) -> std::vector< sg::base::DimensionBoundary >::iterator

        Parameters:
            first: std::vector< sg::base::DimensionBoundary >::iterator
            last: std::vector< sg::base::DimensionBoundary >::iterator


        1
        """
        return _pysgpp_swig.DimensionBoundaryVector_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(self) -> DimensionBoundaryVector
        __init__(self, arg2) -> DimensionBoundaryVector

        Parameters:
            arg2: std::vector< sg::base::DimensionBoundary > const &

        __init__(self, size) -> DimensionBoundaryVector

        Parameters:
            size: std::vector< sg::base::DimensionBoundary >::size_type

        __init__(self, size, value) -> DimensionBoundaryVector

        Parameters:
            size: std::vector< sg::base::DimensionBoundary >::size_type
            value: std::vector< sg::base::DimensionBoundary >::value_type const &


        1
        """
        this = _pysgpp_swig.new_DimensionBoundaryVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """
        push_back(self, x)

        Parameters:
            x: std::vector< sg::base::DimensionBoundary >::value_type const &


        1
        """
        return _pysgpp_swig.DimensionBoundaryVector_push_back(self, *args)

    def front(self):
        """
        front(self) -> DimensionBoundary

        Parameters:
            self: std::vector< sg::base::DimensionBoundary > const *


        1
        """
        return _pysgpp_swig.DimensionBoundaryVector_front(self)

    def back(self):
        """
        back(self) -> DimensionBoundary

        Parameters:
            self: std::vector< sg::base::DimensionBoundary > const *


        1
        """
        return _pysgpp_swig.DimensionBoundaryVector_back(self)

    def assign(self, *args):
        """
        assign(self, n, x)

        Parameters:
            n: std::vector< sg::base::DimensionBoundary >::size_type
            x: std::vector< sg::base::DimensionBoundary >::value_type const &


        1
        """
        return _pysgpp_swig.DimensionBoundaryVector_assign(self, *args)

    def resize(self, *args):
        """
        resize(self, new_size)

        Parameters:
            new_size: std::vector< sg::base::DimensionBoundary >::size_type

        resize(self, new_size, x)

        Parameters:
            new_size: std::vector< sg::base::DimensionBoundary >::size_type
            x: std::vector< sg::base::DimensionBoundary >::value_type const &


        1
        """
        return _pysgpp_swig.DimensionBoundaryVector_resize(self, *args)

    def insert(self, *args):
        """
        insert(self, pos, x) -> std::vector< sg::base::DimensionBoundary >::iterator

        Parameters:
            pos: std::vector< sg::base::DimensionBoundary >::iterator
            x: std::vector< sg::base::DimensionBoundary >::value_type const &

        insert(self, pos, n, x)

        Parameters:
            pos: std::vector< sg::base::DimensionBoundary >::iterator
            n: std::vector< sg::base::DimensionBoundary >::size_type
            x: std::vector< sg::base::DimensionBoundary >::value_type const &


        1
        """
        return _pysgpp_swig.DimensionBoundaryVector_insert(self, *args)

    def reserve(self, *args):
        """
        reserve(self, n)

        Parameters:
            n: std::vector< sg::base::DimensionBoundary >::size_type


        1
        """
        return _pysgpp_swig.DimensionBoundaryVector_reserve(self, *args)

    def capacity(self):
        """
        capacity(self) -> std::vector< sg::base::DimensionBoundary >::size_type

        Parameters:
            self: std::vector< sg::base::DimensionBoundary > const *


        1
        """
        return _pysgpp_swig.DimensionBoundaryVector_capacity(self)

    __swig_destroy__ = _pysgpp_swig.delete_DimensionBoundaryVector
    __del__ = lambda self : None;
DimensionBoundaryVector_swigregister = _pysgpp_swig.DimensionBoundaryVector_swigregister
DimensionBoundaryVector_swigregister(DimensionBoundaryVector)

class Stretching1DVector(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Stretching1DVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Stretching1DVector, name)
    __repr__ = _swig_repr
    def iterator(self):
        """
        iterator(self) -> SwigPyIterator

        Parameters:
            self: std::vector< sg::base::Stretching1D > *


        1
        """
        return _pysgpp_swig.Stretching1DVector_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """
        __nonzero__(self) -> bool

        Parameters:
            self: std::vector< sg::base::Stretching1D > const *


        1
        """
        return _pysgpp_swig.Stretching1DVector___nonzero__(self)

    def __bool__(self):
        """
        __bool__(self) -> bool

        Parameters:
            self: std::vector< sg::base::Stretching1D > const *


        1
        """
        return _pysgpp_swig.Stretching1DVector___bool__(self)

    def __len__(self):
        """
        __len__(self) -> std::vector< sg::base::Stretching1D >::size_type

        Parameters:
            self: std::vector< sg::base::Stretching1D > const *


        1
        """
        return _pysgpp_swig.Stretching1DVector___len__(self)

    def pop(self):
        """
        pop(self) -> Stretching1D

        Parameters:
            self: std::vector< sg::base::Stretching1D > *


        1
        """
        return _pysgpp_swig.Stretching1DVector_pop(self)

    def __getslice__(self, *args):
        """
        __getslice__(self, i, j) -> Stretching1DVector

        Parameters:
            i: std::vector< sg::base::Stretching1D >::difference_type
            j: std::vector< sg::base::Stretching1D >::difference_type


        1
        """
        return _pysgpp_swig.Stretching1DVector___getslice__(self, *args)

    def __setslice__(self, *args):
        """
        __setslice__(self, i, j, v=std::vector< sg::base::Stretching1D,std::allocator< sg::base::Stretching1D > >())

        Parameters:
            i: std::vector< sg::base::Stretching1D >::difference_type
            j: std::vector< sg::base::Stretching1D >::difference_type
            v: std::vector< sg::base::Stretching1D,std::allocator< sg::base::Stretching1D > > const &

        __setslice__(self, i, j)

        Parameters:
            i: std::vector< sg::base::Stretching1D >::difference_type
            j: std::vector< sg::base::Stretching1D >::difference_type


        1
        """
        return _pysgpp_swig.Stretching1DVector___setslice__(self, *args)

    def __delslice__(self, *args):
        """
        __delslice__(self, i, j)

        Parameters:
            i: std::vector< sg::base::Stretching1D >::difference_type
            j: std::vector< sg::base::Stretching1D >::difference_type


        1
        """
        return _pysgpp_swig.Stretching1DVector___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(self, i)

        Parameters:
            i: std::vector< sg::base::Stretching1D >::difference_type

        __delitem__(self, slice)

        Parameters:
            slice: PySliceObject *


        1
        """
        return _pysgpp_swig.Stretching1DVector___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(self, slice) -> Stretching1DVector

        Parameters:
            slice: PySliceObject *

        __getitem__(self, i) -> Stretching1D

        Parameters:
            i: std::vector< sg::base::Stretching1D >::difference_type


        1
        """
        return _pysgpp_swig.Stretching1DVector___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(self, slice, v)

        Parameters:
            slice: PySliceObject *
            v: std::vector< sg::base::Stretching1D,std::allocator< sg::base::Stretching1D > > const &

        __setitem__(self, slice)

        Parameters:
            slice: PySliceObject *

        __setitem__(self, i, x)

        Parameters:
            i: std::vector< sg::base::Stretching1D >::difference_type
            x: std::vector< sg::base::Stretching1D >::value_type const &


        1
        """
        return _pysgpp_swig.Stretching1DVector___setitem__(self, *args)

    def append(self, *args):
        """
        append(self, x)

        Parameters:
            x: std::vector< sg::base::Stretching1D >::value_type const &


        1
        """
        return _pysgpp_swig.Stretching1DVector_append(self, *args)

    def empty(self):
        """
        empty(self) -> bool

        Parameters:
            self: std::vector< sg::base::Stretching1D > const *


        1
        """
        return _pysgpp_swig.Stretching1DVector_empty(self)

    def size(self):
        """
        size(self) -> std::vector< sg::base::Stretching1D >::size_type

        Parameters:
            self: std::vector< sg::base::Stretching1D > const *


        1
        """
        return _pysgpp_swig.Stretching1DVector_size(self)

    def clear(self):
        """
        clear(self)

        Parameters:
            self: std::vector< sg::base::Stretching1D > *


        1
        """
        return _pysgpp_swig.Stretching1DVector_clear(self)

    def swap(self, *args):
        """
        swap(self, v)

        Parameters:
            v: std::vector< sg::base::Stretching1D > &


        1
        """
        return _pysgpp_swig.Stretching1DVector_swap(self, *args)

    def get_allocator(self):
        """
        get_allocator(self) -> std::vector< sg::base::Stretching1D >::allocator_type

        Parameters:
            self: std::vector< sg::base::Stretching1D > const *


        1
        """
        return _pysgpp_swig.Stretching1DVector_get_allocator(self)

    def begin(self):
        """
        begin(self) -> std::vector< sg::base::Stretching1D >::iterator

        Parameters:
            self: std::vector< sg::base::Stretching1D > *


        1
        """
        return _pysgpp_swig.Stretching1DVector_begin(self)

    def end(self):
        """
        end(self) -> std::vector< sg::base::Stretching1D >::iterator

        Parameters:
            self: std::vector< sg::base::Stretching1D > *


        1
        """
        return _pysgpp_swig.Stretching1DVector_end(self)

    def rbegin(self):
        """
        rbegin(self) -> std::vector< sg::base::Stretching1D >::reverse_iterator

        Parameters:
            self: std::vector< sg::base::Stretching1D > *


        1
        """
        return _pysgpp_swig.Stretching1DVector_rbegin(self)

    def rend(self):
        """
        rend(self) -> std::vector< sg::base::Stretching1D >::reverse_iterator

        Parameters:
            self: std::vector< sg::base::Stretching1D > *


        1
        """
        return _pysgpp_swig.Stretching1DVector_rend(self)

    def pop_back(self):
        """
        pop_back(self)

        Parameters:
            self: std::vector< sg::base::Stretching1D > *


        1
        """
        return _pysgpp_swig.Stretching1DVector_pop_back(self)

    def erase(self, *args):
        """
        erase(self, pos) -> std::vector< sg::base::Stretching1D >::iterator

        Parameters:
            pos: std::vector< sg::base::Stretching1D >::iterator

        erase(self, first, last) -> std::vector< sg::base::Stretching1D >::iterator

        Parameters:
            first: std::vector< sg::base::Stretching1D >::iterator
            last: std::vector< sg::base::Stretching1D >::iterator


        1
        """
        return _pysgpp_swig.Stretching1DVector_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(self) -> Stretching1DVector
        __init__(self, arg2) -> Stretching1DVector

        Parameters:
            arg2: std::vector< sg::base::Stretching1D > const &

        __init__(self, size) -> Stretching1DVector

        Parameters:
            size: std::vector< sg::base::Stretching1D >::size_type

        __init__(self, size, value) -> Stretching1DVector

        Parameters:
            size: std::vector< sg::base::Stretching1D >::size_type
            value: std::vector< sg::base::Stretching1D >::value_type const &


        1
        """
        this = _pysgpp_swig.new_Stretching1DVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """
        push_back(self, x)

        Parameters:
            x: std::vector< sg::base::Stretching1D >::value_type const &


        1
        """
        return _pysgpp_swig.Stretching1DVector_push_back(self, *args)

    def front(self):
        """
        front(self) -> Stretching1D

        Parameters:
            self: std::vector< sg::base::Stretching1D > const *


        1
        """
        return _pysgpp_swig.Stretching1DVector_front(self)

    def back(self):
        """
        back(self) -> Stretching1D

        Parameters:
            self: std::vector< sg::base::Stretching1D > const *


        1
        """
        return _pysgpp_swig.Stretching1DVector_back(self)

    def assign(self, *args):
        """
        assign(self, n, x)

        Parameters:
            n: std::vector< sg::base::Stretching1D >::size_type
            x: std::vector< sg::base::Stretching1D >::value_type const &


        1
        """
        return _pysgpp_swig.Stretching1DVector_assign(self, *args)

    def resize(self, *args):
        """
        resize(self, new_size)

        Parameters:
            new_size: std::vector< sg::base::Stretching1D >::size_type

        resize(self, new_size, x)

        Parameters:
            new_size: std::vector< sg::base::Stretching1D >::size_type
            x: std::vector< sg::base::Stretching1D >::value_type const &


        1
        """
        return _pysgpp_swig.Stretching1DVector_resize(self, *args)

    def insert(self, *args):
        """
        insert(self, pos, x) -> std::vector< sg::base::Stretching1D >::iterator

        Parameters:
            pos: std::vector< sg::base::Stretching1D >::iterator
            x: std::vector< sg::base::Stretching1D >::value_type const &

        insert(self, pos, n, x)

        Parameters:
            pos: std::vector< sg::base::Stretching1D >::iterator
            n: std::vector< sg::base::Stretching1D >::size_type
            x: std::vector< sg::base::Stretching1D >::value_type const &


        1
        """
        return _pysgpp_swig.Stretching1DVector_insert(self, *args)

    def reserve(self, *args):
        """
        reserve(self, n)

        Parameters:
            n: std::vector< sg::base::Stretching1D >::size_type


        1
        """
        return _pysgpp_swig.Stretching1DVector_reserve(self, *args)

    def capacity(self):
        """
        capacity(self) -> std::vector< sg::base::Stretching1D >::size_type

        Parameters:
            self: std::vector< sg::base::Stretching1D > const *


        1
        """
        return _pysgpp_swig.Stretching1DVector_capacity(self)

    __swig_destroy__ = _pysgpp_swig.delete_Stretching1DVector
    __del__ = lambda self : None;
Stretching1DVector_swigregister = _pysgpp_swig.Stretching1DVector_swigregister
Stretching1DVector_swigregister(Stretching1DVector)

class DMSystemMatrixBase(OperationMatrix):
    """1"""
    __swig_setmethods__ = {}
    for _s in [OperationMatrix]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DMSystemMatrixBase, name, value)
    __swig_getmethods__ = {}
    for _s in [OperationMatrix]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DMSystemMatrixBase, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pysgpp_swig.delete_DMSystemMatrixBase
    __del__ = lambda self : None;
    def generateb(self, *args):
        """
        generateb(self, classes, b)

        Parameters:
            classes: sg::base::DataVector &
            b: sg::base::DataVector &


        1
        """
        return _pysgpp_swig.DMSystemMatrixBase_generateb(self, *args)

    def prepareGrid(self):
        """
        prepareGrid(self)

        Parameters:
            self: sg::datadriven::DMSystemMatrixBase *


        1
        """
        return _pysgpp_swig.DMSystemMatrixBase_prepareGrid(self)

    def resetTimers(self):
        """
        resetTimers(self)

        Parameters:
            self: sg::datadriven::DMSystemMatrixBase *


        1
        """
        return _pysgpp_swig.DMSystemMatrixBase_resetTimers(self)

    def getTimers(self, *args):
        """
        getTimers(self, timeMult, computeMult, timeMultTrans, computeMultTrans)

        Parameters:
            timeMult: sg::float_t &
            computeMult: sg::float_t &
            timeMultTrans: sg::float_t &
            computeMultTrans: sg::float_t &


        1
        """
        return _pysgpp_swig.DMSystemMatrixBase_getTimers(self, *args)

DMSystemMatrixBase_swigregister = _pysgpp_swig.DMSystemMatrixBase_swigregister
DMSystemMatrixBase_swigregister(DMSystemMatrixBase)

class DMSystemMatrix(DMSystemMatrixBase):
    """1"""
    __swig_setmethods__ = {}
    for _s in [DMSystemMatrixBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DMSystemMatrix, name, value)
    __swig_getmethods__ = {}
    for _s in [DMSystemMatrixBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DMSystemMatrix, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, grid, trainData, C, lambdaRegression) -> DMSystemMatrix

        Parameters:
            grid: sg::base::Grid &
            trainData: sg::base::DataMatrix &
            C: sg::base::OperationMatrix &
            lambdaRegression: sg::float_t


        1
        """
        this = _pysgpp_swig.new_DMSystemMatrix(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_DMSystemMatrix
    __del__ = lambda self : None;
DMSystemMatrix_swigregister = _pysgpp_swig.DMSystemMatrix_swigregister
DMSystemMatrix_swigregister(DMSystemMatrix)

class DensitySystemMatrix(OperationMatrix):
    """1"""
    __swig_setmethods__ = {}
    for _s in [OperationMatrix]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DensitySystemMatrix, name, value)
    __swig_getmethods__ = {}
    for _s in [OperationMatrix]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DensitySystemMatrix, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, grid, trainData, C, lambdaRegression) -> DensitySystemMatrix

        Parameters:
            grid: sg::base::Grid &
            trainData: sg::base::DataMatrix &
            C: sg::base::OperationMatrix &
            lambdaRegression: sg::float_t


        1
        """
        this = _pysgpp_swig.new_DensitySystemMatrix(*args)
        try: self.this.append(this)
        except: self.this = this
    def generateb(self, *args):
        """
        generateb(self, b)

        Parameters:
            b: sg::base::DataVector &


        1
        """
        return _pysgpp_swig.DensitySystemMatrix_generateb(self, *args)

    __swig_destroy__ = _pysgpp_swig.delete_DensitySystemMatrix
    __del__ = lambda self : None;
DensitySystemMatrix_swigregister = _pysgpp_swig.DensitySystemMatrix_swigregister
DensitySystemMatrix_swigregister(DensitySystemMatrix)


def createOperationTest(*args):
  """
    createOperationTest(grid) -> OperationTest

    Parameters:
        grid: sg::base::Grid &


    1
    """
  return _pysgpp_swig.createOperationTest(*args)

def createOperationRegularizationDiagonal(*args):
  """
    createOperationRegularizationDiagonal(grid, mode, k) -> OperationMatrix

    Parameters:
        grid: sg::base::Grid &
        mode: int
        k: sg::float_t


    1
    """
  return _pysgpp_swig.createOperationRegularizationDiagonal(*args)

def createOperationDensityMarginalize(*args):
  """
    createOperationDensityMarginalize(grid) -> sg::datadriven::OperationDensityMarginalize *

    Parameters:
        grid: sg::base::Grid &


    1
    """
  return _pysgpp_swig.createOperationDensityMarginalize(*args)

def createOperationDensityMargTo1D(*args):
  """
    createOperationDensityMargTo1D(grid) -> sg::datadriven::OperationDensityMargTo1D *

    Parameters:
        grid: sg::base::Grid &


    1
    """
  return _pysgpp_swig.createOperationDensityMargTo1D(*args)

def createOperationDensitySampling1D(*args):
  """
    createOperationDensitySampling1D(grid) -> sg::datadriven::OperationDensitySampling1D *

    Parameters:
        grid: sg::base::Grid &


    1
    """
  return _pysgpp_swig.createOperationDensitySampling1D(*args)

def createOperationDensitySampling(*args):
  """
    createOperationDensitySampling(grid) -> sg::datadriven::OperationDensitySampling *

    Parameters:
        grid: sg::base::Grid &


    1
    """
  return _pysgpp_swig.createOperationDensitySampling(*args)

def createOperationDensityRejectionSampling(*args):
  """
    createOperationDensityRejectionSampling(grid) -> sg::datadriven::OperationDensityRejectionSampling *

    Parameters:
        grid: sg::base::Grid &


    1
    """
  return _pysgpp_swig.createOperationDensityRejectionSampling(*args)

def createOperationDensityConditional(*args):
  """
    createOperationDensityConditional(grid) -> sg::datadriven::OperationDensityConditional *

    Parameters:
        grid: sg::base::Grid &


    1
    """
  return _pysgpp_swig.createOperationDensityConditional(*args)

def createOperationRosenblattTransformation(*args):
  """
    createOperationRosenblattTransformation(grid) -> OperationRosenblattTransformation

    Parameters:
        grid: sg::base::Grid &


    1
    """
  return _pysgpp_swig.createOperationRosenblattTransformation(*args)

def createOperationRosenblattTransformation1D(*args):
  """
    createOperationRosenblattTransformation1D(grid) -> sg::datadriven::OperationTransformation1D *

    Parameters:
        grid: sg::base::Grid &


    1
    """
  return _pysgpp_swig.createOperationRosenblattTransformation1D(*args)

def createOperationInverseRosenblattTransformation(*args):
  """
    createOperationInverseRosenblattTransformation(grid) -> OperationInverseRosenblattTransformation

    Parameters:
        grid: sg::base::Grid &


    1
    """
  return _pysgpp_swig.createOperationInverseRosenblattTransformation(*args)

def createOperationInverseRosenblattTransformation1D(*args):
  """
    createOperationInverseRosenblattTransformation1D(grid) -> sg::datadriven::OperationTransformation1D *

    Parameters:
        grid: sg::base::Grid &


    1
    """
  return _pysgpp_swig.createOperationInverseRosenblattTransformation1D(*args)

def createOperationRosenblattTransformationKDE(*args):
  """
    createOperationRosenblattTransformationKDE(kde) -> OperationRosenblattTransformationKDE

    Parameters:
        kde: sg::datadriven::GaussianKDE &


    1
    """
  return _pysgpp_swig.createOperationRosenblattTransformationKDE(*args)

def createOperationInverseRosenblattTransformationKDE(*args):
  """
    createOperationInverseRosenblattTransformationKDE(kde) -> OperationInverseRosenblattTransformationKDE

    Parameters:
        kde: sg::datadriven::GaussianKDE &


    1
    """
  return _pysgpp_swig.createOperationInverseRosenblattTransformationKDE(*args)

def createOperationDensityMarginalizeKDE(*args):
  """
    createOperationDensityMarginalizeKDE(kde) -> OperationDensityMarginalizeKDE

    Parameters:
        kde: sg::datadriven::GaussianKDE &


    1
    """
  return _pysgpp_swig.createOperationDensityMarginalizeKDE(*args)

def createOperationDensityConditionalKDE(*args):
  """
    createOperationDensityConditionalKDE(kde) -> OperationDensityConditionalKDE

    Parameters:
        kde: sg::datadriven::GaussianKDE &


    1
    """
  return _pysgpp_swig.createOperationDensityConditionalKDE(*args)

def createOperationMultipleEval(*args):
  """
    createOperationMultipleEval(grid, dataset) -> OperationMultipleEval

    Parameters:
        grid: sg::base::Grid &
        dataset: sg::base::DataMatrix &

    createOperationMultipleEval(grid, dataset, configuration) -> OperationMultipleEval

    Parameters:
        grid: sg::base::Grid &
        dataset: sg::base::DataMatrix &
        configuration: sg::datadriven::OperationMultipleEvalConfiguration


    1
    """
  return _pysgpp_swig.createOperationMultipleEval(*args)
class ClassificatorQuality(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ClassificatorQuality, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ClassificatorQuality, name)
    __repr__ = _swig_repr
    __swig_setmethods__["truePositive_"] = _pysgpp_swig.ClassificatorQuality_truePositive__set
    __swig_getmethods__["truePositive_"] = _pysgpp_swig.ClassificatorQuality_truePositive__get
    if _newclass:truePositive_ = _swig_property(_pysgpp_swig.ClassificatorQuality_truePositive__get, _pysgpp_swig.ClassificatorQuality_truePositive__set)
    __swig_setmethods__["trueNegative_"] = _pysgpp_swig.ClassificatorQuality_trueNegative__set
    __swig_getmethods__["trueNegative_"] = _pysgpp_swig.ClassificatorQuality_trueNegative__get
    if _newclass:trueNegative_ = _swig_property(_pysgpp_swig.ClassificatorQuality_trueNegative__get, _pysgpp_swig.ClassificatorQuality_trueNegative__set)
    __swig_setmethods__["falsePositive_"] = _pysgpp_swig.ClassificatorQuality_falsePositive__set
    __swig_getmethods__["falsePositive_"] = _pysgpp_swig.ClassificatorQuality_falsePositive__get
    if _newclass:falsePositive_ = _swig_property(_pysgpp_swig.ClassificatorQuality_falsePositive__get, _pysgpp_swig.ClassificatorQuality_falsePositive__set)
    __swig_setmethods__["falseNegative_"] = _pysgpp_swig.ClassificatorQuality_falseNegative__set
    __swig_getmethods__["falseNegative_"] = _pysgpp_swig.ClassificatorQuality_falseNegative__get
    if _newclass:falseNegative_ = _swig_property(_pysgpp_swig.ClassificatorQuality_falseNegative__get, _pysgpp_swig.ClassificatorQuality_falseNegative__set)
    def __init__(self): 
        """
        __init__(self) -> ClassificatorQuality

        1
        """
        this = _pysgpp_swig.new_ClassificatorQuality()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_ClassificatorQuality
    __del__ = lambda self : None;
ClassificatorQuality_swigregister = _pysgpp_swig.ClassificatorQuality_swigregister
ClassificatorQuality_swigregister(ClassificatorQuality)

class LearnerTiming(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LearnerTiming, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LearnerTiming, name)
    __repr__ = _swig_repr
    __swig_setmethods__["timeComplete_"] = _pysgpp_swig.LearnerTiming_timeComplete__set
    __swig_getmethods__["timeComplete_"] = _pysgpp_swig.LearnerTiming_timeComplete__get
    if _newclass:timeComplete_ = _swig_property(_pysgpp_swig.LearnerTiming_timeComplete__get, _pysgpp_swig.LearnerTiming_timeComplete__set)
    __swig_setmethods__["timeMultComplete_"] = _pysgpp_swig.LearnerTiming_timeMultComplete__set
    __swig_getmethods__["timeMultComplete_"] = _pysgpp_swig.LearnerTiming_timeMultComplete__get
    if _newclass:timeMultComplete_ = _swig_property(_pysgpp_swig.LearnerTiming_timeMultComplete__get, _pysgpp_swig.LearnerTiming_timeMultComplete__set)
    __swig_setmethods__["timeMultCompute_"] = _pysgpp_swig.LearnerTiming_timeMultCompute__set
    __swig_getmethods__["timeMultCompute_"] = _pysgpp_swig.LearnerTiming_timeMultCompute__get
    if _newclass:timeMultCompute_ = _swig_property(_pysgpp_swig.LearnerTiming_timeMultCompute__get, _pysgpp_swig.LearnerTiming_timeMultCompute__set)
    __swig_setmethods__["timeMultTransComplete_"] = _pysgpp_swig.LearnerTiming_timeMultTransComplete__set
    __swig_getmethods__["timeMultTransComplete_"] = _pysgpp_swig.LearnerTiming_timeMultTransComplete__get
    if _newclass:timeMultTransComplete_ = _swig_property(_pysgpp_swig.LearnerTiming_timeMultTransComplete__get, _pysgpp_swig.LearnerTiming_timeMultTransComplete__set)
    __swig_setmethods__["timeMultTransCompute_"] = _pysgpp_swig.LearnerTiming_timeMultTransCompute__set
    __swig_getmethods__["timeMultTransCompute_"] = _pysgpp_swig.LearnerTiming_timeMultTransCompute__get
    if _newclass:timeMultTransCompute_ = _swig_property(_pysgpp_swig.LearnerTiming_timeMultTransCompute__get, _pysgpp_swig.LearnerTiming_timeMultTransCompute__set)
    __swig_setmethods__["timeRegularization_"] = _pysgpp_swig.LearnerTiming_timeRegularization__set
    __swig_getmethods__["timeRegularization_"] = _pysgpp_swig.LearnerTiming_timeRegularization__get
    if _newclass:timeRegularization_ = _swig_property(_pysgpp_swig.LearnerTiming_timeRegularization__get, _pysgpp_swig.LearnerTiming_timeRegularization__set)
    __swig_setmethods__["GFlop_"] = _pysgpp_swig.LearnerTiming_GFlop__set
    __swig_getmethods__["GFlop_"] = _pysgpp_swig.LearnerTiming_GFlop__get
    if _newclass:GFlop_ = _swig_property(_pysgpp_swig.LearnerTiming_GFlop__get, _pysgpp_swig.LearnerTiming_GFlop__set)
    __swig_setmethods__["GByte_"] = _pysgpp_swig.LearnerTiming_GByte__set
    __swig_getmethods__["GByte_"] = _pysgpp_swig.LearnerTiming_GByte__get
    if _newclass:GByte_ = _swig_property(_pysgpp_swig.LearnerTiming_GByte__get, _pysgpp_swig.LearnerTiming_GByte__set)
    def __init__(self): 
        """
        __init__(self) -> LearnerTiming

        1
        """
        this = _pysgpp_swig.new_LearnerTiming()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_LearnerTiming
    __del__ = lambda self : None;
LearnerTiming_swigregister = _pysgpp_swig.LearnerTiming_swigregister
LearnerTiming_swigregister(LearnerTiming)

class LearnerBase(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LearnerBase, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LearnerBase, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pysgpp_swig.delete_LearnerBase
    __del__ = lambda self : None;
    def train(self, *args):
        """
        train(self, testDataset, classes, GridConfig, SolverConfigRefine, SolverConfigFinal, AdaptConfig, 
            testAccDuringAdapt, lambdaRegularization) -> LearnerTiming

        Parameters:
            testDataset: sg::base::DataMatrix &
            classes: sg::base::DataVector &
            GridConfig: sg::base::RegularGridConfiguration const &
            SolverConfigRefine: sg::solver::SLESolverConfiguration const &
            SolverConfigFinal: sg::solver::SLESolverConfiguration const &
            AdaptConfig: sg::base::AdpativityConfiguration const &
            testAccDuringAdapt: bool
            lambdaRegularization: sg::float_t const

        train(self, testDataset, classes, GridConfig, SolverConfig, lambdaRegularization) -> LearnerTiming

        Parameters:
            testDataset: sg::base::DataMatrix &
            classes: sg::base::DataVector &
            GridConfig: sg::base::RegularGridConfiguration const &
            SolverConfig: sg::solver::SLESolverConfiguration const &
            lambdaRegularization: sg::float_t const


        1
        """
        return _pysgpp_swig.LearnerBase_train(self, *args)

    def predict(self, *args):
        """
        predict(self, testDataset, classesComputed)

        Parameters:
            testDataset: sg::base::DataMatrix &
            classesComputed: sg::base::DataVector &


        1
        """
        return _pysgpp_swig.LearnerBase_predict(self, *args)

    def getAccuracy(self, *args):
        """
        getAccuracy(self, testDataset, classesReference, threshold=0.0) -> sg::float_t

        Parameters:
            testDataset: sg::base::DataMatrix &
            classesReference: sg::base::DataVector const &
            threshold: sg::float_t const

        getAccuracy(self, testDataset, classesReference) -> sg::float_t

        Parameters:
            testDataset: sg::base::DataMatrix &
            classesReference: sg::base::DataVector const &

        getAccuracy(self, classesComputed, classesReference, threshold=0.0) -> sg::float_t

        Parameters:
            classesComputed: sg::base::DataVector const &
            classesReference: sg::base::DataVector const &
            threshold: sg::float_t const

        getAccuracy(self, classesComputed, classesReference) -> sg::float_t

        Parameters:
            classesComputed: sg::base::DataVector const &
            classesReference: sg::base::DataVector const &


        1
        """
        return _pysgpp_swig.LearnerBase_getAccuracy(self, *args)

    def getCassificatorQuality(self, *args):
        """
        getCassificatorQuality(self, testDataset, classesReference, threshold=0.0) -> ClassificatorQuality

        Parameters:
            testDataset: sg::base::DataMatrix &
            classesReference: sg::base::DataVector const &
            threshold: sg::float_t const

        getCassificatorQuality(self, testDataset, classesReference) -> ClassificatorQuality

        Parameters:
            testDataset: sg::base::DataMatrix &
            classesReference: sg::base::DataVector const &

        getCassificatorQuality(self, classesComputed, classesReference, threshold=0.0) -> ClassificatorQuality

        Parameters:
            classesComputed: sg::base::DataVector const &
            classesReference: sg::base::DataVector const &
            threshold: sg::float_t const

        getCassificatorQuality(self, classesComputed, classesReference) -> ClassificatorQuality

        Parameters:
            classesComputed: sg::base::DataVector const &
            classesReference: sg::base::DataVector const &


        1
        """
        return _pysgpp_swig.LearnerBase_getCassificatorQuality(self, *args)

    def store(self, *args):
        """
        store(self, tGridFilename, tAlphaFilename)

        Parameters:
            tGridFilename: std::string
            tAlphaFilename: std::string


        1
        """
        return _pysgpp_swig.LearnerBase_store(self, *args)

    def dumpGrid(self, *args):
        """
        dumpGrid(self, tFilename)

        Parameters:
            tFilename: std::string


        1
        """
        return _pysgpp_swig.LearnerBase_dumpGrid(self, *args)

    def dumpFunction(self, *args):
        """
        dumpFunction(self, tFilename, resolution)

        Parameters:
            tFilename: std::string
            resolution: size_t


        1
        """
        return _pysgpp_swig.LearnerBase_dumpFunction(self, *args)

    def getIsRegression(self):
        """
        getIsRegression(self) -> bool

        Parameters:
            self: sg::datadriven::LearnerBase const *


        1
        """
        return _pysgpp_swig.LearnerBase_getIsRegression(self)

    def getIsVerbose(self):
        """
        getIsVerbose(self) -> bool

        Parameters:
            self: sg::datadriven::LearnerBase const *


        1
        """
        return _pysgpp_swig.LearnerBase_getIsVerbose(self)

    def setIsVerbose(self, *args):
        """
        setIsVerbose(self, isVerbose)

        Parameters:
            isVerbose: bool const


        1
        """
        return _pysgpp_swig.LearnerBase_setIsVerbose(self, *args)

    def getRefinementExecTimes(self):
        """
        getRefinementExecTimes(self) -> IndexValVector

        Parameters:
            self: sg::datadriven::LearnerBase *


        1
        """
        return _pysgpp_swig.LearnerBase_getRefinementExecTimes(self)

LearnerBase_swigregister = _pysgpp_swig.LearnerBase_swigregister
LearnerBase_swigregister(LearnerBase)

class DensityEstimator(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DensityEstimator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DensityEstimator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pysgpp_swig.delete_DensityEstimator
    __del__ = lambda self : None;
    def initialize(self, *args):
        """
        initialize(self, samples)

        Parameters:
            samples: sg::base::DataMatrix &


        1
        """
        return _pysgpp_swig.DensityEstimator_initialize(self, *args)

    def pdf(self, *args):
        """
        pdf(self, x) -> sg::float_t

        Parameters:
            x: sg::base::DataVector &

        pdf(self, points, res)

        Parameters:
            points: sg::base::DataMatrix &
            res: sg::base::DataVector &


        1
        """
        return _pysgpp_swig.DensityEstimator_pdf(self, *args)

    def mean(self):
        """
        mean(self) -> sg::float_t

        Parameters:
            self: sg::datadriven::DensityEstimator *


        1
        """
        return _pysgpp_swig.DensityEstimator_mean(self)

    def variance(self):
        """
        variance(self) -> sg::float_t

        Parameters:
            self: sg::datadriven::DensityEstimator *


        1
        """
        return _pysgpp_swig.DensityEstimator_variance(self)

    def std_deviation(self):
        """
        std_deviation(self) -> sg::float_t

        Parameters:
            self: sg::datadriven::DensityEstimator *


        1
        """
        return _pysgpp_swig.DensityEstimator_std_deviation(self)

    def cov(self, *args):
        """
        cov(self, cov)

        Parameters:
            cov: sg::base::DataMatrix &


        1
        """
        return _pysgpp_swig.DensityEstimator_cov(self, *args)

    def corrcoef(self, *args):
        """
        corrcoef(self, corr)

        Parameters:
            corr: sg::base::DataMatrix &


        1
        """
        return _pysgpp_swig.DensityEstimator_corrcoef(self, *args)

    def getSamples(self, *args):
        """
        getSamples(self, dim) -> DataVector

        Parameters:
            dim: size_t

        getSamples(self) -> DataMatrix

        Parameters:
            self: sg::datadriven::DensityEstimator *


        1
        """
        return _pysgpp_swig.DensityEstimator_getSamples(self, *args)

    def getDim(self):
        """
        getDim(self) -> size_t

        Parameters:
            self: sg::datadriven::DensityEstimator *


        1
        """
        return _pysgpp_swig.DensityEstimator_getDim(self)

    def getNsamples(self):
        """
        getNsamples(self) -> size_t

        Parameters:
            self: sg::datadriven::DensityEstimator *


        1
        """
        return _pysgpp_swig.DensityEstimator_getNsamples(self)

DensityEstimator_swigregister = _pysgpp_swig.DensityEstimator_swigregister
DensityEstimator_swigregister(DensityEstimator)

M_SQRT2PI = _pysgpp_swig.M_SQRT2PI
class GaussianKDE(DensityEstimator):
    """1"""
    __swig_setmethods__ = {}
    for _s in [DensityEstimator]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GaussianKDE, name, value)
    __swig_getmethods__ = {}
    for _s in [DensityEstimator]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GaussianKDE, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> GaussianKDE
        __init__(self, samplesVec) -> GaussianKDE

        Parameters:
            samplesVec: std::vector< sg::base::DataVector *,std::allocator< sg::base::DataVector * > > &

        __init__(self, samples) -> GaussianKDE

        Parameters:
            samples: sg::base::DataMatrix &


        1
        """
        this = _pysgpp_swig.new_GaussianKDE(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_GaussianKDE
    __del__ = lambda self : None;
    def initialize(self, *args):
        """
        initialize(self, samples)

        Parameters:
            samples: sg::base::DataMatrix &

        initialize(self, samplesVec)

        Parameters:
            samplesVec: std::vector< sg::base::DataVector *,std::allocator< sg::base::DataVector * > > &


        1
        """
        return _pysgpp_swig.GaussianKDE_initialize(self, *args)

    def pdf(self, *args):
        """
        pdf(self, x) -> sg::float_t

        Parameters:
            x: sg::base::DataVector &

        pdf(self, points, res)

        Parameters:
            points: sg::base::DataMatrix &
            res: sg::base::DataVector &


        1
        """
        return _pysgpp_swig.GaussianKDE_pdf(self, *args)

    def getConditionalizationFactor(self, *args):
        """
        getConditionalizationFactor(self, pcond)

        Parameters:
            pcond: sg::base::DataVector &


        1
        """
        return _pysgpp_swig.GaussianKDE_getConditionalizationFactor(self, *args)

    def setConditionalizationFactor(self, *args):
        """
        setConditionalizationFactor(self, pcond)

        Parameters:
            pcond: sg::base::DataVector &


        1
        """
        return _pysgpp_swig.GaussianKDE_setConditionalizationFactor(self, *args)

    def updateConditionalizationFactors(self, *args):
        """
        updateConditionalizationFactors(self, x, dims, pcond)

        Parameters:
            x: sg::base::DataVector &
            dims: std::vector< size_t,std::allocator< size_t > > &
            pcond: sg::base::DataVector &


        1
        """
        return _pysgpp_swig.GaussianKDE_updateConditionalizationFactors(self, *args)

    def getBandwidths(self, *args):
        """
        getBandwidths(self, sigma)

        Parameters:
            sigma: sg::base::DataVector &


        1
        """
        return _pysgpp_swig.GaussianKDE_getBandwidths(self, *args)

    def getSamples(self, *args):
        """
        getSamples(self) -> DataMatrix
        getSamples(self, dim) -> DataVector

        Parameters:
            dim: size_t


        1
        """
        return _pysgpp_swig.GaussianKDE_getSamples(self, *args)

GaussianKDE_swigregister = _pysgpp_swig.GaussianKDE_swigregister
GaussianKDE_swigregister(GaussianKDE)

class LearnerSGDEConfiguration(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LearnerSGDEConfiguration, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LearnerSGDEConfiguration, name)
    __repr__ = _swig_repr
    __swig_setmethods__["doCrossValidation_"] = _pysgpp_swig.LearnerSGDEConfiguration_doCrossValidation__set
    __swig_getmethods__["doCrossValidation_"] = _pysgpp_swig.LearnerSGDEConfiguration_doCrossValidation__get
    if _newclass:doCrossValidation_ = _swig_property(_pysgpp_swig.LearnerSGDEConfiguration_doCrossValidation__get, _pysgpp_swig.LearnerSGDEConfiguration_doCrossValidation__set)
    __swig_setmethods__["kfold_"] = _pysgpp_swig.LearnerSGDEConfiguration_kfold__set
    __swig_getmethods__["kfold_"] = _pysgpp_swig.LearnerSGDEConfiguration_kfold__get
    if _newclass:kfold_ = _swig_property(_pysgpp_swig.LearnerSGDEConfiguration_kfold__get, _pysgpp_swig.LearnerSGDEConfiguration_kfold__set)
    __swig_setmethods__["seed_"] = _pysgpp_swig.LearnerSGDEConfiguration_seed__set
    __swig_getmethods__["seed_"] = _pysgpp_swig.LearnerSGDEConfiguration_seed__get
    if _newclass:seed_ = _swig_property(_pysgpp_swig.LearnerSGDEConfiguration_seed__get, _pysgpp_swig.LearnerSGDEConfiguration_seed__set)
    __swig_setmethods__["shuffle_"] = _pysgpp_swig.LearnerSGDEConfiguration_shuffle__set
    __swig_getmethods__["shuffle_"] = _pysgpp_swig.LearnerSGDEConfiguration_shuffle__get
    if _newclass:shuffle_ = _swig_property(_pysgpp_swig.LearnerSGDEConfiguration_shuffle__get, _pysgpp_swig.LearnerSGDEConfiguration_shuffle__set)
    __swig_setmethods__["silent_"] = _pysgpp_swig.LearnerSGDEConfiguration_silent__set
    __swig_getmethods__["silent_"] = _pysgpp_swig.LearnerSGDEConfiguration_silent__get
    if _newclass:silent_ = _swig_property(_pysgpp_swig.LearnerSGDEConfiguration_silent__get, _pysgpp_swig.LearnerSGDEConfiguration_silent__set)
    __swig_setmethods__["lambda_"] = _pysgpp_swig.LearnerSGDEConfiguration_lambda__set
    __swig_getmethods__["lambda_"] = _pysgpp_swig.LearnerSGDEConfiguration_lambda__get
    if _newclass:lambda_ = _swig_property(_pysgpp_swig.LearnerSGDEConfiguration_lambda__get, _pysgpp_swig.LearnerSGDEConfiguration_lambda__set)
    __swig_setmethods__["lambdaStart_"] = _pysgpp_swig.LearnerSGDEConfiguration_lambdaStart__set
    __swig_getmethods__["lambdaStart_"] = _pysgpp_swig.LearnerSGDEConfiguration_lambdaStart__get
    if _newclass:lambdaStart_ = _swig_property(_pysgpp_swig.LearnerSGDEConfiguration_lambdaStart__get, _pysgpp_swig.LearnerSGDEConfiguration_lambdaStart__set)
    __swig_setmethods__["lambdaEnd_"] = _pysgpp_swig.LearnerSGDEConfiguration_lambdaEnd__set
    __swig_getmethods__["lambdaEnd_"] = _pysgpp_swig.LearnerSGDEConfiguration_lambdaEnd__get
    if _newclass:lambdaEnd_ = _swig_property(_pysgpp_swig.LearnerSGDEConfiguration_lambdaEnd__get, _pysgpp_swig.LearnerSGDEConfiguration_lambdaEnd__set)
    __swig_setmethods__["lambdaSteps_"] = _pysgpp_swig.LearnerSGDEConfiguration_lambdaSteps__set
    __swig_getmethods__["lambdaSteps_"] = _pysgpp_swig.LearnerSGDEConfiguration_lambdaSteps__get
    if _newclass:lambdaSteps_ = _swig_property(_pysgpp_swig.LearnerSGDEConfiguration_lambdaSteps__get, _pysgpp_swig.LearnerSGDEConfiguration_lambdaSteps__set)
    __swig_setmethods__["logScale_"] = _pysgpp_swig.LearnerSGDEConfiguration_logScale__set
    __swig_getmethods__["logScale_"] = _pysgpp_swig.LearnerSGDEConfiguration_logScale__get
    if _newclass:logScale_ = _swig_property(_pysgpp_swig.LearnerSGDEConfiguration_logScale__get, _pysgpp_swig.LearnerSGDEConfiguration_logScale__set)
    def __init__(self): 
        """
        __init__(self) -> LearnerSGDEConfiguration

        1
        """
        this = _pysgpp_swig.new_LearnerSGDEConfiguration()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_LearnerSGDEConfiguration
    __del__ = lambda self : None;
LearnerSGDEConfiguration_swigregister = _pysgpp_swig.LearnerSGDEConfiguration_swigregister
LearnerSGDEConfiguration_swigregister(LearnerSGDEConfiguration)

class LearnerSGDE(DensityEstimator):
    """1"""
    __swig_setmethods__ = {}
    for _s in [DensityEstimator]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LearnerSGDE, name, value)
    __swig_getmethods__ = {}
    for _s in [DensityEstimator]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, LearnerSGDE, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, gridConfig, adaptivityConfig, solverConfig, regularizationConfig, learnerSGDEConfig) -> LearnerSGDE

        Parameters:
            gridConfig: sg::base::RegularGridConfiguration &
            adaptivityConfig: sg::base::AdpativityConfiguration &
            solverConfig: sg::solver::SLESolverConfiguration &
            regularizationConfig: sg::pde::RegularizationConfiguration &
            learnerSGDEConfig: sg::datadriven::LearnerSGDEConfiguration &


        1
        """
        this = _pysgpp_swig.new_LearnerSGDE(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_LearnerSGDE
    __del__ = lambda self : None;
    def pdf(self, *args):
        """
        pdf(self, x) -> sg::float_t

        Parameters:
            x: sg::base::DataVector &

        pdf(self, points, res)

        Parameters:
            points: sg::base::DataMatrix &
            res: sg::base::DataVector &


        1
        """
        return _pysgpp_swig.LearnerSGDE_pdf(self, *args)

    def getSamples(self, *args):
        """
        getSamples(self, dim) -> DataVector

        Parameters:
            dim: size_t

        getSamples(self) -> DataMatrix

        Parameters:
            self: sg::datadriven::LearnerSGDE *


        1
        """
        return _pysgpp_swig.LearnerSGDE_getSamples(self, *args)

LearnerSGDE_swigregister = _pysgpp_swig.LearnerSGDE_swigregister
LearnerSGDE_swigregister(LearnerSGDE)

class OperationTest(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OperationTest, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OperationTest, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pysgpp_swig.delete_OperationTest
    __del__ = lambda self : None;
    def test(self, *args):
        """
        test(self, alpha, data, classes) -> sg::float_t

        Parameters:
            alpha: sg::base::DataVector &
            data: sg::base::DataMatrix &
            classes: sg::base::DataVector &


        1
        """
        return _pysgpp_swig.OperationTest_test(self, *args)

    def testMSE(self, *args):
        """
        testMSE(self, alpha, data, refValues) -> sg::float_t

        Parameters:
            alpha: sg::base::DataVector &
            data: sg::base::DataMatrix &
            refValues: sg::base::DataVector &


        1
        """
        return _pysgpp_swig.OperationTest_testMSE(self, *args)

    def testWithCharacteristicNumber(self, *args):
        """
        testWithCharacteristicNumber(self, alpha, data, classes, charaNumbers) -> sg::float_t

        Parameters:
            alpha: sg::base::DataVector &
            data: sg::base::DataMatrix &
            classes: sg::base::DataVector &
            charaNumbers: sg::base::DataVector &


        1
        """
        return _pysgpp_swig.OperationTest_testWithCharacteristicNumber(self, *args)

    def calculateROCcurve(self, *args):
        """
        calculateROCcurve(self, alpha, data, classes, thresholds, ROC_curve)

        Parameters:
            alpha: sg::base::DataVector &
            data: sg::base::DataMatrix &
            classes: sg::base::DataVector &
            thresholds: sg::base::DataVector &
            ROC_curve: sg::base::DataMatrix &


        1
        """
        return _pysgpp_swig.OperationTest_calculateROCcurve(self, *args)

OperationTest_swigregister = _pysgpp_swig.OperationTest_swigregister
OperationTest_swigregister(OperationTest)

class OperationRegularizationDiagonal(OperationMatrix):
    """1"""
    __swig_setmethods__ = {}
    for _s in [OperationMatrix]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OperationRegularizationDiagonal, name, value)
    __swig_getmethods__ = {}
    for _s in [OperationMatrix]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OperationRegularizationDiagonal, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HKMIX = _pysgpp_swig.OperationRegularizationDiagonal_HKMIX
    H0HKLAPLACE = _pysgpp_swig.OperationRegularizationDiagonal_H0HKLAPLACE
    ISOTROPIC_PENALTY = _pysgpp_swig.OperationRegularizationDiagonal_ISOTROPIC_PENALTY
    ANISOTROPIC_PENALTY = _pysgpp_swig.OperationRegularizationDiagonal_ANISOTROPIC_PENALTY
    __swig_destroy__ = _pysgpp_swig.delete_OperationRegularizationDiagonal
    __del__ = lambda self : None;
OperationRegularizationDiagonal_swigregister = _pysgpp_swig.OperationRegularizationDiagonal_swigregister
OperationRegularizationDiagonal_swigregister(OperationRegularizationDiagonal)

class OperationRosenblattTransformation(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OperationRosenblattTransformation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OperationRosenblattTransformation, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pysgpp_swig.delete_OperationRosenblattTransformation
    __del__ = lambda self : None;
    def doTransformation(self, *args):
        """
        doTransformation(self, alpha, points, pointscdf)

        Parameters:
            alpha: sg::base::DataVector *
            points: sg::base::DataMatrix *
            pointscdf: sg::base::DataMatrix *

        doTransformation(self, alpha, points, pointscdf, dim_start)

        Parameters:
            alpha: sg::base::DataVector *
            points: sg::base::DataMatrix *
            pointscdf: sg::base::DataMatrix *
            dim_start: size_t


        1
        """
        return _pysgpp_swig.OperationRosenblattTransformation_doTransformation(self, *args)

OperationRosenblattTransformation_swigregister = _pysgpp_swig.OperationRosenblattTransformation_swigregister
OperationRosenblattTransformation_swigregister(OperationRosenblattTransformation)

class OperationInverseRosenblattTransformation(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OperationInverseRosenblattTransformation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OperationInverseRosenblattTransformation, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pysgpp_swig.delete_OperationInverseRosenblattTransformation
    __del__ = lambda self : None;
    def doTransformation(self, *args):
        """
        doTransformation(self, alpha, pointscdf, points)

        Parameters:
            alpha: sg::base::DataVector *
            pointscdf: sg::base::DataMatrix *
            points: sg::base::DataMatrix *

        doTransformation(self, alpha, pointscdf, points, dim_start)

        Parameters:
            alpha: sg::base::DataVector *
            pointscdf: sg::base::DataMatrix *
            points: sg::base::DataMatrix *
            dim_start: size_t


        1
        """
        return _pysgpp_swig.OperationInverseRosenblattTransformation_doTransformation(self, *args)

OperationInverseRosenblattTransformation_swigregister = _pysgpp_swig.OperationInverseRosenblattTransformation_swigregister
OperationInverseRosenblattTransformation_swigregister(OperationInverseRosenblattTransformation)

class OperationRosenblattTransformationKDE(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OperationRosenblattTransformationKDE, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OperationRosenblattTransformationKDE, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, kde) -> OperationRosenblattTransformationKDE

        Parameters:
            kde: sg::datadriven::GaussianKDE &


        1
        """
        this = _pysgpp_swig.new_OperationRosenblattTransformationKDE(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OperationRosenblattTransformationKDE
    __del__ = lambda self : None;
    def doTransformation(self, *args):
        """
        doTransformation(self, pointsCdf, pointsUniform)

        Parameters:
            pointsCdf: sg::base::DataMatrix &
            pointsUniform: sg::base::DataMatrix &


        1
        """
        return _pysgpp_swig.OperationRosenblattTransformationKDE_doTransformation(self, *args)

    def doTransformation1D(self, *args):
        """
        doTransformation1D(self, x, samples1d, sigma, kern) -> sg::float_t

        Parameters:
            x: sg::float_t
            samples1d: sg::base::DataVector &
            sigma: sg::float_t
            kern: sg::base::DataVector &


        1
        """
        return _pysgpp_swig.OperationRosenblattTransformationKDE_doTransformation1D(self, *args)

OperationRosenblattTransformationKDE_swigregister = _pysgpp_swig.OperationRosenblattTransformationKDE_swigregister
OperationRosenblattTransformationKDE_swigregister(OperationRosenblattTransformationKDE)

M_1_SQRT2PI = _pysgpp_swig.M_1_SQRT2PI
class OperationInverseRosenblattTransformationKDE(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OperationInverseRosenblattTransformationKDE, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OperationInverseRosenblattTransformationKDE, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, kde, sigmaFactor=6.0, inversionEpsilon=1e-10) -> OperationInverseRosenblattTransformationKDE

        Parameters:
            kde: sg::datadriven::GaussianKDE &
            sigmaFactor: sg::float_t
            inversionEpsilon: sg::float_t

        __init__(self, kde, sigmaFactor=6.0) -> OperationInverseRosenblattTransformationKDE

        Parameters:
            kde: sg::datadriven::GaussianKDE &
            sigmaFactor: sg::float_t

        __init__(self, kde) -> OperationInverseRosenblattTransformationKDE

        Parameters:
            kde: sg::datadriven::GaussianKDE &


        1
        """
        this = _pysgpp_swig.new_OperationInverseRosenblattTransformationKDE(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OperationInverseRosenblattTransformationKDE
    __del__ = lambda self : None;
    def doTransformation(self, *args):
        """
        doTransformation(self, pointsUniform, pointsCdf)

        Parameters:
            pointsUniform: sg::base::DataMatrix &
            pointsCdf: sg::base::DataMatrix &


        1
        """
        return _pysgpp_swig.OperationInverseRosenblattTransformationKDE_doTransformation(self, *args)

    def doTransformation1D(self, *args):
        """
        doTransformation1D(self, y, samples1d, sigma, xlower, xupper, ylower, yupper, kern) -> sg::float_t

        Parameters:
            y: sg::float_t
            samples1d: sg::base::DataVector &
            sigma: sg::float_t
            xlower: sg::float_t
            xupper: sg::float_t
            ylower: sg::float_t
            yupper: sg::float_t
            kern: sg::base::DataVector &


        1
        """
        return _pysgpp_swig.OperationInverseRosenblattTransformationKDE_doTransformation1D(self, *args)

    def getMaxInversionError(self):
        """
        getMaxInversionError(self) -> sg::float_t

        Parameters:
            self: sg::datadriven::OperationInverseRosenblattTransformationKDE *


        1
        """
        return _pysgpp_swig.OperationInverseRosenblattTransformationKDE_getMaxInversionError(self)

OperationInverseRosenblattTransformationKDE_swigregister = _pysgpp_swig.OperationInverseRosenblattTransformationKDE_swigregister
OperationInverseRosenblattTransformationKDE_swigregister(OperationInverseRosenblattTransformationKDE)

class OperationDensityMarginalizeKDE(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OperationDensityMarginalizeKDE, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OperationDensityMarginalizeKDE, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, kde) -> OperationDensityMarginalizeKDE

        Parameters:
            kde: sg::datadriven::GaussianKDE &


        1
        """
        this = _pysgpp_swig.new_OperationDensityMarginalizeKDE(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OperationDensityMarginalizeKDE
    __del__ = lambda self : None;
    def doMarginalize(self, *args):
        """
        doMarginalize(self, mdim, marginalizedKDE)

        Parameters:
            mdim: size_t
            marginalizedKDE: sg::datadriven::GaussianKDE &

        doMarginalize(self, mdims, marginalizedKDE)

        Parameters:
            mdims: std::vector< size_t,std::allocator< size_t > > &
            marginalizedKDE: sg::datadriven::GaussianKDE &


        1
        """
        return _pysgpp_swig.OperationDensityMarginalizeKDE_doMarginalize(self, *args)

    def margToDimX(self, *args):
        """
        margToDimX(self, mdim, marginalizedKDE)

        Parameters:
            mdim: size_t
            marginalizedKDE: sg::datadriven::GaussianKDE &


        1
        """
        return _pysgpp_swig.OperationDensityMarginalizeKDE_margToDimX(self, *args)

    def margToDimXs(self, *args):
        """
        margToDimXs(self, mdims, marginalizedKDE)

        Parameters:
            mdims: std::vector< size_t,std::allocator< size_t > > &
            marginalizedKDE: sg::datadriven::GaussianKDE &


        1
        """
        return _pysgpp_swig.OperationDensityMarginalizeKDE_margToDimXs(self, *args)

OperationDensityMarginalizeKDE_swigregister = _pysgpp_swig.OperationDensityMarginalizeKDE_swigregister
OperationDensityMarginalizeKDE_swigregister(OperationDensityMarginalizeKDE)

class OperationDensityConditionalKDE(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OperationDensityConditionalKDE, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OperationDensityConditionalKDE, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, kde) -> OperationDensityConditionalKDE

        Parameters:
            kde: sg::datadriven::GaussianKDE &


        1
        """
        this = _pysgpp_swig.new_OperationDensityConditionalKDE(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OperationDensityConditionalKDE
    __del__ = lambda self : None;
    def doConditional(self, *args):
        """
        doConditional(self, mdim, xbar, conditionalizedKDE)

        Parameters:
            mdim: size_t
            xbar: sg::float_t
            conditionalizedKDE: sg::datadriven::GaussianKDE &

        doConditional(self, mdims, xbar, conditionalizedKDE)

        Parameters:
            mdims: std::vector< size_t,std::allocator< size_t > > &
            xbar: sg::base::DataVector &
            conditionalizedKDE: sg::datadriven::GaussianKDE &


        1
        """
        return _pysgpp_swig.OperationDensityConditionalKDE_doConditional(self, *args)

    def condToDimX(self, *args):
        """
        condToDimX(self, mdim, xbar, conditionalizedKDE)

        Parameters:
            mdim: size_t
            xbar: sg::base::DataVector &
            conditionalizedKDE: sg::datadriven::GaussianKDE &


        1
        """
        return _pysgpp_swig.OperationDensityConditionalKDE_condToDimX(self, *args)

    def condToDimXs(self, *args):
        """
        condToDimXs(self, mdims, xbar, conditionalizedKDE)

        Parameters:
            mdims: std::vector< size_t,std::allocator< size_t > > &
            xbar: sg::base::DataVector &
            conditionalizedKDE: sg::datadriven::GaussianKDE &


        1
        """
        return _pysgpp_swig.OperationDensityConditionalKDE_condToDimXs(self, *args)

OperationDensityConditionalKDE_swigregister = _pysgpp_swig.OperationDensityConditionalKDE_swigregister
OperationDensityConditionalKDE_swigregister(OperationDensityConditionalKDE)

class OperationParabolicPDESolverSystem(OperationMatrix):
    """1"""
    __swig_setmethods__ = {}
    for _s in [OperationMatrix]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OperationParabolicPDESolverSystem, name, value)
    __swig_getmethods__ = {}
    for _s in [OperationMatrix]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OperationParabolicPDESolverSystem, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pysgpp_swig.delete_OperationParabolicPDESolverSystem
    __del__ = lambda self : None;
    def generateRHS(self):
        """
        generateRHS(self) -> DataVector

        Parameters:
            self: sg::pde::OperationParabolicPDESolverSystem *


        1
        """
        return _pysgpp_swig.OperationParabolicPDESolverSystem_generateRHS(self)

    def finishTimestep(self):
        """
        finishTimestep(self)

        Parameters:
            self: sg::pde::OperationParabolicPDESolverSystem *


        1
        """
        return _pysgpp_swig.OperationParabolicPDESolverSystem_finishTimestep(self)

    def coarsenAndRefine(self, isLastTimestep=False):
        """
        coarsenAndRefine(self, isLastTimestep=False)

        Parameters:
            isLastTimestep: bool

        coarsenAndRefine(self)

        Parameters:
            self: sg::pde::OperationParabolicPDESolverSystem *


        1
        """
        return _pysgpp_swig.OperationParabolicPDESolverSystem_coarsenAndRefine(self, isLastTimestep)

    def startTimestep(self):
        """
        startTimestep(self)

        Parameters:
            self: sg::pde::OperationParabolicPDESolverSystem *


        1
        """
        return _pysgpp_swig.OperationParabolicPDESolverSystem_startTimestep(self)

    def getGrid(self):
        """
        getGrid(self) -> Grid

        Parameters:
            self: sg::pde::OperationParabolicPDESolverSystem *


        1
        """
        return _pysgpp_swig.OperationParabolicPDESolverSystem_getGrid(self)

    def getGridCoefficientsForCG(self):
        """
        getGridCoefficientsForCG(self) -> DataVector

        Parameters:
            self: sg::pde::OperationParabolicPDESolverSystem *


        1
        """
        return _pysgpp_swig.OperationParabolicPDESolverSystem_getGridCoefficientsForCG(self)

    def getGridCoefficients(self):
        """
        getGridCoefficients(self) -> DataVector

        Parameters:
            self: sg::pde::OperationParabolicPDESolverSystem *


        1
        """
        return _pysgpp_swig.OperationParabolicPDESolverSystem_getGridCoefficients(self)

    def setODESolver(self, *args):
        """
        setODESolver(self, ode)

        Parameters:
            ode: std::string


        1
        """
        return _pysgpp_swig.OperationParabolicPDESolverSystem_setODESolver(self, *args)

    def getODESolver(self):
        """
        getODESolver(self) -> std::string

        Parameters:
            self: sg::pde::OperationParabolicPDESolverSystem *


        1
        """
        return _pysgpp_swig.OperationParabolicPDESolverSystem_getODESolver(self)

    def getSumGridPointsComplete(self):
        """
        getSumGridPointsComplete(self) -> size_t

        Parameters:
            self: sg::pde::OperationParabolicPDESolverSystem *


        1
        """
        return _pysgpp_swig.OperationParabolicPDESolverSystem_getSumGridPointsComplete(self)

    def getSumGridPointsInner(self):
        """
        getSumGridPointsInner(self) -> size_t

        Parameters:
            self: sg::pde::OperationParabolicPDESolverSystem *


        1
        """
        return _pysgpp_swig.OperationParabolicPDESolverSystem_getSumGridPointsInner(self)

    def setTimestepSize(self, *args):
        """
        setTimestepSize(self, newTimestepSize)

        Parameters:
            newTimestepSize: sg::float_t


        1
        """
        return _pysgpp_swig.OperationParabolicPDESolverSystem_setTimestepSize(self, *args)

    def abortTimestep(self):
        """
        abortTimestep(self)

        Parameters:
            self: sg::pde::OperationParabolicPDESolverSystem *


        1
        """
        return _pysgpp_swig.OperationParabolicPDESolverSystem_abortTimestep(self)

    def saveAlpha(self):
        """
        saveAlpha(self)

        Parameters:
            self: sg::pde::OperationParabolicPDESolverSystem *


        1
        """
        return _pysgpp_swig.OperationParabolicPDESolverSystem_saveAlpha(self)

    def getGridCoefficientsForSC(self, *args):
        """
        getGridCoefficientsForSC(self, Values)

        Parameters:
            Values: sg::base::DataVector &


        1
        """
        return _pysgpp_swig.OperationParabolicPDESolverSystem_getGridCoefficientsForSC(self, *args)

    def getGridStorage(self):
        """
        getGridStorage(self) -> HashGridStorage

        Parameters:
            self: sg::pde::OperationParabolicPDESolverSystem *


        1
        """
        return _pysgpp_swig.OperationParabolicPDESolverSystem_getGridStorage(self)

    def getOldGridStorage(self):
        """
        getOldGridStorage(self) -> HashGridStorage

        Parameters:
            self: sg::pde::OperationParabolicPDESolverSystem *


        1
        """
        return _pysgpp_swig.OperationParabolicPDESolverSystem_getOldGridStorage(self)

    def getSecondGridStorage(self):
        """
        getSecondGridStorage(self) -> HashGridStorage

        Parameters:
            self: sg::pde::OperationParabolicPDESolverSystem *


        1
        """
        return _pysgpp_swig.OperationParabolicPDESolverSystem_getSecondGridStorage(self)

OperationParabolicPDESolverSystem_swigregister = _pysgpp_swig.OperationParabolicPDESolverSystem_swigregister
OperationParabolicPDESolverSystem_swigregister(OperationParabolicPDESolverSystem)

class OperationParabolicPDESolverSystemDirichlet(OperationParabolicPDESolverSystem):
    """1"""
    __swig_setmethods__ = {}
    for _s in [OperationParabolicPDESolverSystem]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OperationParabolicPDESolverSystemDirichlet, name, value)
    __swig_getmethods__ = {}
    for _s in [OperationParabolicPDESolverSystem]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OperationParabolicPDESolverSystemDirichlet, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pysgpp_swig.delete_OperationParabolicPDESolverSystemDirichlet
    __del__ = lambda self : None;
OperationParabolicPDESolverSystemDirichlet_swigregister = _pysgpp_swig.OperationParabolicPDESolverSystemDirichlet_swigregister
OperationParabolicPDESolverSystemDirichlet_swigregister(OperationParabolicPDESolverSystemDirichlet)

class HeatEquationParabolicPDESolverSystem(OperationParabolicPDESolverSystemDirichlet):
    """1"""
    __swig_setmethods__ = {}
    for _s in [OperationParabolicPDESolverSystemDirichlet]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HeatEquationParabolicPDESolverSystem, name, value)
    __swig_getmethods__ = {}
    for _s in [OperationParabolicPDESolverSystemDirichlet]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, HeatEquationParabolicPDESolverSystem, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, SparseGrid, alpha, a, TimestepSize, OperationMode="ExEul") -> HeatEquationParabolicPDESolverSystem

        Parameters:
            SparseGrid: sg::base::Grid &
            alpha: sg::base::DataVector &
            a: sg::float_t
            TimestepSize: sg::float_t
            OperationMode: std::string

        __init__(self, SparseGrid, alpha, a, TimestepSize) -> HeatEquationParabolicPDESolverSystem

        Parameters:
            SparseGrid: sg::base::Grid &
            alpha: sg::base::DataVector &
            a: sg::float_t
            TimestepSize: sg::float_t


        1
        """
        this = _pysgpp_swig.new_HeatEquationParabolicPDESolverSystem(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_HeatEquationParabolicPDESolverSystem
    __del__ = lambda self : None;
    def coarsenAndRefine(self, isLastTimestep=False):
        """
        coarsenAndRefine(self, isLastTimestep=False)

        Parameters:
            isLastTimestep: bool

        coarsenAndRefine(self)

        Parameters:
            self: sg::pde::HeatEquationParabolicPDESolverSystem *


        1
        """
        return _pysgpp_swig.HeatEquationParabolicPDESolverSystem_coarsenAndRefine(self, isLastTimestep)

HeatEquationParabolicPDESolverSystem_swigregister = _pysgpp_swig.HeatEquationParabolicPDESolverSystem_swigregister
HeatEquationParabolicPDESolverSystem_swigregister(HeatEquationParabolicPDESolverSystem)

class PDESolver(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PDESolver, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PDESolver, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pysgpp_swig.delete_PDESolver
    __del__ = lambda self : None;
    def constructGrid(self, *args):
        """
        constructGrid(self, myBoundingBox, level)

        Parameters:
            myBoundingBox: sg::base::BoundingBox &
            level: int


        1
        """
        return _pysgpp_swig.PDESolver_constructGrid(self, *args)

    def setGrid(self, *args):
        """
        setGrid(self, serializedGrid)

        Parameters:
            serializedGrid: std::string const &


        1
        """
        return _pysgpp_swig.PDESolver_setGrid(self, *args)

    def getGrid(self):
        """
        getGrid(self) -> std::string

        Parameters:
            self: sg::pde::PDESolver const *


        1
        """
        return _pysgpp_swig.PDESolver_getGrid(self)

    def deleteGrid(self):
        """
        deleteGrid(self)

        Parameters:
            self: sg::pde::PDESolver *


        1
        """
        return _pysgpp_swig.PDESolver_deleteGrid(self)

    def refineInitialGridSurplus(self, *args):
        """
        refineInitialGridSurplus(self, alpha, numRefinePoints, dThreshold)

        Parameters:
            alpha: sg::base::DataVector &
            numRefinePoints: int
            dThreshold: sg::float_t


        1
        """
        return _pysgpp_swig.PDESolver_refineInitialGridSurplus(self, *args)

    def refineInitialGridSurplusToMaxLevel(self, *args):
        """
        refineInitialGridSurplusToMaxLevel(self, alpha, dThreshold, maxLevel)

        Parameters:
            alpha: sg::base::DataVector &
            dThreshold: sg::float_t
            maxLevel: sg::base::GridStorage::index_type::level_type


        1
        """
        return _pysgpp_swig.PDESolver_refineInitialGridSurplusToMaxLevel(self, *args)

    def refineInitialGridSurplusSubDomain(self, *args):
        """
        refineInitialGridSurplusSubDomain(self, alpha, numRefinePoints, dThreshold, norm_mu, norm_sigma)

        Parameters:
            alpha: sg::base::DataVector &
            numRefinePoints: int
            dThreshold: sg::float_t
            norm_mu: std::vector< sg::float_t,std::allocator< sg::float_t > > &
            norm_sigma: std::vector< sg::float_t,std::allocator< sg::float_t > > &


        1
        """
        return _pysgpp_swig.PDESolver_refineInitialGridSurplusSubDomain(self, *args)

    def refineInitialGridSurplusToMaxLevelSubDomain(self, *args):
        """
        refineInitialGridSurplusToMaxLevelSubDomain(self, alpha, dThreshold, maxLevel, norm_mu, norm_sigma)

        Parameters:
            alpha: sg::base::DataVector &
            dThreshold: sg::float_t
            maxLevel: sg::base::GridStorage::index_type::level_type
            norm_mu: std::vector< sg::float_t,std::allocator< sg::float_t > > &
            norm_sigma: std::vector< sg::float_t,std::allocator< sg::float_t > > &


        1
        """
        return _pysgpp_swig.PDESolver_refineInitialGridSurplusToMaxLevelSubDomain(self, *args)

    def coarsenInitialGridSurplus(self, *args):
        """
        coarsenInitialGridSurplus(self, alpha, dThreshold)

        Parameters:
            alpha: sg::base::DataVector &
            dThreshold: sg::float_t


        1
        """
        return _pysgpp_swig.PDESolver_coarsenInitialGridSurplus(self, *args)

    def evaluatePoint(self, *args):
        """
        evaluatePoint(self, evalPoint, alpha) -> sg::float_t

        Parameters:
            evalPoint: std::vector< sg::float_t,std::allocator< sg::float_t > > &
            alpha: sg::base::DataVector &


        1
        """
        return _pysgpp_swig.PDESolver_evaluatePoint(self, *args)

    def evaluateCuboid(self, *args):
        """
        evaluateCuboid(self, alpha, FunctionValues, EvaluationPoints)

        Parameters:
            alpha: sg::base::DataVector &
            FunctionValues: sg::base::DataVector &
            EvaluationPoints: sg::base::DataMatrix &


        1
        """
        return _pysgpp_swig.PDESolver_evaluateCuboid(self, *args)

    def printLevelIndexGrid(self, *args):
        """
        printLevelIndexGrid(self, tfilename)

        Parameters:
            tfilename: std::string


        1
        """
        return _pysgpp_swig.PDESolver_printLevelIndexGrid(self, *args)

    def printGrid(self, *args):
        """
        printGrid(self, alpha, PointesPerDimension, tfilename)

        Parameters:
            alpha: sg::base::DataVector &
            PointesPerDimension: sg::float_t
            tfilename: std::string


        1
        """
        return _pysgpp_swig.PDESolver_printGrid(self, *args)

    def printGridDomain(self, *args):
        """
        printGridDomain(self, alpha, PointesPerDimension, GridArea, tfilename)

        Parameters:
            alpha: sg::base::DataVector &
            PointesPerDimension: sg::float_t
            GridArea: sg::base::BoundingBox &
            tfilename: std::string


        1
        """
        return _pysgpp_swig.PDESolver_printGridDomain(self, *args)

    def printSparseGrid(self, *args):
        """
        printSparseGrid(self, alpha, tfilename, bSurplus)

        Parameters:
            alpha: sg::base::DataVector &
            tfilename: std::string
            bSurplus: bool


        1
        """
        return _pysgpp_swig.PDESolver_printSparseGrid(self, *args)

    def printSparseGridExpTransform(self, *args):
        """
        printSparseGridExpTransform(self, alpha, tfilename, bSurplus)

        Parameters:
            alpha: sg::base::DataVector &
            tfilename: std::string
            bSurplus: bool


        1
        """
        return _pysgpp_swig.PDESolver_printSparseGridExpTransform(self, *args)

    def getNumberGridPoints(self):
        """
        getNumberGridPoints(self) -> size_t

        Parameters:
            self: sg::pde::PDESolver const *


        1
        """
        return _pysgpp_swig.PDESolver_getNumberGridPoints(self)

    def getNumberInnerGridPoints(self):
        """
        getNumberInnerGridPoints(self) -> size_t

        Parameters:
            self: sg::pde::PDESolver const *


        1
        """
        return _pysgpp_swig.PDESolver_getNumberInnerGridPoints(self)

    def getNumberDimensions(self):
        """
        getNumberDimensions(self) -> size_t

        Parameters:
            self: sg::pde::PDESolver const *


        1
        """
        return _pysgpp_swig.PDESolver_getNumberDimensions(self)

PDESolver_swigregister = _pysgpp_swig.PDESolver_swigregister
PDESolver_swigregister(PDESolver)

class ParabolicPDESolver(PDESolver):
    """1"""
    __swig_setmethods__ = {}
    for _s in [PDESolver]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ParabolicPDESolver, name, value)
    __swig_getmethods__ = {}
    for _s in [PDESolver]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ParabolicPDESolver, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pysgpp_swig.delete_ParabolicPDESolver
    __del__ = lambda self : None;
    def solveImplicitEuler(self, *args):
        """
        solveImplicitEuler(self, numTimesteps, timestepsize, maxCGIterations, epsilonCG, alpha, verbose=False, generateAnimation=False, 
            numEvalsAnimation=20)

        Parameters:
            numTimesteps: size_t
            timestepsize: sg::float_t
            maxCGIterations: size_t
            epsilonCG: sg::float_t
            alpha: sg::base::DataVector &
            verbose: bool
            generateAnimation: bool
            numEvalsAnimation: size_t

        solveImplicitEuler(self, numTimesteps, timestepsize, maxCGIterations, epsilonCG, alpha, verbose=False, generateAnimation=False)

        Parameters:
            numTimesteps: size_t
            timestepsize: sg::float_t
            maxCGIterations: size_t
            epsilonCG: sg::float_t
            alpha: sg::base::DataVector &
            verbose: bool
            generateAnimation: bool

        solveImplicitEuler(self, numTimesteps, timestepsize, maxCGIterations, epsilonCG, alpha, verbose=False)

        Parameters:
            numTimesteps: size_t
            timestepsize: sg::float_t
            maxCGIterations: size_t
            epsilonCG: sg::float_t
            alpha: sg::base::DataVector &
            verbose: bool

        solveImplicitEuler(self, numTimesteps, timestepsize, maxCGIterations, epsilonCG, alpha)

        Parameters:
            numTimesteps: size_t
            timestepsize: sg::float_t
            maxCGIterations: size_t
            epsilonCG: sg::float_t
            alpha: sg::base::DataVector &


        1
        """
        return _pysgpp_swig.ParabolicPDESolver_solveImplicitEuler(self, *args)

    def solveExplicitEuler(self, *args):
        """
        solveExplicitEuler(self, numTimesteps, timestepsize, maxCGIterations, epsilonCG, alpha, verbose=False, generateAnimation=False, 
            numEvalsAnimation=20)

        Parameters:
            numTimesteps: size_t
            timestepsize: sg::float_t
            maxCGIterations: size_t
            epsilonCG: sg::float_t
            alpha: sg::base::DataVector &
            verbose: bool
            generateAnimation: bool
            numEvalsAnimation: size_t

        solveExplicitEuler(self, numTimesteps, timestepsize, maxCGIterations, epsilonCG, alpha, verbose=False, generateAnimation=False)

        Parameters:
            numTimesteps: size_t
            timestepsize: sg::float_t
            maxCGIterations: size_t
            epsilonCG: sg::float_t
            alpha: sg::base::DataVector &
            verbose: bool
            generateAnimation: bool

        solveExplicitEuler(self, numTimesteps, timestepsize, maxCGIterations, epsilonCG, alpha, verbose=False)

        Parameters:
            numTimesteps: size_t
            timestepsize: sg::float_t
            maxCGIterations: size_t
            epsilonCG: sg::float_t
            alpha: sg::base::DataVector &
            verbose: bool

        solveExplicitEuler(self, numTimesteps, timestepsize, maxCGIterations, epsilonCG, alpha)

        Parameters:
            numTimesteps: size_t
            timestepsize: sg::float_t
            maxCGIterations: size_t
            epsilonCG: sg::float_t
            alpha: sg::base::DataVector &


        1
        """
        return _pysgpp_swig.ParabolicPDESolver_solveExplicitEuler(self, *args)

    def solveCrankNicolson(self, *args):
        """
        solveCrankNicolson(self, numTimesteps, timestepsize, maxCGIterations, epsilonCG, alpha, NumImEul=0)

        Parameters:
            numTimesteps: size_t
            timestepsize: sg::float_t
            maxCGIterations: size_t
            epsilonCG: sg::float_t
            alpha: sg::base::DataVector &
            NumImEul: size_t

        solveCrankNicolson(self, numTimesteps, timestepsize, maxCGIterations, epsilonCG, alpha)

        Parameters:
            numTimesteps: size_t
            timestepsize: sg::float_t
            maxCGIterations: size_t
            epsilonCG: sg::float_t
            alpha: sg::base::DataVector &


        1
        """
        return _pysgpp_swig.ParabolicPDESolver_solveCrankNicolson(self, *args)

ParabolicPDESolver_swigregister = _pysgpp_swig.ParabolicPDESolver_swigregister
ParabolicPDESolver_swigregister(ParabolicPDESolver)

class HeatEquationSolver(ParabolicPDESolver):
    """1"""
    __swig_setmethods__ = {}
    for _s in [ParabolicPDESolver]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HeatEquationSolver, name, value)
    __swig_getmethods__ = {}
    for _s in [ParabolicPDESolver]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, HeatEquationSolver, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """
        __init__(self) -> HeatEquationSolver

        1
        """
        this = _pysgpp_swig.new_HeatEquationSolver()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_HeatEquationSolver
    __del__ = lambda self : None;
    def solveExplicitEuler(self, *args):
        """
        solveExplicitEuler(self, numTimesteps, timestepsize, maxCGIterations, epsilonCG, alpha, verbose=False, generateAnimation=False, 
            numEvalsAnimation=20)

        Parameters:
            numTimesteps: size_t
            timestepsize: sg::float_t
            maxCGIterations: size_t
            epsilonCG: sg::float_t
            alpha: sg::base::DataVector &
            verbose: bool
            generateAnimation: bool
            numEvalsAnimation: size_t

        solveExplicitEuler(self, numTimesteps, timestepsize, maxCGIterations, epsilonCG, alpha, verbose=False, generateAnimation=False)

        Parameters:
            numTimesteps: size_t
            timestepsize: sg::float_t
            maxCGIterations: size_t
            epsilonCG: sg::float_t
            alpha: sg::base::DataVector &
            verbose: bool
            generateAnimation: bool

        solveExplicitEuler(self, numTimesteps, timestepsize, maxCGIterations, epsilonCG, alpha, verbose=False)

        Parameters:
            numTimesteps: size_t
            timestepsize: sg::float_t
            maxCGIterations: size_t
            epsilonCG: sg::float_t
            alpha: sg::base::DataVector &
            verbose: bool

        solveExplicitEuler(self, numTimesteps, timestepsize, maxCGIterations, epsilonCG, alpha)

        Parameters:
            numTimesteps: size_t
            timestepsize: sg::float_t
            maxCGIterations: size_t
            epsilonCG: sg::float_t
            alpha: sg::base::DataVector &


        1
        """
        return _pysgpp_swig.HeatEquationSolver_solveExplicitEuler(self, *args)

    def solveImplicitEuler(self, *args):
        """
        solveImplicitEuler(self, numTimesteps, timestepsize, maxCGIterations, epsilonCG, alpha, verbose=False, generateAnimation=False, 
            numEvalsAnimation=20)

        Parameters:
            numTimesteps: size_t
            timestepsize: sg::float_t
            maxCGIterations: size_t
            epsilonCG: sg::float_t
            alpha: sg::base::DataVector &
            verbose: bool
            generateAnimation: bool
            numEvalsAnimation: size_t

        solveImplicitEuler(self, numTimesteps, timestepsize, maxCGIterations, epsilonCG, alpha, verbose=False, generateAnimation=False)

        Parameters:
            numTimesteps: size_t
            timestepsize: sg::float_t
            maxCGIterations: size_t
            epsilonCG: sg::float_t
            alpha: sg::base::DataVector &
            verbose: bool
            generateAnimation: bool

        solveImplicitEuler(self, numTimesteps, timestepsize, maxCGIterations, epsilonCG, alpha, verbose=False)

        Parameters:
            numTimesteps: size_t
            timestepsize: sg::float_t
            maxCGIterations: size_t
            epsilonCG: sg::float_t
            alpha: sg::base::DataVector &
            verbose: bool

        solveImplicitEuler(self, numTimesteps, timestepsize, maxCGIterations, epsilonCG, alpha)

        Parameters:
            numTimesteps: size_t
            timestepsize: sg::float_t
            maxCGIterations: size_t
            epsilonCG: sg::float_t
            alpha: sg::base::DataVector &


        1
        """
        return _pysgpp_swig.HeatEquationSolver_solveImplicitEuler(self, *args)

    def solveCrankNicolson(self, *args):
        """
        solveCrankNicolson(self, numTimesteps, timestepsize, maxCGIterations, epsilonCG, alpha, NumImEul=0)

        Parameters:
            numTimesteps: size_t
            timestepsize: sg::float_t
            maxCGIterations: size_t
            epsilonCG: sg::float_t
            alpha: sg::base::DataVector &
            NumImEul: size_t

        solveCrankNicolson(self, numTimesteps, timestepsize, maxCGIterations, epsilonCG, alpha)

        Parameters:
            numTimesteps: size_t
            timestepsize: sg::float_t
            maxCGIterations: size_t
            epsilonCG: sg::float_t
            alpha: sg::base::DataVector &


        1
        """
        return _pysgpp_swig.HeatEquationSolver_solveCrankNicolson(self, *args)

    def setHeatCoefficient(self, *args):
        """
        setHeatCoefficient(self, a)

        Parameters:
            a: sg::float_t


        1
        """
        return _pysgpp_swig.HeatEquationSolver_setHeatCoefficient(self, *args)

    def initGridWithSmoothHeat(self, *args):
        """
        initGridWithSmoothHeat(self, alpha, mu, sigma, factor)

        Parameters:
            alpha: sg::base::DataVector &
            mu: sg::float_t
            sigma: sg::float_t
            factor: sg::float_t


        1
        """
        return _pysgpp_swig.HeatEquationSolver_initGridWithSmoothHeat(self, *args)

    def initScreen(self):
        """
        initScreen(self)

        Parameters:
            self: sg::pde::HeatEquationSolver *


        1
        """
        return _pysgpp_swig.HeatEquationSolver_initScreen(self)

    def storeInnerRHS(self, *args):
        """
        storeInnerRHS(self, alpha, tFilename, timestepsize)

        Parameters:
            alpha: sg::base::DataVector &
            tFilename: std::string
            timestepsize: sg::float_t


        1
        """
        return _pysgpp_swig.HeatEquationSolver_storeInnerRHS(self, *args)

    def storeInnerSolution(self, *args):
        """
        storeInnerSolution(self, alpha, numTimesteps, timestepsize, maxCGIterations, epsilonCG, tFilename)

        Parameters:
            alpha: sg::base::DataVector &
            numTimesteps: size_t
            timestepsize: sg::float_t
            maxCGIterations: size_t
            epsilonCG: sg::float_t
            tFilename: std::string


        1
        """
        return _pysgpp_swig.HeatEquationSolver_storeInnerSolution(self, *args)

HeatEquationSolver_swigregister = _pysgpp_swig.HeatEquationSolver_swigregister
HeatEquationSolver_swigregister(HeatEquationSolver)

class HeatEquationSolverWithStretching(ParabolicPDESolver):
    """1"""
    __swig_setmethods__ = {}
    for _s in [ParabolicPDESolver]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HeatEquationSolverWithStretching, name, value)
    __swig_getmethods__ = {}
    for _s in [ParabolicPDESolver]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, HeatEquationSolverWithStretching, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """
        __init__(self) -> HeatEquationSolverWithStretching

        1
        """
        this = _pysgpp_swig.new_HeatEquationSolverWithStretching()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_HeatEquationSolverWithStretching
    __del__ = lambda self : None;
    def constructGrid(self, *args):
        """
        constructGrid(self, myStretching, level)

        Parameters:
            myStretching: sg::base::Stretching &
            level: int

        constructGrid(self, myStretching, level)

        Parameters:
            myStretching: sg::base::BoundingBox &
            level: int


        1
        """
        return _pysgpp_swig.HeatEquationSolverWithStretching_constructGrid(self, *args)

    def solveExplicitEuler(self, *args):
        """
        solveExplicitEuler(self, numTimesteps, timestepsize, maxCGIterations, epsilonCG, alpha, verbose=False, generateAnimation=False, 
            numEvalsAnimation=20)

        Parameters:
            numTimesteps: size_t
            timestepsize: sg::float_t
            maxCGIterations: size_t
            epsilonCG: sg::float_t
            alpha: sg::base::DataVector &
            verbose: bool
            generateAnimation: bool
            numEvalsAnimation: size_t

        solveExplicitEuler(self, numTimesteps, timestepsize, maxCGIterations, epsilonCG, alpha, verbose=False, generateAnimation=False)

        Parameters:
            numTimesteps: size_t
            timestepsize: sg::float_t
            maxCGIterations: size_t
            epsilonCG: sg::float_t
            alpha: sg::base::DataVector &
            verbose: bool
            generateAnimation: bool

        solveExplicitEuler(self, numTimesteps, timestepsize, maxCGIterations, epsilonCG, alpha, verbose=False)

        Parameters:
            numTimesteps: size_t
            timestepsize: sg::float_t
            maxCGIterations: size_t
            epsilonCG: sg::float_t
            alpha: sg::base::DataVector &
            verbose: bool

        solveExplicitEuler(self, numTimesteps, timestepsize, maxCGIterations, epsilonCG, alpha)

        Parameters:
            numTimesteps: size_t
            timestepsize: sg::float_t
            maxCGIterations: size_t
            epsilonCG: sg::float_t
            alpha: sg::base::DataVector &


        1
        """
        return _pysgpp_swig.HeatEquationSolverWithStretching_solveExplicitEuler(self, *args)

    def solveImplicitEuler(self, *args):
        """
        solveImplicitEuler(self, numTimesteps, timestepsize, maxCGIterations, epsilonCG, alpha, verbose=False, generateAnimation=False, 
            numEvalsAnimation=20)

        Parameters:
            numTimesteps: size_t
            timestepsize: sg::float_t
            maxCGIterations: size_t
            epsilonCG: sg::float_t
            alpha: sg::base::DataVector &
            verbose: bool
            generateAnimation: bool
            numEvalsAnimation: size_t

        solveImplicitEuler(self, numTimesteps, timestepsize, maxCGIterations, epsilonCG, alpha, verbose=False, generateAnimation=False)

        Parameters:
            numTimesteps: size_t
            timestepsize: sg::float_t
            maxCGIterations: size_t
            epsilonCG: sg::float_t
            alpha: sg::base::DataVector &
            verbose: bool
            generateAnimation: bool

        solveImplicitEuler(self, numTimesteps, timestepsize, maxCGIterations, epsilonCG, alpha, verbose=False)

        Parameters:
            numTimesteps: size_t
            timestepsize: sg::float_t
            maxCGIterations: size_t
            epsilonCG: sg::float_t
            alpha: sg::base::DataVector &
            verbose: bool

        solveImplicitEuler(self, numTimesteps, timestepsize, maxCGIterations, epsilonCG, alpha)

        Parameters:
            numTimesteps: size_t
            timestepsize: sg::float_t
            maxCGIterations: size_t
            epsilonCG: sg::float_t
            alpha: sg::base::DataVector &


        1
        """
        return _pysgpp_swig.HeatEquationSolverWithStretching_solveImplicitEuler(self, *args)

    def solveCrankNicolson(self, *args):
        """
        solveCrankNicolson(self, numTimesteps, timestepsize, maxCGIterations, epsilonCG, alpha, NumImEul=0)

        Parameters:
            numTimesteps: size_t
            timestepsize: sg::float_t
            maxCGIterations: size_t
            epsilonCG: sg::float_t
            alpha: sg::base::DataVector &
            NumImEul: size_t

        solveCrankNicolson(self, numTimesteps, timestepsize, maxCGIterations, epsilonCG, alpha)

        Parameters:
            numTimesteps: size_t
            timestepsize: sg::float_t
            maxCGIterations: size_t
            epsilonCG: sg::float_t
            alpha: sg::base::DataVector &


        1
        """
        return _pysgpp_swig.HeatEquationSolverWithStretching_solveCrankNicolson(self, *args)

    def setHeatCoefficient(self, *args):
        """
        setHeatCoefficient(self, a)

        Parameters:
            a: sg::float_t


        1
        """
        return _pysgpp_swig.HeatEquationSolverWithStretching_setHeatCoefficient(self, *args)

    def initGridWithSmoothHeat(self, *args):
        """
        initGridWithSmoothHeat(self, alpha, mu, sigma, factor)

        Parameters:
            alpha: sg::base::DataVector &
            mu: sg::float_t
            sigma: sg::float_t
            factor: sg::float_t


        1
        """
        return _pysgpp_swig.HeatEquationSolverWithStretching_initGridWithSmoothHeat(self, *args)

    def initScreen(self):
        """
        initScreen(self)

        Parameters:
            self: sg::pde::HeatEquationSolverWithStretching *


        1
        """
        return _pysgpp_swig.HeatEquationSolverWithStretching_initScreen(self)

    def printGridDomainStretching(self, *args):
        """
        printGridDomainStretching(self, alpha, PointesPerDimension, GridArea, tfilename)

        Parameters:
            alpha: sg::base::DataVector &
            PointesPerDimension: sg::float_t
            GridArea: sg::base::Stretching &
            tfilename: std::string


        1
        """
        return _pysgpp_swig.HeatEquationSolverWithStretching_printGridDomainStretching(self, *args)

HeatEquationSolverWithStretching_swigregister = _pysgpp_swig.HeatEquationSolverWithStretching_swigregister
HeatEquationSolverWithStretching_swigregister(HeatEquationSolverWithStretching)

class EllipticPDESolver(PDESolver):
    """1"""
    __swig_setmethods__ = {}
    for _s in [PDESolver]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EllipticPDESolver, name, value)
    __swig_getmethods__ = {}
    for _s in [PDESolver]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, EllipticPDESolver, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pysgpp_swig.delete_EllipticPDESolver
    __del__ = lambda self : None;
    def solvePDE(self, *args):
        """
        solvePDE(self, alpha, rhs, maxCGIterations, epsilonCG, verbose=False)

        Parameters:
            alpha: sg::base::DataVector &
            rhs: sg::base::DataVector &
            maxCGIterations: size_t
            epsilonCG: sg::float_t
            verbose: bool

        solvePDE(self, alpha, rhs, maxCGIterations, epsilonCG)

        Parameters:
            alpha: sg::base::DataVector &
            rhs: sg::base::DataVector &
            maxCGIterations: size_t
            epsilonCG: sg::float_t


        1
        """
        return _pysgpp_swig.EllipticPDESolver_solvePDE(self, *args)

EllipticPDESolver_swigregister = _pysgpp_swig.EllipticPDESolver_swigregister
EllipticPDESolver_swigregister(EllipticPDESolver)

class PoissonEquationSolver(EllipticPDESolver):
    """1"""
    __swig_setmethods__ = {}
    for _s in [EllipticPDESolver]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PoissonEquationSolver, name, value)
    __swig_getmethods__ = {}
    for _s in [EllipticPDESolver]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PoissonEquationSolver, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """
        __init__(self) -> PoissonEquationSolver

        1
        """
        this = _pysgpp_swig.new_PoissonEquationSolver()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_PoissonEquationSolver
    __del__ = lambda self : None;
    def solvePDE(self, *args):
        """
        solvePDE(self, alpha, rhs, maxCGIterations, epsilonCG, verbose=False)

        Parameters:
            alpha: sg::base::DataVector &
            rhs: sg::base::DataVector &
            maxCGIterations: size_t
            epsilonCG: sg::float_t
            verbose: bool

        solvePDE(self, alpha, rhs, maxCGIterations, epsilonCG)

        Parameters:
            alpha: sg::base::DataVector &
            rhs: sg::base::DataVector &
            maxCGIterations: size_t
            epsilonCG: sg::float_t


        1
        """
        return _pysgpp_swig.PoissonEquationSolver_solvePDE(self, *args)

    def initGridWithSmoothHeat(self, *args):
        """
        initGridWithSmoothHeat(self, alpha, mu, sigma, factor)

        Parameters:
            alpha: sg::base::DataVector &
            mu: sg::float_t
            sigma: sg::float_t
            factor: sg::float_t


        1
        """
        return _pysgpp_swig.PoissonEquationSolver_initGridWithSmoothHeat(self, *args)

    def initGridWithSmoothHeatFullDomain(self, *args):
        """
        initGridWithSmoothHeatFullDomain(self, alpha, mu, sigma, factor)

        Parameters:
            alpha: sg::base::DataVector &
            mu: sg::float_t
            sigma: sg::float_t
            factor: sg::float_t


        1
        """
        return _pysgpp_swig.PoissonEquationSolver_initGridWithSmoothHeatFullDomain(self, *args)

    def initGridWithExpHeat(self, *args):
        """
        initGridWithExpHeat(self, alpha, factor=1.0)

        Parameters:
            alpha: sg::base::DataVector &
            factor: sg::float_t

        initGridWithExpHeat(self, alpha)

        Parameters:
            alpha: sg::base::DataVector &


        1
        """
        return _pysgpp_swig.PoissonEquationSolver_initGridWithExpHeat(self, *args)

    def initGridWithExpHeatFullDomain(self, *args):
        """
        initGridWithExpHeatFullDomain(self, alpha, factor=1.0)

        Parameters:
            alpha: sg::base::DataVector &
            factor: sg::float_t

        initGridWithExpHeatFullDomain(self, alpha)

        Parameters:
            alpha: sg::base::DataVector &


        1
        """
        return _pysgpp_swig.PoissonEquationSolver_initGridWithExpHeatFullDomain(self, *args)

    def storeInnerRHS(self, *args):
        """
        storeInnerRHS(self, alpha, tFilename)

        Parameters:
            alpha: sg::base::DataVector &
            tFilename: std::string


        1
        """
        return _pysgpp_swig.PoissonEquationSolver_storeInnerRHS(self, *args)

    def storeInnerSolution(self, *args):
        """
        storeInnerSolution(self, alpha, maxCGIterations, epsilonCG, tFilename)

        Parameters:
            alpha: sg::base::DataVector &
            maxCGIterations: size_t
            epsilonCG: sg::float_t
            tFilename: std::string


        1
        """
        return _pysgpp_swig.PoissonEquationSolver_storeInnerSolution(self, *args)

    def initScreen(self):
        """
        initScreen(self)

        Parameters:
            self: sg::pde::PoissonEquationSolver *


        1
        """
        return _pysgpp_swig.PoissonEquationSolver_initScreen(self)

PoissonEquationSolver_swigregister = _pysgpp_swig.PoissonEquationSolver_swigregister
PoissonEquationSolver_swigregister(PoissonEquationSolver)

class OperationParabolicPDESolverSystemFreeBoundaries(OperationParabolicPDESolverSystem):
    """1"""
    __swig_setmethods__ = {}
    for _s in [OperationParabolicPDESolverSystem]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OperationParabolicPDESolverSystemFreeBoundaries, name, value)
    __swig_getmethods__ = {}
    for _s in [OperationParabolicPDESolverSystem]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OperationParabolicPDESolverSystemFreeBoundaries, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pysgpp_swig.delete_OperationParabolicPDESolverSystemFreeBoundaries
    __del__ = lambda self : None;
OperationParabolicPDESolverSystemFreeBoundaries_swigregister = _pysgpp_swig.OperationParabolicPDESolverSystemFreeBoundaries_swigregister
OperationParabolicPDESolverSystemFreeBoundaries_swigregister(OperationParabolicPDESolverSystemFreeBoundaries)


def createOperationLaplace(*args):
  """
    createOperationLaplace(grid) -> OperationMatrix

    Parameters:
        grid: sg::base::Grid &

    createOperationLaplace(grid, coef) -> OperationMatrix

    Parameters:
        grid: sg::base::Grid &
        coef: sg::base::DataVector &


    1
    """
  return _pysgpp_swig.createOperationLaplace(*args)

def createOperationLTwoDotProduct(*args):
  """
    createOperationLTwoDotProduct(grid) -> OperationMatrix

    Parameters:
        grid: sg::base::Grid &


    1
    """
  return _pysgpp_swig.createOperationLTwoDotProduct(*args)

def createOperationLTwoDotExplicit(*args):
  """
    createOperationLTwoDotExplicit(grid) -> OperationMatrix

    Parameters:
        grid: sg::base::Grid &

    createOperationLTwoDotExplicit(m, grid) -> OperationMatrix

    Parameters:
        m: sg::base::DataMatrix *
        grid: sg::base::Grid &


    1
    """
  return _pysgpp_swig.createOperationLTwoDotExplicit(*args)

def createOperationLaplaceEnhanced(*args):
  """
    createOperationLaplaceEnhanced(grid) -> OperationMatrix

    Parameters:
        grid: sg::base::Grid &

    createOperationLaplaceEnhanced(grid, coef) -> OperationMatrix

    Parameters:
        grid: sg::base::Grid &
        coef: sg::base::DataVector &


    1
    """
  return _pysgpp_swig.createOperationLaplaceEnhanced(*args)
class OperationMatrixLTwoDotExplicitPeriodic(OperationMatrix):
    """1"""
    __swig_setmethods__ = {}
    for _s in [OperationMatrix]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OperationMatrixLTwoDotExplicitPeriodic, name, value)
    __swig_getmethods__ = {}
    for _s in [OperationMatrix]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OperationMatrixLTwoDotExplicitPeriodic, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, m, grid) -> OperationMatrixLTwoDotExplicitPeriodic

        Parameters:
            m: sg::base::DataMatrix *
            grid: sg::base::Grid *

        __init__(self, grid) -> OperationMatrixLTwoDotExplicitPeriodic

        Parameters:
            grid: sg::base::Grid *


        1
        """
        this = _pysgpp_swig.new_OperationMatrixLTwoDotExplicitPeriodic(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OperationMatrixLTwoDotExplicitPeriodic
    __del__ = lambda self : None;
OperationMatrixLTwoDotExplicitPeriodic_swigregister = _pysgpp_swig.OperationMatrixLTwoDotExplicitPeriodic_swigregister
OperationMatrixLTwoDotExplicitPeriodic_swigregister(OperationMatrixLTwoDotExplicitPeriodic)

class OperationMatrixLTwoDotPeriodic(OperationMatrix):
    """1"""
    __swig_setmethods__ = {}
    for _s in [OperationMatrix]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OperationMatrixLTwoDotPeriodic, name, value)
    __swig_getmethods__ = {}
    for _s in [OperationMatrix]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OperationMatrixLTwoDotPeriodic, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, gridStorage) -> OperationMatrixLTwoDotPeriodic

        Parameters:
            gridStorage: sg::base::GridStorage *


        1
        """
        this = _pysgpp_swig.new_OperationMatrixLTwoDotPeriodic(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OperationMatrixLTwoDotPeriodic
    __del__ = lambda self : None;
OperationMatrixLTwoDotPeriodic_swigregister = _pysgpp_swig.OperationMatrixLTwoDotPeriodic_swigregister
OperationMatrixLTwoDotPeriodic_swigregister(OperationMatrixLTwoDotPeriodic)

Identity = _pysgpp_swig.Identity
Laplace = _pysgpp_swig.Laplace
class RegularizationConfiguration(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RegularizationConfiguration, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RegularizationConfiguration, name)
    __repr__ = _swig_repr
    __swig_setmethods__["regType_"] = _pysgpp_swig.RegularizationConfiguration_regType__set
    __swig_getmethods__["regType_"] = _pysgpp_swig.RegularizationConfiguration_regType__get
    if _newclass:regType_ = _swig_property(_pysgpp_swig.RegularizationConfiguration_regType__get, _pysgpp_swig.RegularizationConfiguration_regType__set)
    def __init__(self): 
        """
        __init__(self) -> RegularizationConfiguration

        1
        """
        this = _pysgpp_swig.new_RegularizationConfiguration()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_RegularizationConfiguration
    __del__ = lambda self : None;
RegularizationConfiguration_swigregister = _pysgpp_swig.RegularizationConfiguration_swigregister
RegularizationConfiguration_swigregister(RegularizationConfiguration)

class BlackScholesParabolicPDESolverSystem(OperationParabolicPDESolverSystemFreeBoundaries):
    """1"""
    __swig_setmethods__ = {}
    for _s in [OperationParabolicPDESolverSystemFreeBoundaries]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BlackScholesParabolicPDESolverSystem, name, value)
    __swig_getmethods__ = {}
    for _s in [OperationParabolicPDESolverSystemFreeBoundaries]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, BlackScholesParabolicPDESolverSystem, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, SparseGrid, alpha, mu, sigma, rho, r, TimestepSize, OperationMode, dStrike, option_type, 
            bLogTransform=False, useCoarsen=False, coarsenThreshold=0.0, adaptSolveMode="none", 
            numCoarsenPoints=-1, refineThreshold=0.0, refineMode="classic", 
            refineMaxLevel=0) -> BlackScholesParabolicPDESolverSystem

        Parameters:
            SparseGrid: sg::base::Grid &
            alpha: sg::base::DataVector &
            mu: sg::base::DataVector &
            sigma: sg::base::DataVector &
            rho: sg::base::DataMatrix &
            r: sg::float_t
            TimestepSize: sg::float_t
            OperationMode: std::string
            dStrike: sg::float_t
            option_type: std::string
            bLogTransform: bool
            useCoarsen: bool
            coarsenThreshold: sg::float_t
            adaptSolveMode: std::string
            numCoarsenPoints: int
            refineThreshold: sg::float_t
            refineMode: std::string
            refineMaxLevel: sg::base::GridIndex::level_type

        __init__(self, SparseGrid, alpha, mu, sigma, rho, r, TimestepSize, OperationMode, dStrike, option_type, 
            bLogTransform=False, useCoarsen=False, coarsenThreshold=0.0, adaptSolveMode="none", 
            numCoarsenPoints=-1, refineThreshold=0.0, refineMode="classic") -> BlackScholesParabolicPDESolverSystem

        Parameters:
            SparseGrid: sg::base::Grid &
            alpha: sg::base::DataVector &
            mu: sg::base::DataVector &
            sigma: sg::base::DataVector &
            rho: sg::base::DataMatrix &
            r: sg::float_t
            TimestepSize: sg::float_t
            OperationMode: std::string
            dStrike: sg::float_t
            option_type: std::string
            bLogTransform: bool
            useCoarsen: bool
            coarsenThreshold: sg::float_t
            adaptSolveMode: std::string
            numCoarsenPoints: int
            refineThreshold: sg::float_t
            refineMode: std::string

        __init__(self, SparseGrid, alpha, mu, sigma, rho, r, TimestepSize, OperationMode, dStrike, option_type, 
            bLogTransform=False, useCoarsen=False, coarsenThreshold=0.0, adaptSolveMode="none", 
            numCoarsenPoints=-1, refineThreshold=0.0) -> BlackScholesParabolicPDESolverSystem

        Parameters:
            SparseGrid: sg::base::Grid &
            alpha: sg::base::DataVector &
            mu: sg::base::DataVector &
            sigma: sg::base::DataVector &
            rho: sg::base::DataMatrix &
            r: sg::float_t
            TimestepSize: sg::float_t
            OperationMode: std::string
            dStrike: sg::float_t
            option_type: std::string
            bLogTransform: bool
            useCoarsen: bool
            coarsenThreshold: sg::float_t
            adaptSolveMode: std::string
            numCoarsenPoints: int
            refineThreshold: sg::float_t

        __init__(self, SparseGrid, alpha, mu, sigma, rho, r, TimestepSize, OperationMode, dStrike, option_type, 
            bLogTransform=False, useCoarsen=False, coarsenThreshold=0.0, adaptSolveMode="none", 
            numCoarsenPoints=-1) -> BlackScholesParabolicPDESolverSystem

        Parameters:
            SparseGrid: sg::base::Grid &
            alpha: sg::base::DataVector &
            mu: sg::base::DataVector &
            sigma: sg::base::DataVector &
            rho: sg::base::DataMatrix &
            r: sg::float_t
            TimestepSize: sg::float_t
            OperationMode: std::string
            dStrike: sg::float_t
            option_type: std::string
            bLogTransform: bool
            useCoarsen: bool
            coarsenThreshold: sg::float_t
            adaptSolveMode: std::string
            numCoarsenPoints: int

        __init__(self, SparseGrid, alpha, mu, sigma, rho, r, TimestepSize, OperationMode, dStrike, option_type, 
            bLogTransform=False, useCoarsen=False, coarsenThreshold=0.0, adaptSolveMode="none") -> BlackScholesParabolicPDESolverSystem

        Parameters:
            SparseGrid: sg::base::Grid &
            alpha: sg::base::DataVector &
            mu: sg::base::DataVector &
            sigma: sg::base::DataVector &
            rho: sg::base::DataMatrix &
            r: sg::float_t
            TimestepSize: sg::float_t
            OperationMode: std::string
            dStrike: sg::float_t
            option_type: std::string
            bLogTransform: bool
            useCoarsen: bool
            coarsenThreshold: sg::float_t
            adaptSolveMode: std::string

        __init__(self, SparseGrid, alpha, mu, sigma, rho, r, TimestepSize, OperationMode, dStrike, option_type, 
            bLogTransform=False, useCoarsen=False, coarsenThreshold=0.0) -> BlackScholesParabolicPDESolverSystem

        Parameters:
            SparseGrid: sg::base::Grid &
            alpha: sg::base::DataVector &
            mu: sg::base::DataVector &
            sigma: sg::base::DataVector &
            rho: sg::base::DataMatrix &
            r: sg::float_t
            TimestepSize: sg::float_t
            OperationMode: std::string
            dStrike: sg::float_t
            option_type: std::string
            bLogTransform: bool
            useCoarsen: bool
            coarsenThreshold: sg::float_t

        __init__(self, SparseGrid, alpha, mu, sigma, rho, r, TimestepSize, OperationMode, dStrike, option_type, 
            bLogTransform=False, useCoarsen=False) -> BlackScholesParabolicPDESolverSystem

        Parameters:
            SparseGrid: sg::base::Grid &
            alpha: sg::base::DataVector &
            mu: sg::base::DataVector &
            sigma: sg::base::DataVector &
            rho: sg::base::DataMatrix &
            r: sg::float_t
            TimestepSize: sg::float_t
            OperationMode: std::string
            dStrike: sg::float_t
            option_type: std::string
            bLogTransform: bool
            useCoarsen: bool

        __init__(self, SparseGrid, alpha, mu, sigma, rho, r, TimestepSize, OperationMode, dStrike, option_type, 
            bLogTransform=False) -> BlackScholesParabolicPDESolverSystem

        Parameters:
            SparseGrid: sg::base::Grid &
            alpha: sg::base::DataVector &
            mu: sg::base::DataVector &
            sigma: sg::base::DataVector &
            rho: sg::base::DataMatrix &
            r: sg::float_t
            TimestepSize: sg::float_t
            OperationMode: std::string
            dStrike: sg::float_t
            option_type: std::string
            bLogTransform: bool

        __init__(self, SparseGrid, alpha, mu, sigma, rho, r, TimestepSize, OperationMode, dStrike, option_type) -> BlackScholesParabolicPDESolverSystem

        Parameters:
            SparseGrid: sg::base::Grid &
            alpha: sg::base::DataVector &
            mu: sg::base::DataVector &
            sigma: sg::base::DataVector &
            rho: sg::base::DataMatrix &
            r: sg::float_t
            TimestepSize: sg::float_t
            OperationMode: std::string
            dStrike: sg::float_t
            option_type: std::string


        1
        """
        this = _pysgpp_swig.new_BlackScholesParabolicPDESolverSystem(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_BlackScholesParabolicPDESolverSystem
    __del__ = lambda self : None;
    def coarsenAndRefine(self, isLastTimestep=False):
        """
        coarsenAndRefine(self, isLastTimestep=False)

        Parameters:
            isLastTimestep: bool

        coarsenAndRefine(self)

        Parameters:
            self: sg::finance::BlackScholesParabolicPDESolverSystem *


        1
        """
        return _pysgpp_swig.BlackScholesParabolicPDESolverSystem_coarsenAndRefine(self, isLastTimestep)

BlackScholesParabolicPDESolverSystem_swigregister = _pysgpp_swig.BlackScholesParabolicPDESolverSystem_swigregister
BlackScholesParabolicPDESolverSystem_swigregister(BlackScholesParabolicPDESolverSystem)

HEDGE_EPS = _pysgpp_swig.HEDGE_EPS
HEDGE_WIDTH_PERCENT = _pysgpp_swig.HEDGE_WIDTH_PERCENT
HEDGE_POINTS_PER_DIM = _pysgpp_swig.HEDGE_POINTS_PER_DIM
class BlackScholesParabolicPDESolverSystemEuroAmer(OperationParabolicPDESolverSystemDirichlet):
    """1"""
    __swig_setmethods__ = {}
    for _s in [OperationParabolicPDESolverSystemDirichlet]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BlackScholesParabolicPDESolverSystemEuroAmer, name, value)
    __swig_getmethods__ = {}
    for _s in [OperationParabolicPDESolverSystemDirichlet]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, BlackScholesParabolicPDESolverSystemEuroAmer, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, SparseGrid, alpha, mu, sigma, rho, r, TimestepSize, OperationMode, dStrike, option_type, 
            bLogTransform=False, useCoarsen=False, coarsenThreshold=0.0, adaptSolveMode="none", 
            numCoarsenPoints=-1, refineThreshold=0.0, refineMode="classic", 
            refineMaxLevel=0) -> BlackScholesParabolicPDESolverSystemEuroAmer

        Parameters:
            SparseGrid: sg::base::Grid &
            alpha: sg::base::DataVector &
            mu: sg::base::DataVector &
            sigma: sg::base::DataVector &
            rho: sg::base::DataMatrix &
            r: sg::float_t
            TimestepSize: sg::float_t
            OperationMode: std::string
            dStrike: sg::float_t
            option_type: std::string
            bLogTransform: bool
            useCoarsen: bool
            coarsenThreshold: sg::float_t
            adaptSolveMode: std::string
            numCoarsenPoints: int
            refineThreshold: sg::float_t
            refineMode: std::string
            refineMaxLevel: sg::base::GridIndex::level_type

        __init__(self, SparseGrid, alpha, mu, sigma, rho, r, TimestepSize, OperationMode, dStrike, option_type, 
            bLogTransform=False, useCoarsen=False, coarsenThreshold=0.0, adaptSolveMode="none", 
            numCoarsenPoints=-1, refineThreshold=0.0, refineMode="classic") -> BlackScholesParabolicPDESolverSystemEuroAmer

        Parameters:
            SparseGrid: sg::base::Grid &
            alpha: sg::base::DataVector &
            mu: sg::base::DataVector &
            sigma: sg::base::DataVector &
            rho: sg::base::DataMatrix &
            r: sg::float_t
            TimestepSize: sg::float_t
            OperationMode: std::string
            dStrike: sg::float_t
            option_type: std::string
            bLogTransform: bool
            useCoarsen: bool
            coarsenThreshold: sg::float_t
            adaptSolveMode: std::string
            numCoarsenPoints: int
            refineThreshold: sg::float_t
            refineMode: std::string

        __init__(self, SparseGrid, alpha, mu, sigma, rho, r, TimestepSize, OperationMode, dStrike, option_type, 
            bLogTransform=False, useCoarsen=False, coarsenThreshold=0.0, adaptSolveMode="none", 
            numCoarsenPoints=-1, refineThreshold=0.0) -> BlackScholesParabolicPDESolverSystemEuroAmer

        Parameters:
            SparseGrid: sg::base::Grid &
            alpha: sg::base::DataVector &
            mu: sg::base::DataVector &
            sigma: sg::base::DataVector &
            rho: sg::base::DataMatrix &
            r: sg::float_t
            TimestepSize: sg::float_t
            OperationMode: std::string
            dStrike: sg::float_t
            option_type: std::string
            bLogTransform: bool
            useCoarsen: bool
            coarsenThreshold: sg::float_t
            adaptSolveMode: std::string
            numCoarsenPoints: int
            refineThreshold: sg::float_t

        __init__(self, SparseGrid, alpha, mu, sigma, rho, r, TimestepSize, OperationMode, dStrike, option_type, 
            bLogTransform=False, useCoarsen=False, coarsenThreshold=0.0, adaptSolveMode="none", 
            numCoarsenPoints=-1) -> BlackScholesParabolicPDESolverSystemEuroAmer

        Parameters:
            SparseGrid: sg::base::Grid &
            alpha: sg::base::DataVector &
            mu: sg::base::DataVector &
            sigma: sg::base::DataVector &
            rho: sg::base::DataMatrix &
            r: sg::float_t
            TimestepSize: sg::float_t
            OperationMode: std::string
            dStrike: sg::float_t
            option_type: std::string
            bLogTransform: bool
            useCoarsen: bool
            coarsenThreshold: sg::float_t
            adaptSolveMode: std::string
            numCoarsenPoints: int

        __init__(self, SparseGrid, alpha, mu, sigma, rho, r, TimestepSize, OperationMode, dStrike, option_type, 
            bLogTransform=False, useCoarsen=False, coarsenThreshold=0.0, adaptSolveMode="none") -> BlackScholesParabolicPDESolverSystemEuroAmer

        Parameters:
            SparseGrid: sg::base::Grid &
            alpha: sg::base::DataVector &
            mu: sg::base::DataVector &
            sigma: sg::base::DataVector &
            rho: sg::base::DataMatrix &
            r: sg::float_t
            TimestepSize: sg::float_t
            OperationMode: std::string
            dStrike: sg::float_t
            option_type: std::string
            bLogTransform: bool
            useCoarsen: bool
            coarsenThreshold: sg::float_t
            adaptSolveMode: std::string

        __init__(self, SparseGrid, alpha, mu, sigma, rho, r, TimestepSize, OperationMode, dStrike, option_type, 
            bLogTransform=False, useCoarsen=False, coarsenThreshold=0.0) -> BlackScholesParabolicPDESolverSystemEuroAmer

        Parameters:
            SparseGrid: sg::base::Grid &
            alpha: sg::base::DataVector &
            mu: sg::base::DataVector &
            sigma: sg::base::DataVector &
            rho: sg::base::DataMatrix &
            r: sg::float_t
            TimestepSize: sg::float_t
            OperationMode: std::string
            dStrike: sg::float_t
            option_type: std::string
            bLogTransform: bool
            useCoarsen: bool
            coarsenThreshold: sg::float_t

        __init__(self, SparseGrid, alpha, mu, sigma, rho, r, TimestepSize, OperationMode, dStrike, option_type, 
            bLogTransform=False, useCoarsen=False) -> BlackScholesParabolicPDESolverSystemEuroAmer

        Parameters:
            SparseGrid: sg::base::Grid &
            alpha: sg::base::DataVector &
            mu: sg::base::DataVector &
            sigma: sg::base::DataVector &
            rho: sg::base::DataMatrix &
            r: sg::float_t
            TimestepSize: sg::float_t
            OperationMode: std::string
            dStrike: sg::float_t
            option_type: std::string
            bLogTransform: bool
            useCoarsen: bool

        __init__(self, SparseGrid, alpha, mu, sigma, rho, r, TimestepSize, OperationMode, dStrike, option_type, 
            bLogTransform=False) -> BlackScholesParabolicPDESolverSystemEuroAmer

        Parameters:
            SparseGrid: sg::base::Grid &
            alpha: sg::base::DataVector &
            mu: sg::base::DataVector &
            sigma: sg::base::DataVector &
            rho: sg::base::DataMatrix &
            r: sg::float_t
            TimestepSize: sg::float_t
            OperationMode: std::string
            dStrike: sg::float_t
            option_type: std::string
            bLogTransform: bool

        __init__(self, SparseGrid, alpha, mu, sigma, rho, r, TimestepSize, OperationMode, dStrike, option_type) -> BlackScholesParabolicPDESolverSystemEuroAmer

        Parameters:
            SparseGrid: sg::base::Grid &
            alpha: sg::base::DataVector &
            mu: sg::base::DataVector &
            sigma: sg::base::DataVector &
            rho: sg::base::DataMatrix &
            r: sg::float_t
            TimestepSize: sg::float_t
            OperationMode: std::string
            dStrike: sg::float_t
            option_type: std::string


        1
        """
        this = _pysgpp_swig.new_BlackScholesParabolicPDESolverSystemEuroAmer(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_BlackScholesParabolicPDESolverSystemEuroAmer
    __del__ = lambda self : None;
    def coarsenAndRefine(self, isLastTimestep=False):
        """
        coarsenAndRefine(self, isLastTimestep=False)

        Parameters:
            isLastTimestep: bool

        coarsenAndRefine(self)

        Parameters:
            self: sg::finance::BlackScholesParabolicPDESolverSystemEuroAmer *


        1
        """
        return _pysgpp_swig.BlackScholesParabolicPDESolverSystemEuroAmer_coarsenAndRefine(self, isLastTimestep)

BlackScholesParabolicPDESolverSystemEuroAmer_swigregister = _pysgpp_swig.BlackScholesParabolicPDESolverSystemEuroAmer_swigregister
BlackScholesParabolicPDESolverSystemEuroAmer_swigregister(BlackScholesParabolicPDESolverSystemEuroAmer)

class BlackScholesParabolicPDESolverSystemEuroAmerParallelOMP(BlackScholesParabolicPDESolverSystemEuroAmer):
    """1"""
    __swig_setmethods__ = {}
    for _s in [BlackScholesParabolicPDESolverSystemEuroAmer]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BlackScholesParabolicPDESolverSystemEuroAmerParallelOMP, name, value)
    __swig_getmethods__ = {}
    for _s in [BlackScholesParabolicPDESolverSystemEuroAmer]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, BlackScholesParabolicPDESolverSystemEuroAmerParallelOMP, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, SparseGrid, alpha, mu, sigma, rho, r, TimestepSize, OperationMode, dStrike, option_type, 
            bLogTransform=False, useCoarsen=False, coarsenThreshold=0.0, adaptSolveMode="none", 
            numCoarsenPoints=-1, refineThreshold=0.0, refineMode="classic", 
            refineMaxLevel=0) -> BlackScholesParabolicPDESolverSystemEuroAmerParallelOMP

        Parameters:
            SparseGrid: sg::base::Grid &
            alpha: sg::base::DataVector &
            mu: sg::base::DataVector &
            sigma: sg::base::DataVector &
            rho: sg::base::DataMatrix &
            r: sg::float_t
            TimestepSize: sg::float_t
            OperationMode: std::string
            dStrike: sg::float_t
            option_type: std::string
            bLogTransform: bool
            useCoarsen: bool
            coarsenThreshold: sg::float_t
            adaptSolveMode: std::string
            numCoarsenPoints: int
            refineThreshold: sg::float_t
            refineMode: std::string
            refineMaxLevel: sg::base::GridIndex::level_type

        __init__(self, SparseGrid, alpha, mu, sigma, rho, r, TimestepSize, OperationMode, dStrike, option_type, 
            bLogTransform=False, useCoarsen=False, coarsenThreshold=0.0, adaptSolveMode="none", 
            numCoarsenPoints=-1, refineThreshold=0.0, refineMode="classic") -> BlackScholesParabolicPDESolverSystemEuroAmerParallelOMP

        Parameters:
            SparseGrid: sg::base::Grid &
            alpha: sg::base::DataVector &
            mu: sg::base::DataVector &
            sigma: sg::base::DataVector &
            rho: sg::base::DataMatrix &
            r: sg::float_t
            TimestepSize: sg::float_t
            OperationMode: std::string
            dStrike: sg::float_t
            option_type: std::string
            bLogTransform: bool
            useCoarsen: bool
            coarsenThreshold: sg::float_t
            adaptSolveMode: std::string
            numCoarsenPoints: int
            refineThreshold: sg::float_t
            refineMode: std::string

        __init__(self, SparseGrid, alpha, mu, sigma, rho, r, TimestepSize, OperationMode, dStrike, option_type, 
            bLogTransform=False, useCoarsen=False, coarsenThreshold=0.0, adaptSolveMode="none", 
            numCoarsenPoints=-1, refineThreshold=0.0) -> BlackScholesParabolicPDESolverSystemEuroAmerParallelOMP

        Parameters:
            SparseGrid: sg::base::Grid &
            alpha: sg::base::DataVector &
            mu: sg::base::DataVector &
            sigma: sg::base::DataVector &
            rho: sg::base::DataMatrix &
            r: sg::float_t
            TimestepSize: sg::float_t
            OperationMode: std::string
            dStrike: sg::float_t
            option_type: std::string
            bLogTransform: bool
            useCoarsen: bool
            coarsenThreshold: sg::float_t
            adaptSolveMode: std::string
            numCoarsenPoints: int
            refineThreshold: sg::float_t

        __init__(self, SparseGrid, alpha, mu, sigma, rho, r, TimestepSize, OperationMode, dStrike, option_type, 
            bLogTransform=False, useCoarsen=False, coarsenThreshold=0.0, adaptSolveMode="none", 
            numCoarsenPoints=-1) -> BlackScholesParabolicPDESolverSystemEuroAmerParallelOMP

        Parameters:
            SparseGrid: sg::base::Grid &
            alpha: sg::base::DataVector &
            mu: sg::base::DataVector &
            sigma: sg::base::DataVector &
            rho: sg::base::DataMatrix &
            r: sg::float_t
            TimestepSize: sg::float_t
            OperationMode: std::string
            dStrike: sg::float_t
            option_type: std::string
            bLogTransform: bool
            useCoarsen: bool
            coarsenThreshold: sg::float_t
            adaptSolveMode: std::string
            numCoarsenPoints: int

        __init__(self, SparseGrid, alpha, mu, sigma, rho, r, TimestepSize, OperationMode, dStrike, option_type, 
            bLogTransform=False, useCoarsen=False, coarsenThreshold=0.0, adaptSolveMode="none") -> BlackScholesParabolicPDESolverSystemEuroAmerParallelOMP

        Parameters:
            SparseGrid: sg::base::Grid &
            alpha: sg::base::DataVector &
            mu: sg::base::DataVector &
            sigma: sg::base::DataVector &
            rho: sg::base::DataMatrix &
            r: sg::float_t
            TimestepSize: sg::float_t
            OperationMode: std::string
            dStrike: sg::float_t
            option_type: std::string
            bLogTransform: bool
            useCoarsen: bool
            coarsenThreshold: sg::float_t
            adaptSolveMode: std::string

        __init__(self, SparseGrid, alpha, mu, sigma, rho, r, TimestepSize, OperationMode, dStrike, option_type, 
            bLogTransform=False, useCoarsen=False, coarsenThreshold=0.0) -> BlackScholesParabolicPDESolverSystemEuroAmerParallelOMP

        Parameters:
            SparseGrid: sg::base::Grid &
            alpha: sg::base::DataVector &
            mu: sg::base::DataVector &
            sigma: sg::base::DataVector &
            rho: sg::base::DataMatrix &
            r: sg::float_t
            TimestepSize: sg::float_t
            OperationMode: std::string
            dStrike: sg::float_t
            option_type: std::string
            bLogTransform: bool
            useCoarsen: bool
            coarsenThreshold: sg::float_t

        __init__(self, SparseGrid, alpha, mu, sigma, rho, r, TimestepSize, OperationMode, dStrike, option_type, 
            bLogTransform=False, useCoarsen=False) -> BlackScholesParabolicPDESolverSystemEuroAmerParallelOMP

        Parameters:
            SparseGrid: sg::base::Grid &
            alpha: sg::base::DataVector &
            mu: sg::base::DataVector &
            sigma: sg::base::DataVector &
            rho: sg::base::DataMatrix &
            r: sg::float_t
            TimestepSize: sg::float_t
            OperationMode: std::string
            dStrike: sg::float_t
            option_type: std::string
            bLogTransform: bool
            useCoarsen: bool

        __init__(self, SparseGrid, alpha, mu, sigma, rho, r, TimestepSize, OperationMode, dStrike, option_type, 
            bLogTransform=False) -> BlackScholesParabolicPDESolverSystemEuroAmerParallelOMP

        Parameters:
            SparseGrid: sg::base::Grid &
            alpha: sg::base::DataVector &
            mu: sg::base::DataVector &
            sigma: sg::base::DataVector &
            rho: sg::base::DataMatrix &
            r: sg::float_t
            TimestepSize: sg::float_t
            OperationMode: std::string
            dStrike: sg::float_t
            option_type: std::string
            bLogTransform: bool

        __init__(self, SparseGrid, alpha, mu, sigma, rho, r, TimestepSize, OperationMode, dStrike, option_type) -> BlackScholesParabolicPDESolverSystemEuroAmerParallelOMP

        Parameters:
            SparseGrid: sg::base::Grid &
            alpha: sg::base::DataVector &
            mu: sg::base::DataVector &
            sigma: sg::base::DataVector &
            rho: sg::base::DataMatrix &
            r: sg::float_t
            TimestepSize: sg::float_t
            OperationMode: std::string
            dStrike: sg::float_t
            option_type: std::string


        1
        """
        this = _pysgpp_swig.new_BlackScholesParabolicPDESolverSystemEuroAmerParallelOMP(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_BlackScholesParabolicPDESolverSystemEuroAmerParallelOMP
    __del__ = lambda self : None;
BlackScholesParabolicPDESolverSystemEuroAmerParallelOMP_swigregister = _pysgpp_swig.BlackScholesParabolicPDESolverSystemEuroAmerParallelOMP_swigregister
BlackScholesParabolicPDESolverSystemEuroAmerParallelOMP_swigregister(BlackScholesParabolicPDESolverSystemEuroAmerParallelOMP)

class BlackScholesSolver(ParabolicPDESolver):
    """1"""
    __swig_setmethods__ = {}
    for _s in [ParabolicPDESolver]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BlackScholesSolver, name, value)
    __swig_getmethods__ = {}
    for _s in [ParabolicPDESolver]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, BlackScholesSolver, name)
    __repr__ = _swig_repr
    def __init__(self, useLogTransform=False, usePAT=False): 
        """
        __init__(self, useLogTransform=False, usePAT=False) -> BlackScholesSolver

        Parameters:
            useLogTransform: bool
            usePAT: bool

        __init__(self, useLogTransform=False) -> BlackScholesSolver

        Parameters:
            useLogTransform: bool

        __init__(self) -> BlackScholesSolver

        1
        """
        this = _pysgpp_swig.new_BlackScholesSolver(useLogTransform, usePAT)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_BlackScholesSolver
    __del__ = lambda self : None;
    def refineInitialGridWithPayoff(self, *args):
        """
        refineInitialGridWithPayoff(self, alpha, strike, payoffType, dStrikeDistance)

        Parameters:
            alpha: sg::base::DataVector &
            strike: sg::float_t
            payoffType: std::string
            dStrikeDistance: sg::float_t


        1
        """
        return _pysgpp_swig.BlackScholesSolver_refineInitialGridWithPayoff(self, *args)

    def refineInitialGridWithPayoffToMaxLevel(self, *args):
        """
        refineInitialGridWithPayoffToMaxLevel(self, alpha, strike, payoffType, dStrikeDistance, maxLevel)

        Parameters:
            alpha: sg::base::DataVector &
            strike: sg::float_t
            payoffType: std::string
            dStrikeDistance: sg::float_t
            maxLevel: sg::base::GridIndex::level_type


        1
        """
        return _pysgpp_swig.BlackScholesSolver_refineInitialGridWithPayoffToMaxLevel(self, *args)

    def setStochasticData(self, *args):
        """
        setStochasticData(self, mus, sigmas, rhos, r)

        Parameters:
            mus: sg::base::DataVector &
            sigmas: sg::base::DataVector &
            rhos: sg::base::DataMatrix &
            r: sg::float_t


        1
        """
        return _pysgpp_swig.BlackScholesSolver_setStochasticData(self, *args)

    def solveImplicitEuler(self, *args):
        """
        solveImplicitEuler(self, numTimesteps, timestepsize, maxCGIterations, epsilonCG, alpha, verbose=False, generateAnimation=False, 
            numEvalsAnimation=20)

        Parameters:
            numTimesteps: size_t
            timestepsize: sg::float_t
            maxCGIterations: size_t
            epsilonCG: sg::float_t
            alpha: sg::base::DataVector &
            verbose: bool
            generateAnimation: bool
            numEvalsAnimation: size_t

        solveImplicitEuler(self, numTimesteps, timestepsize, maxCGIterations, epsilonCG, alpha, verbose=False, generateAnimation=False)

        Parameters:
            numTimesteps: size_t
            timestepsize: sg::float_t
            maxCGIterations: size_t
            epsilonCG: sg::float_t
            alpha: sg::base::DataVector &
            verbose: bool
            generateAnimation: bool

        solveImplicitEuler(self, numTimesteps, timestepsize, maxCGIterations, epsilonCG, alpha, verbose=False)

        Parameters:
            numTimesteps: size_t
            timestepsize: sg::float_t
            maxCGIterations: size_t
            epsilonCG: sg::float_t
            alpha: sg::base::DataVector &
            verbose: bool

        solveImplicitEuler(self, numTimesteps, timestepsize, maxCGIterations, epsilonCG, alpha)

        Parameters:
            numTimesteps: size_t
            timestepsize: sg::float_t
            maxCGIterations: size_t
            epsilonCG: sg::float_t
            alpha: sg::base::DataVector &


        1
        """
        return _pysgpp_swig.BlackScholesSolver_solveImplicitEuler(self, *args)

    def solveExplicitEuler(self, *args):
        """
        solveExplicitEuler(self, numTimesteps, timestepsize, maxCGIterations, epsilonCG, alpha, verbose=False, generateAnimation=False, 
            numEvalsAnimation=20)

        Parameters:
            numTimesteps: size_t
            timestepsize: sg::float_t
            maxCGIterations: size_t
            epsilonCG: sg::float_t
            alpha: sg::base::DataVector &
            verbose: bool
            generateAnimation: bool
            numEvalsAnimation: size_t

        solveExplicitEuler(self, numTimesteps, timestepsize, maxCGIterations, epsilonCG, alpha, verbose=False, generateAnimation=False)

        Parameters:
            numTimesteps: size_t
            timestepsize: sg::float_t
            maxCGIterations: size_t
            epsilonCG: sg::float_t
            alpha: sg::base::DataVector &
            verbose: bool
            generateAnimation: bool

        solveExplicitEuler(self, numTimesteps, timestepsize, maxCGIterations, epsilonCG, alpha, verbose=False)

        Parameters:
            numTimesteps: size_t
            timestepsize: sg::float_t
            maxCGIterations: size_t
            epsilonCG: sg::float_t
            alpha: sg::base::DataVector &
            verbose: bool

        solveExplicitEuler(self, numTimesteps, timestepsize, maxCGIterations, epsilonCG, alpha)

        Parameters:
            numTimesteps: size_t
            timestepsize: sg::float_t
            maxCGIterations: size_t
            epsilonCG: sg::float_t
            alpha: sg::base::DataVector &


        1
        """
        return _pysgpp_swig.BlackScholesSolver_solveExplicitEuler(self, *args)

    def solveCrankNicolson(self, *args):
        """
        solveCrankNicolson(self, numTimesteps, timestepsize, maxCGIterations, epsilonCG, alpha, NumImEul=0)

        Parameters:
            numTimesteps: size_t
            timestepsize: sg::float_t
            maxCGIterations: size_t
            epsilonCG: sg::float_t
            alpha: sg::base::DataVector &
            NumImEul: size_t

        solveCrankNicolson(self, numTimesteps, timestepsize, maxCGIterations, epsilonCG, alpha)

        Parameters:
            numTimesteps: size_t
            timestepsize: sg::float_t
            maxCGIterations: size_t
            epsilonCG: sg::float_t
            alpha: sg::base::DataVector &


        1
        """
        return _pysgpp_swig.BlackScholesSolver_solveCrankNicolson(self, *args)

    def solveX(self, *args):
        """
        solveX(self, numTimesteps, timestepsize, maxCGIterations, epsilonCG, alpha, verbose=False, myODESolverV=None, 
            Solver="ImEul")

        Parameters:
            numTimesteps: size_t
            timestepsize: sg::float_t
            maxCGIterations: size_t
            epsilonCG: sg::float_t
            alpha: sg::base::DataVector &
            verbose: bool
            myODESolverV: void *
            Solver: std::string

        solveX(self, numTimesteps, timestepsize, maxCGIterations, epsilonCG, alpha, verbose=False, myODESolverV=None)

        Parameters:
            numTimesteps: size_t
            timestepsize: sg::float_t
            maxCGIterations: size_t
            epsilonCG: sg::float_t
            alpha: sg::base::DataVector &
            verbose: bool
            myODESolverV: void *

        solveX(self, numTimesteps, timestepsize, maxCGIterations, epsilonCG, alpha, verbose=False)

        Parameters:
            numTimesteps: size_t
            timestepsize: sg::float_t
            maxCGIterations: size_t
            epsilonCG: sg::float_t
            alpha: sg::base::DataVector &
            verbose: bool

        solveX(self, numTimesteps, timestepsize, maxCGIterations, epsilonCG, alpha)

        Parameters:
            numTimesteps: size_t
            timestepsize: sg::float_t
            maxCGIterations: size_t
            epsilonCG: sg::float_t
            alpha: sg::base::DataVector &


        1
        """
        return _pysgpp_swig.BlackScholesSolver_solveX(self, *args)

    def solveSC(self, *args):
        """
        solveSC(self, Solver, numTimesteps, timestepsize, maxCGIterations, epsilonCG, alpha, verbose=False)

        Parameters:
            Solver: std::string
            numTimesteps: size_t
            timestepsize: sg::float_t
            maxCGIterations: size_t
            epsilonCG: sg::float_t
            alpha: sg::base::DataVector &
            verbose: bool

        solveSC(self, Solver, numTimesteps, timestepsize, maxCGIterations, epsilonCG, alpha)

        Parameters:
            Solver: std::string
            numTimesteps: size_t
            timestepsize: sg::float_t
            maxCGIterations: size_t
            epsilonCG: sg::float_t
            alpha: sg::base::DataVector &


        1
        """
        return _pysgpp_swig.BlackScholesSolver_solveSC(self, *args)

    def solveAdamsBashforth(self, *args):
        """
        solveAdamsBashforth(self, numTimesteps, timestepsize, maxCGIterations, epsilonCG, alpha, verbose=False)

        Parameters:
            numTimesteps: size_t
            timestepsize: sg::float_t
            maxCGIterations: size_t
            epsilonCG: sg::float_t
            alpha: sg::base::DataVector &
            verbose: bool

        solveAdamsBashforth(self, numTimesteps, timestepsize, maxCGIterations, epsilonCG, alpha)

        Parameters:
            numTimesteps: size_t
            timestepsize: sg::float_t
            maxCGIterations: size_t
            epsilonCG: sg::float_t
            alpha: sg::base::DataVector &


        1
        """
        return _pysgpp_swig.BlackScholesSolver_solveAdamsBashforth(self, *args)

    def solveSCAC(self, *args):
        """
        solveSCAC(self, numTimesteps, timestepsize, epsilon, maxCGIterations, epsilonCG, alpha, verbose=False)

        Parameters:
            numTimesteps: size_t
            timestepsize: sg::float_t
            epsilon: sg::float_t
            maxCGIterations: size_t
            epsilonCG: sg::float_t
            alpha: sg::base::DataVector &
            verbose: bool

        solveSCAC(self, numTimesteps, timestepsize, epsilon, maxCGIterations, epsilonCG, alpha)

        Parameters:
            numTimesteps: size_t
            timestepsize: sg::float_t
            epsilon: sg::float_t
            maxCGIterations: size_t
            epsilonCG: sg::float_t
            alpha: sg::base::DataVector &


        1
        """
        return _pysgpp_swig.BlackScholesSolver_solveSCAC(self, *args)

    def solveSCH(self, *args):
        """
        solveSCH(self, numTimesteps, timestepsize, epsilon, maxCGIterations, epsilonCG, alpha, verbose=False)

        Parameters:
            numTimesteps: size_t
            timestepsize: sg::float_t
            epsilon: sg::float_t
            maxCGIterations: size_t
            epsilonCG: sg::float_t
            alpha: sg::base::DataVector &
            verbose: bool

        solveSCH(self, numTimesteps, timestepsize, epsilon, maxCGIterations, epsilonCG, alpha)

        Parameters:
            numTimesteps: size_t
            timestepsize: sg::float_t
            epsilon: sg::float_t
            maxCGIterations: size_t
            epsilonCG: sg::float_t
            alpha: sg::base::DataVector &


        1
        """
        return _pysgpp_swig.BlackScholesSolver_solveSCH(self, *args)

    def solveSCBDF(self, *args):
        """
        solveSCBDF(self, numTimesteps, timestepsize, epsilon, maxCGIterations, epsilonCG, alpha, verbose=False)

        Parameters:
            numTimesteps: size_t
            timestepsize: sg::float_t
            epsilon: sg::float_t
            maxCGIterations: size_t
            epsilonCG: sg::float_t
            alpha: sg::base::DataVector &
            verbose: bool

        solveSCBDF(self, numTimesteps, timestepsize, epsilon, maxCGIterations, epsilonCG, alpha)

        Parameters:
            numTimesteps: size_t
            timestepsize: sg::float_t
            epsilon: sg::float_t
            maxCGIterations: size_t
            epsilonCG: sg::float_t
            alpha: sg::base::DataVector &


        1
        """
        return _pysgpp_swig.BlackScholesSolver_solveSCBDF(self, *args)

    def solveSCEJ(self, *args):
        """
        solveSCEJ(self, numTimesteps, timestepsize, epsilon, myAlpha, maxCGIterations, epsilonCG, alpha, 
            verbose=False)

        Parameters:
            numTimesteps: size_t
            timestepsize: sg::float_t
            epsilon: sg::float_t
            myAlpha: sg::float_t
            maxCGIterations: size_t
            epsilonCG: sg::float_t
            alpha: sg::base::DataVector &
            verbose: bool

        solveSCEJ(self, numTimesteps, timestepsize, epsilon, myAlpha, maxCGIterations, epsilonCG, alpha)

        Parameters:
            numTimesteps: size_t
            timestepsize: sg::float_t
            epsilon: sg::float_t
            myAlpha: sg::float_t
            maxCGIterations: size_t
            epsilonCG: sg::float_t
            alpha: sg::base::DataVector &


        1
        """
        return _pysgpp_swig.BlackScholesSolver_solveSCEJ(self, *args)

    def getAnalyticSolution1D(self, *args):
        """
        getAnalyticSolution1D(self, stock, isCall, t, vola, r, strike) -> sg::float_t

        Parameters:
            stock: sg::float_t
            isCall: bool
            t: sg::float_t
            vola: sg::float_t
            r: sg::float_t
            strike: sg::float_t


        1
        """
        return _pysgpp_swig.BlackScholesSolver_getAnalyticSolution1D(self, *args)

    def solve1DAnalytic(self, *args):
        """
        solve1DAnalytic(self, premiums, minStock, maxStock, StockInc, strike, t, isCall)

        Parameters:
            premiums: std::vector< std::pair< sg::float_t,sg::float_t >,std::allocator< std::pair< sg::float_t,sg::float_t > > > &
            minStock: sg::float_t
            maxStock: sg::float_t
            StockInc: sg::float_t
            strike: sg::float_t
            t: sg::float_t
            isCall: bool


        1
        """
        return _pysgpp_swig.BlackScholesSolver_solve1DAnalytic(self, *args)

    def print1DAnalytic(self, *args):
        """
        print1DAnalytic(self, premiums, tfilename)

        Parameters:
            premiums: std::vector< std::pair< sg::float_t,sg::float_t >,std::allocator< std::pair< sg::float_t,sg::float_t > > > &
            tfilename: std::string


        1
        """
        return _pysgpp_swig.BlackScholesSolver_print1DAnalytic(self, *args)

    def getAnalyticAlpha1D(self, *args):
        """
        getAnalyticAlpha1D(self, alpha_analytic, strike, t, payoffType, hierarchized)

        Parameters:
            alpha_analytic: sg::base::DataVector &
            strike: sg::float_t
            t: sg::float_t
            payoffType: std::string
            hierarchized: bool


        1
        """
        return _pysgpp_swig.BlackScholesSolver_getAnalyticAlpha1D(self, *args)

    def evaluate1DAnalyticCuboid(self, *args):
        """
        evaluate1DAnalyticCuboid(self, AnalyticOptionPrices, EvaluationPoints, strike, vola, r, t, isCall)

        Parameters:
            AnalyticOptionPrices: sg::base::DataVector &
            EvaluationPoints: sg::base::DataMatrix &
            strike: sg::float_t
            vola: sg::float_t
            r: sg::float_t
            t: sg::float_t
            isCall: bool


        1
        """
        return _pysgpp_swig.BlackScholesSolver_evaluate1DAnalyticCuboid(self, *args)

    def initGridWithPayoff(self, *args):
        """
        initGridWithPayoff(self, alpha, strike, payoffType)

        Parameters:
            alpha: sg::base::DataVector &
            strike: sg::float_t
            payoffType: std::string


        1
        """
        return _pysgpp_swig.BlackScholesSolver_initGridWithPayoff(self, *args)

    def initScreen(self):
        """
        initScreen(self)

        Parameters:
            self: sg::finance::BlackScholesSolver *


        1
        """
        return _pysgpp_swig.BlackScholesSolver_initScreen(self)

    def getAlgorithmicDimensions(self):
        """
        getAlgorithmicDimensions(self) -> IndexVector

        Parameters:
            self: sg::finance::BlackScholesSolver *


        1
        """
        return _pysgpp_swig.BlackScholesSolver_getAlgorithmicDimensions(self)

    def setAlgorithmicDimensions(self, *args):
        """
        setAlgorithmicDimensions(self, newAlgoDims)

        Parameters:
            newAlgoDims: std::vector< size_t,std::allocator< size_t > >


        1
        """
        return _pysgpp_swig.BlackScholesSolver_setAlgorithmicDimensions(self, *args)

    def setEnableCoarseningData(self, *args):
        """
        setEnableCoarseningData(self, adaptSolveMode, refineMode, refineMaxLevel, numCoarsenPoints, coarsenThreshold, refineThreshold)

        Parameters:
            adaptSolveMode: std::string
            refineMode: std::string
            refineMaxLevel: sg::base::GridIndex::level_type
            numCoarsenPoints: int
            coarsenThreshold: sg::float_t
            refineThreshold: sg::float_t


        1
        """
        return _pysgpp_swig.BlackScholesSolver_setEnableCoarseningData(self, *args)

    def printPayoffInterpolationError2D(self, *args):
        """
        printPayoffInterpolationError2D(self, alpha, tFilename, numTestpoints, strike)

        Parameters:
            alpha: sg::base::DataVector &
            tFilename: std::string
            numTestpoints: size_t
            strike: sg::float_t


        1
        """
        return _pysgpp_swig.BlackScholesSolver_printPayoffInterpolationError2D(self, *args)

    def evalOption(self, *args):
        """
        evalOption(self, eval_point, alpha) -> sg::float_t

        Parameters:
            eval_point: std::vector< sg::float_t,std::allocator< sg::float_t > > &
            alpha: sg::base::DataVector &


        1
        """
        return _pysgpp_swig.BlackScholesSolver_evalOption(self, *args)

    def transformPoint(self, *args):
        """
        transformPoint(self, point)

        Parameters:
            point: sg::base::DataVector &


        1
        """
        return _pysgpp_swig.BlackScholesSolver_transformPoint(self, *args)

    def resetSolveTime(self):
        """
        resetSolveTime(self)

        Parameters:
            self: sg::finance::BlackScholesSolver *


        1
        """
        return _pysgpp_swig.BlackScholesSolver_resetSolveTime(self)

    def printSparseGridPAT(self, *args):
        """
        printSparseGridPAT(self, alpha, tfilename, bSurplus)

        Parameters:
            alpha: sg::base::DataVector &
            tfilename: std::string
            bSurplus: bool


        1
        """
        return _pysgpp_swig.BlackScholesSolver_printSparseGridPAT(self, *args)

    def getGridPointsAtMoney(self, *args):
        """
        getGridPointsAtMoney(self, payoffType, strike, eps=0.0) -> size_t

        Parameters:
            payoffType: std::string
            strike: sg::float_t
            eps: sg::float_t

        getGridPointsAtMoney(self, payoffType, strike) -> size_t

        Parameters:
            payoffType: std::string
            strike: sg::float_t


        1
        """
        return _pysgpp_swig.BlackScholesSolver_getGridPointsAtMoney(self, *args)

    def getNeededIterationsToSolve(self):
        """
        getNeededIterationsToSolve(self) -> size_t

        Parameters:
            self: sg::finance::BlackScholesSolver *


        1
        """
        return _pysgpp_swig.BlackScholesSolver_getNeededIterationsToSolve(self)

    def getNeededTimeToSolve(self):
        """
        getNeededTimeToSolve(self) -> sg::float_t

        Parameters:
            self: sg::finance::BlackScholesSolver *


        1
        """
        return _pysgpp_swig.BlackScholesSolver_getNeededTimeToSolve(self)

    def getStartInnerGridSize(self):
        """
        getStartInnerGridSize(self) -> size_t

        Parameters:
            self: sg::finance::BlackScholesSolver *


        1
        """
        return _pysgpp_swig.BlackScholesSolver_getStartInnerGridSize(self)

    def getFinalInnerGridSize(self):
        """
        getFinalInnerGridSize(self) -> size_t

        Parameters:
            self: sg::finance::BlackScholesSolver *


        1
        """
        return _pysgpp_swig.BlackScholesSolver_getFinalInnerGridSize(self)

    def getAverageInnerGridSize(self):
        """
        getAverageInnerGridSize(self) -> size_t

        Parameters:
            self: sg::finance::BlackScholesSolver *


        1
        """
        return _pysgpp_swig.BlackScholesSolver_getAverageInnerGridSize(self)

    def storeInnerRHS(self, *args):
        """
        storeInnerRHS(self, alpha, tFilename, timestepsize)

        Parameters:
            alpha: sg::base::DataVector &
            tFilename: std::string
            timestepsize: sg::float_t


        1
        """
        return _pysgpp_swig.BlackScholesSolver_storeInnerRHS(self, *args)

    def storeInnerSolution(self, *args):
        """
        storeInnerSolution(self, alpha, numTimesteps, timestepsize, maxCGIterations, epsilonCG, tFilename)

        Parameters:
            alpha: sg::base::DataVector &
            numTimesteps: size_t
            timestepsize: sg::float_t
            maxCGIterations: size_t
            epsilonCG: sg::float_t
            tFilename: std::string


        1
        """
        return _pysgpp_swig.BlackScholesSolver_storeInnerSolution(self, *args)

BlackScholesSolver_swigregister = _pysgpp_swig.BlackScholesSolver_swigregister
BlackScholesSolver_swigregister(BlackScholesSolver)

class BlackScholesSolverWithStretching(BlackScholesSolver):
    """1"""
    __swig_setmethods__ = {}
    for _s in [BlackScholesSolver]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BlackScholesSolverWithStretching, name, value)
    __swig_getmethods__ = {}
    for _s in [BlackScholesSolver]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, BlackScholesSolverWithStretching, name)
    __repr__ = _swig_repr
    def __init__(self, useLogTransform=False, OptionType="all"): 
        """
        __init__(self, useLogTransform=False, OptionType="all") -> BlackScholesSolverWithStretching

        Parameters:
            useLogTransform: bool
            OptionType: std::string

        __init__(self, useLogTransform=False) -> BlackScholesSolverWithStretching

        Parameters:
            useLogTransform: bool

        __init__(self) -> BlackScholesSolverWithStretching

        1
        """
        this = _pysgpp_swig.new_BlackScholesSolverWithStretching(useLogTransform, OptionType)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_BlackScholesSolverWithStretching
    __del__ = lambda self : None;
    def constructGridStretching(self, *args):
        """
        constructGridStretching(self, myStretching, level)

        Parameters:
            myStretching: sg::base::Stretching &
            level: int


        1
        """
        return _pysgpp_swig.BlackScholesSolverWithStretching_constructGridStretching(self, *args)

    def constructGrid(self, *args):
        """
        constructGrid(self, myBoundingBox, level)

        Parameters:
            myBoundingBox: sg::base::BoundingBox &
            level: size_t


        1
        """
        return _pysgpp_swig.BlackScholesSolverWithStretching_constructGrid(self, *args)

    def getGridPointsAtMoney(self, *args):
        """
        getGridPointsAtMoney(self, payoffType, strike, eps=0.0) -> size_t

        Parameters:
            payoffType: std::string
            strike: sg::float_t
            eps: sg::float_t

        getGridPointsAtMoney(self, payoffType, strike) -> size_t

        Parameters:
            payoffType: std::string
            strike: sg::float_t


        1
        """
        return _pysgpp_swig.BlackScholesSolverWithStretching_getGridPointsAtMoney(self, *args)

    def printGrid(self, *args):
        """
        printGrid(self, alpha, PointesPerDimension, tfilename)

        Parameters:
            alpha: sg::base::DataVector &
            PointesPerDimension: size_t
            tfilename: std::string


        1
        """
        return _pysgpp_swig.BlackScholesSolverWithStretching_printGrid(self, *args)

    def printGridDomain(self, *args):
        """
        printGridDomain(self, alpha, PointesPerDimension, GridArea, tfilename)

        Parameters:
            alpha: sg::base::DataVector &
            PointesPerDimension: size_t
            GridArea: sg::base::BoundingBox &
            tfilename: std::string


        1
        """
        return _pysgpp_swig.BlackScholesSolverWithStretching_printGridDomain(self, *args)

    def printGridDomainStretching(self, *args):
        """
        printGridDomainStretching(self, alpha, PointesPerDimension, GridArea, tfilename)

        Parameters:
            alpha: sg::base::DataVector &
            PointesPerDimension: size_t
            GridArea: sg::base::Stretching &
            tfilename: std::string


        1
        """
        return _pysgpp_swig.BlackScholesSolverWithStretching_printGridDomainStretching(self, *args)

BlackScholesSolverWithStretching_swigregister = _pysgpp_swig.BlackScholesSolverWithStretching_swigregister
BlackScholesSolverWithStretching_swigregister(BlackScholesSolverWithStretching)

class VariableDiscountFactor(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VariableDiscountFactor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VariableDiscountFactor, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, storage, dim_r) -> VariableDiscountFactor

        Parameters:
            storage: sg::base::GridStorage *
            dim_r: int


        1
        """
        this = _pysgpp_swig.new_VariableDiscountFactor(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_VariableDiscountFactor
    __del__ = lambda self : None;
    def getDiscountFactor(self, *args):
        """
        getDiscountFactor(self, factor, T)

        Parameters:
            factor: sg::base::DataVector &
            T: sg::float_t


        1
        """
        return _pysgpp_swig.VariableDiscountFactor_getDiscountFactor(self, *args)

VariableDiscountFactor_swigregister = _pysgpp_swig.VariableDiscountFactor_swigregister
VariableDiscountFactor_swigregister(VariableDiscountFactor)


def createOperationGamma(*args):
  """
    createOperationGamma(grid, coef) -> OperationMatrix

    Parameters:
        grid: sg::base::Grid &
        coef: sg::base::DataMatrix &


    1
    """
  return _pysgpp_swig.createOperationGamma(*args)

def createOperationGammaLog(*args):
  """
    createOperationGammaLog(grid, coef) -> OperationMatrix

    Parameters:
        grid: sg::base::Grid &
        coef: sg::base::DataMatrix &


    1
    """
  return _pysgpp_swig.createOperationGammaLog(*args)

def createOperationLB(*args):
  """
    createOperationLB(grid) -> OperationMatrix

    Parameters:
        grid: sg::base::Grid &


    1
    """
  return _pysgpp_swig.createOperationLB(*args)

def createOperationLE(*args):
  """
    createOperationLE(grid) -> OperationMatrix

    Parameters:
        grid: sg::base::Grid &


    1
    """
  return _pysgpp_swig.createOperationLE(*args)

def createOperationLD(*args):
  """
    createOperationLD(grid) -> OperationMatrix

    Parameters:
        grid: sg::base::Grid &


    1
    """
  return _pysgpp_swig.createOperationLD(*args)

def createOperationLF(*args):
  """
    createOperationLF(grid) -> OperationMatrix

    Parameters:
        grid: sg::base::Grid &


    1
    """
  return _pysgpp_swig.createOperationLF(*args)

def createOperationDelta(*args):
  """
    createOperationDelta(grid, coef) -> OperationMatrix

    Parameters:
        grid: sg::base::Grid &
        coef: sg::base::DataVector &


    1
    """
  return _pysgpp_swig.createOperationDelta(*args)

def createOperationDeltaLog(*args):
  """
    createOperationDeltaLog(grid, coef) -> OperationMatrix

    Parameters:
        grid: sg::base::Grid &
        coef: sg::base::DataVector &


    1
    """
  return _pysgpp_swig.createOperationDeltaLog(*args)

def createOperationHestonBLog(*args):
  """
    createOperationHestonBLog(grid, coef) -> OperationMatrix

    Parameters:
        grid: sg::base::Grid &
        coef: sg::base::DataMatrix &


    1
    """
  return _pysgpp_swig.createOperationHestonBLog(*args)

def createOperationHestonCLog(*args):
  """
    createOperationHestonCLog(grid, coef) -> OperationMatrix

    Parameters:
        grid: sg::base::Grid &
        coef: sg::base::DataMatrix &


    1
    """
  return _pysgpp_swig.createOperationHestonCLog(*args)

def createOperationHestonDLog(*args):
  """
    createOperationHestonDLog(grid, coef) -> OperationMatrix

    Parameters:
        grid: sg::base::Grid &
        coef: sg::base::DataVector &


    1
    """
  return _pysgpp_swig.createOperationHestonDLog(*args)

def createOperationHestonELog(*args):
  """
    createOperationHestonELog(grid, coef) -> OperationMatrix

    Parameters:
        grid: sg::base::Grid &
        coef: sg::base::DataVector &


    1
    """
  return _pysgpp_swig.createOperationHestonELog(*args)

def createOperationHestonFLog(*args):
  """
    createOperationHestonFLog(grid, coef) -> OperationMatrix

    Parameters:
        grid: sg::base::Grid &
        coef: sg::base::DataVector &


    1
    """
  return _pysgpp_swig.createOperationHestonFLog(*args)

def createOperationHestonGLog(*args):
  """
    createOperationHestonGLog(grid, coef) -> OperationMatrix

    Parameters:
        grid: sg::base::Grid &
        coef: sg::base::DataVector &


    1
    """
  return _pysgpp_swig.createOperationHestonGLog(*args)

def createOperationHestonHLog(*args):
  """
    createOperationHestonHLog(grid, coef) -> OperationMatrix

    Parameters:
        grid: sg::base::Grid &
        coef: sg::base::DataMatrix &


    1
    """
  return _pysgpp_swig.createOperationHestonHLog(*args)

def createOperationHestonKLog(*args):
  """
    createOperationHestonKLog(grid, coef) -> OperationMatrix

    Parameters:
        grid: sg::base::Grid &
        coef: sg::float_t *****


    1
    """
  return _pysgpp_swig.createOperationHestonKLog(*args)

def createOperationHestonX(*args):
  """
    createOperationHestonX(grid, coef) -> OperationMatrix

    Parameters:
        grid: sg::base::Grid &
        coef: sg::base::DataMatrix &


    1
    """
  return _pysgpp_swig.createOperationHestonX(*args)

def createOperationHestonY(*args):
  """
    createOperationHestonY(grid, coef) -> OperationMatrix

    Parameters:
        grid: sg::base::Grid &
        coef: sg::base::DataMatrix &


    1
    """
  return _pysgpp_swig.createOperationHestonY(*args)

def createOperationHestonW(*args):
  """
    createOperationHestonW(grid, coef) -> OperationMatrix

    Parameters:
        grid: sg::base::Grid &
        coef: sg::base::DataMatrix &


    1
    """
  return _pysgpp_swig.createOperationHestonW(*args)

def createOperationHestonZ(*args):
  """
    createOperationHestonZ(grid, coef) -> OperationMatrix

    Parameters:
        grid: sg::base::Grid &
        coef: sg::base::DataVector &


    1
    """
  return _pysgpp_swig.createOperationHestonZ(*args)
class SGSolver(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SGSolver, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SGSolver, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, nMaximumIterations, epsilon) -> SGSolver

        Parameters:
            nMaximumIterations: size_t
            epsilon: sg::float_t


        1
        """
        this = _pysgpp_swig.new_SGSolver(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_SGSolver
    __del__ = lambda self : None;
    def getNumberIterations(self):
        """
        getNumberIterations(self) -> size_t

        Parameters:
            self: sg::solver::SGSolver *


        1
        """
        return _pysgpp_swig.SGSolver_getNumberIterations(self)

    def getResiduum(self):
        """
        getResiduum(self) -> sg::float_t

        Parameters:
            self: sg::solver::SGSolver *


        1
        """
        return _pysgpp_swig.SGSolver_getResiduum(self)

    def setMaxIterations(self, *args):
        """
        setMaxIterations(self, nIterations)

        Parameters:
            nIterations: size_t


        1
        """
        return _pysgpp_swig.SGSolver_setMaxIterations(self, *args)

    def setEpsilon(self, *args):
        """
        setEpsilon(self, eps)

        Parameters:
            eps: sg::float_t


        1
        """
        return _pysgpp_swig.SGSolver_setEpsilon(self, *args)

    def getEpsilon(self):
        """
        getEpsilon(self) -> sg::float_t

        Parameters:
            self: sg::solver::SGSolver *


        1
        """
        return _pysgpp_swig.SGSolver_getEpsilon(self)

SGSolver_swigregister = _pysgpp_swig.SGSolver_swigregister
SGSolver_swigregister(SGSolver)

DEFAULT_RES_THRESHOLD = _pysgpp_swig.DEFAULT_RES_THRESHOLD
class SLESolver(SGSolver):
    """1"""
    __swig_setmethods__ = {}
    for _s in [SGSolver]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SLESolver, name, value)
    __swig_getmethods__ = {}
    for _s in [SGSolver]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SLESolver, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pysgpp_swig.delete_SLESolver
    __del__ = lambda self : None;
    def solve(self, *args):
        """
        solve(self, SystemMatrix, alpha, b, reuse=False, verbose=False, max_threshold=-1.0)

        Parameters:
            SystemMatrix: sg::base::OperationMatrix &
            alpha: sg::base::DataVector &
            b: sg::base::DataVector &
            reuse: bool
            verbose: bool
            max_threshold: sg::float_t

        solve(self, SystemMatrix, alpha, b, reuse=False, verbose=False)

        Parameters:
            SystemMatrix: sg::base::OperationMatrix &
            alpha: sg::base::DataVector &
            b: sg::base::DataVector &
            reuse: bool
            verbose: bool

        solve(self, SystemMatrix, alpha, b, reuse=False)

        Parameters:
            SystemMatrix: sg::base::OperationMatrix &
            alpha: sg::base::DataVector &
            b: sg::base::DataVector &
            reuse: bool

        solve(self, SystemMatrix, alpha, b)

        Parameters:
            SystemMatrix: sg::base::OperationMatrix &
            alpha: sg::base::DataVector &
            b: sg::base::DataVector &


        1
        """
        return _pysgpp_swig.SLESolver_solve(self, *args)

SLESolver_swigregister = _pysgpp_swig.SLESolver_swigregister
SLESolver_swigregister(SLESolver)

class ODESolver(SGSolver):
    """1"""
    __swig_setmethods__ = {}
    for _s in [SGSolver]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ODESolver, name, value)
    __swig_getmethods__ = {}
    for _s in [SGSolver]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ODESolver, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pysgpp_swig.delete_ODESolver
    __del__ = lambda self : None;
    def solve(self, *args):
        """
        solve(self, LinearSystemSolver, System, bIdentifyLastStep=False, verbose=False)

        Parameters:
            LinearSystemSolver: sg::solver::SLESolver &
            System: sg::pde::OperationParabolicPDESolverSystem &
            bIdentifyLastStep: bool
            verbose: bool

        solve(self, LinearSystemSolver, System, bIdentifyLastStep=False)

        Parameters:
            LinearSystemSolver: sg::solver::SLESolver &
            System: sg::pde::OperationParabolicPDESolverSystem &
            bIdentifyLastStep: bool

        solve(self, LinearSystemSolver, System)

        Parameters:
            LinearSystemSolver: sg::solver::SLESolver &
            System: sg::pde::OperationParabolicPDESolverSystem &


        1
        """
        return _pysgpp_swig.ODESolver_solve(self, *args)

ODESolver_swigregister = _pysgpp_swig.ODESolver_swigregister
ODESolver_swigregister(ODESolver)

class ConjugateGradients(SLESolver):
    """1"""
    __swig_setmethods__ = {}
    for _s in [SLESolver]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConjugateGradients, name, value)
    __swig_getmethods__ = {}
    for _s in [SLESolver]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ConjugateGradients, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, imax, epsilon) -> ConjugateGradients

        Parameters:
            imax: size_t
            epsilon: sg::float_t


        1
        """
        if self.__class__ == ConjugateGradients:
            _self = None
        else:
            _self = self
        this = _pysgpp_swig.new_ConjugateGradients(_self, *args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_ConjugateGradients
    __del__ = lambda self : None;
    def solve(self, *args):
        """
        solve(self, SystemMatrix, alpha, b, reuse=False, verbose=False, max_threshold=-1.0)

        Parameters:
            SystemMatrix: sg::base::OperationMatrix &
            alpha: sg::base::DataVector &
            b: sg::base::DataVector &
            reuse: bool
            verbose: bool
            max_threshold: sg::float_t

        solve(self, SystemMatrix, alpha, b, reuse=False, verbose=False)

        Parameters:
            SystemMatrix: sg::base::OperationMatrix &
            alpha: sg::base::DataVector &
            b: sg::base::DataVector &
            reuse: bool
            verbose: bool

        solve(self, SystemMatrix, alpha, b, reuse=False)

        Parameters:
            SystemMatrix: sg::base::OperationMatrix &
            alpha: sg::base::DataVector &
            b: sg::base::DataVector &
            reuse: bool

        solve(self, SystemMatrix, alpha, b)

        Parameters:
            SystemMatrix: sg::base::OperationMatrix &
            alpha: sg::base::DataVector &
            b: sg::base::DataVector &


        1
        """
        return _pysgpp_swig.ConjugateGradients_solve(self, *args)

    def starting(self):
        """
        starting(self)

        Parameters:
            self: sg::solver::ConjugateGradients *


        1
        """
        return _pysgpp_swig.ConjugateGradients_starting(self)

    def calcStarting(self):
        """
        calcStarting(self)

        Parameters:
            self: sg::solver::ConjugateGradients *


        1
        """
        return _pysgpp_swig.ConjugateGradients_calcStarting(self)

    def iterationComplete(self):
        """
        iterationComplete(self)

        Parameters:
            self: sg::solver::ConjugateGradients *


        1
        """
        return _pysgpp_swig.ConjugateGradients_iterationComplete(self)

    def complete(self):
        """
        complete(self)

        Parameters:
            self: sg::solver::ConjugateGradients *


        1
        """
        return _pysgpp_swig.ConjugateGradients_complete(self)

    def __disown__(self):
        self.this.disown()
        _pysgpp_swig.disown_ConjugateGradients(self)
        return weakref_proxy(self)
ConjugateGradients_swigregister = _pysgpp_swig.ConjugateGradients_swigregister
ConjugateGradients_swigregister(ConjugateGradients)

class BiCGStab(SLESolver):
    """1"""
    __swig_setmethods__ = {}
    for _s in [SLESolver]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BiCGStab, name, value)
    __swig_getmethods__ = {}
    for _s in [SLESolver]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, BiCGStab, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, imax, epsilon) -> BiCGStab

        Parameters:
            imax: size_t
            epsilon: sg::float_t


        1
        """
        this = _pysgpp_swig.new_BiCGStab(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_BiCGStab
    __del__ = lambda self : None;
    def solve(self, *args):
        """
        solve(self, SystemMatrix, alpha, b, reuse=False, verbose=False, max_threshold=-1.0)

        Parameters:
            SystemMatrix: sg::base::OperationMatrix &
            alpha: sg::base::DataVector &
            b: sg::base::DataVector &
            reuse: bool
            verbose: bool
            max_threshold: sg::float_t

        solve(self, SystemMatrix, alpha, b, reuse=False, verbose=False)

        Parameters:
            SystemMatrix: sg::base::OperationMatrix &
            alpha: sg::base::DataVector &
            b: sg::base::DataVector &
            reuse: bool
            verbose: bool

        solve(self, SystemMatrix, alpha, b, reuse=False)

        Parameters:
            SystemMatrix: sg::base::OperationMatrix &
            alpha: sg::base::DataVector &
            b: sg::base::DataVector &
            reuse: bool

        solve(self, SystemMatrix, alpha, b)

        Parameters:
            SystemMatrix: sg::base::OperationMatrix &
            alpha: sg::base::DataVector &
            b: sg::base::DataVector &


        1
        """
        return _pysgpp_swig.BiCGStab_solve(self, *args)

BiCGStab_swigregister = _pysgpp_swig.BiCGStab_swigregister
BiCGStab_swigregister(BiCGStab)

class Euler(ODESolver):
    """1"""
    __swig_setmethods__ = {}
    for _s in [ODESolver]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Euler, name, value)
    __swig_getmethods__ = {}
    for _s in [ODESolver]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Euler, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, Mode, imax, timestepSize, generateAnimation=False, numEvalsAnimation=20, screen=None) -> Euler

        Parameters:
            Mode: std::string
            imax: size_t
            timestepSize: sg::float_t
            generateAnimation: bool
            numEvalsAnimation: size_t
            screen: sg::base::ScreenOutput *

        __init__(self, Mode, imax, timestepSize, generateAnimation=False, numEvalsAnimation=20) -> Euler

        Parameters:
            Mode: std::string
            imax: size_t
            timestepSize: sg::float_t
            generateAnimation: bool
            numEvalsAnimation: size_t

        __init__(self, Mode, imax, timestepSize, generateAnimation=False) -> Euler

        Parameters:
            Mode: std::string
            imax: size_t
            timestepSize: sg::float_t
            generateAnimation: bool

        __init__(self, Mode, imax, timestepSize) -> Euler

        Parameters:
            Mode: std::string
            imax: size_t
            timestepSize: sg::float_t


        1
        """
        this = _pysgpp_swig.new_Euler(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_Euler
    __del__ = lambda self : None;
    def solve(self, *args):
        """
        solve(self, LinearSystemSolver, System, bIdentifyLastStep=False, verbose=False)

        Parameters:
            LinearSystemSolver: sg::solver::SLESolver &
            System: sg::pde::OperationParabolicPDESolverSystem &
            bIdentifyLastStep: bool
            verbose: bool

        solve(self, LinearSystemSolver, System, bIdentifyLastStep=False)

        Parameters:
            LinearSystemSolver: sg::solver::SLESolver &
            System: sg::pde::OperationParabolicPDESolverSystem &
            bIdentifyLastStep: bool

        solve(self, LinearSystemSolver, System)

        Parameters:
            LinearSystemSolver: sg::solver::SLESolver &
            System: sg::pde::OperationParabolicPDESolverSystem &


        1
        """
        return _pysgpp_swig.Euler_solve(self, *args)

Euler_swigregister = _pysgpp_swig.Euler_swigregister
Euler_swigregister(Euler)

class CrankNicolson(ODESolver):
    """1"""
    __swig_setmethods__ = {}
    for _s in [ODESolver]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CrankNicolson, name, value)
    __swig_getmethods__ = {}
    for _s in [ODESolver]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CrankNicolson, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, nTimesteps, timestepSize, screen=None) -> CrankNicolson

        Parameters:
            nTimesteps: size_t
            timestepSize: sg::float_t
            screen: sg::base::ScreenOutput *

        __init__(self, nTimesteps, timestepSize) -> CrankNicolson

        Parameters:
            nTimesteps: size_t
            timestepSize: sg::float_t


        1
        """
        this = _pysgpp_swig.new_CrankNicolson(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_CrankNicolson
    __del__ = lambda self : None;
    def solve(self, *args):
        """
        solve(self, LinearSystemSolver, System, bIdentifyLastStep=False, verbose=False)

        Parameters:
            LinearSystemSolver: sg::solver::SLESolver &
            System: sg::pde::OperationParabolicPDESolverSystem &
            bIdentifyLastStep: bool
            verbose: bool

        solve(self, LinearSystemSolver, System, bIdentifyLastStep=False)

        Parameters:
            LinearSystemSolver: sg::solver::SLESolver &
            System: sg::pde::OperationParabolicPDESolverSystem &
            bIdentifyLastStep: bool

        solve(self, LinearSystemSolver, System)

        Parameters:
            LinearSystemSolver: sg::solver::SLESolver &
            System: sg::pde::OperationParabolicPDESolverSystem &


        1
        """
        return _pysgpp_swig.CrankNicolson_solve(self, *args)

CrankNicolson_swigregister = _pysgpp_swig.CrankNicolson_swigregister
CrankNicolson_swigregister(CrankNicolson)

CG = _pysgpp_swig.CG
BiCGSTAB = _pysgpp_swig.BiCGSTAB
class SLESolverConfiguration(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SLESolverConfiguration, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SLESolverConfiguration, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type_"] = _pysgpp_swig.SLESolverConfiguration_type__set
    __swig_getmethods__["type_"] = _pysgpp_swig.SLESolverConfiguration_type__get
    if _newclass:type_ = _swig_property(_pysgpp_swig.SLESolverConfiguration_type__get, _pysgpp_swig.SLESolverConfiguration_type__set)
    __swig_setmethods__["eps_"] = _pysgpp_swig.SLESolverConfiguration_eps__set
    __swig_getmethods__["eps_"] = _pysgpp_swig.SLESolverConfiguration_eps__get
    if _newclass:eps_ = _swig_property(_pysgpp_swig.SLESolverConfiguration_eps__get, _pysgpp_swig.SLESolverConfiguration_eps__set)
    __swig_setmethods__["maxIterations_"] = _pysgpp_swig.SLESolverConfiguration_maxIterations__set
    __swig_getmethods__["maxIterations_"] = _pysgpp_swig.SLESolverConfiguration_maxIterations__get
    if _newclass:maxIterations_ = _swig_property(_pysgpp_swig.SLESolverConfiguration_maxIterations__get, _pysgpp_swig.SLESolverConfiguration_maxIterations__set)
    __swig_setmethods__["threshold_"] = _pysgpp_swig.SLESolverConfiguration_threshold__set
    __swig_getmethods__["threshold_"] = _pysgpp_swig.SLESolverConfiguration_threshold__get
    if _newclass:threshold_ = _swig_property(_pysgpp_swig.SLESolverConfiguration_threshold__get, _pysgpp_swig.SLESolverConfiguration_threshold__set)
    def __init__(self): 
        """
        __init__(self) -> SLESolverConfiguration

        1
        """
        this = _pysgpp_swig.new_SLESolverConfiguration()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_SLESolverConfiguration
    __del__ = lambda self : None;
SLESolverConfiguration_swigregister = _pysgpp_swig.SLESolverConfiguration_swigregister
SLESolverConfiguration_swigregister(SLESolverConfiguration)

class SLESolverSPConfiguration(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SLESolverSPConfiguration, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SLESolverSPConfiguration, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type_"] = _pysgpp_swig.SLESolverSPConfiguration_type__set
    __swig_getmethods__["type_"] = _pysgpp_swig.SLESolverSPConfiguration_type__get
    if _newclass:type_ = _swig_property(_pysgpp_swig.SLESolverSPConfiguration_type__get, _pysgpp_swig.SLESolverSPConfiguration_type__set)
    __swig_setmethods__["eps_"] = _pysgpp_swig.SLESolverSPConfiguration_eps__set
    __swig_getmethods__["eps_"] = _pysgpp_swig.SLESolverSPConfiguration_eps__get
    if _newclass:eps_ = _swig_property(_pysgpp_swig.SLESolverSPConfiguration_eps__get, _pysgpp_swig.SLESolverSPConfiguration_eps__set)
    __swig_setmethods__["maxIterations_"] = _pysgpp_swig.SLESolverSPConfiguration_maxIterations__set
    __swig_getmethods__["maxIterations_"] = _pysgpp_swig.SLESolverSPConfiguration_maxIterations__get
    if _newclass:maxIterations_ = _swig_property(_pysgpp_swig.SLESolverSPConfiguration_maxIterations__get, _pysgpp_swig.SLESolverSPConfiguration_maxIterations__set)
    __swig_setmethods__["threshold_"] = _pysgpp_swig.SLESolverSPConfiguration_threshold__set
    __swig_getmethods__["threshold_"] = _pysgpp_swig.SLESolverSPConfiguration_threshold__get
    if _newclass:threshold_ = _swig_property(_pysgpp_swig.SLESolverSPConfiguration_threshold__get, _pysgpp_swig.SLESolverSPConfiguration_threshold__set)
    def __init__(self): 
        """
        __init__(self) -> SLESolverSPConfiguration

        1
        """
        this = _pysgpp_swig.new_SLESolverSPConfiguration()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_SLESolverSPConfiguration
    __del__ = lambda self : None;
SLESolverSPConfiguration_swigregister = _pysgpp_swig.SLESolverSPConfiguration_swigregister
SLESolverSPConfiguration_swigregister(SLESolverSPConfiguration)

class Random(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Random, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Random, name)
    __repr__ = _swig_repr
    def seed(*args):
        """
        seed(seed_value)

        Parameters:
            seed_value: int


        1
        """
        return _pysgpp_swig.Random_seed(*args)

    if _newclass:seed = staticmethod(seed)
    __swig_getmethods__["seed"] = lambda x: seed
    def random():
        """
        random() -> int

        1
        """
        return _pysgpp_swig.Random_random()

    if _newclass:random = staticmethod(random)
    __swig_getmethods__["random"] = lambda x: random
    def random_double():
        """
        random_double() -> sg::float_t

        1
        """
        return _pysgpp_swig.Random_random_double()

    if _newclass:random_double = staticmethod(random_double)
    __swig_getmethods__["random_double"] = lambda x: random_double
    def __init__(self): 
        """
        __init__(self) -> Random

        1
        """
        this = _pysgpp_swig.new_Random()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_Random
    __del__ = lambda self : None;
Random_swigregister = _pysgpp_swig.Random_swigregister
Random_swigregister(Random)

def Random_seed(*args):
  """
    Random_seed(seed_value)

    Parameters:
        seed_value: int


    1
    """
  return _pysgpp_swig.Random_seed(*args)

def Random_random():
  """
    Random_random() -> int

    1
    """
  return _pysgpp_swig.Random_random()

def Random_random_double():
  """
    Random_random_double() -> sg::float_t

    1
    """
  return _pysgpp_swig.Random_random_double()

class SampleGenerator(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SampleGenerator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SampleGenerator, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, dimensions, seed=-1) -> SampleGenerator

        Parameters:
            dimensions: size_t
            seed: int

        __init__(self, dimensions) -> SampleGenerator

        Parameters:
            dimensions: size_t


        1
        """
        this = _pysgpp_swig.new_SampleGenerator(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_SampleGenerator
    __del__ = lambda self : None;
    def getSample(self, *args):
        """
        getSample(self, sample)

        Parameters:
            sample: sg::base::DataVector &


        1
        """
        return _pysgpp_swig.SampleGenerator_getSample(self, *args)

    def getSamples(self, *args):
        """
        getSamples(self, samples)

        Parameters:
            samples: sg::base::DataMatrix &


        1
        """
        return _pysgpp_swig.SampleGenerator_getSamples(self, *args)

    def getDimensions(self):
        """
        getDimensions(self) -> size_t

        Parameters:
            self: sg::quadrature::SampleGenerator *


        1
        """
        return _pysgpp_swig.SampleGenerator_getDimensions(self)

    def setDimensions(self, *args):
        """
        setDimensions(self, dimensions)

        Parameters:
            dimensions: size_t


        1
        """
        return _pysgpp_swig.SampleGenerator_setDimensions(self, *args)

SampleGenerator_swigregister = _pysgpp_swig.SampleGenerator_swigregister
SampleGenerator_swigregister(SampleGenerator)

class NaiveSampleGenerator(SampleGenerator):
    """1"""
    __swig_setmethods__ = {}
    for _s in [SampleGenerator]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NaiveSampleGenerator, name, value)
    __swig_getmethods__ = {}
    for _s in [SampleGenerator]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, NaiveSampleGenerator, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, dimension, seed=-1) -> NaiveSampleGenerator

        Parameters:
            dimension: size_t
            seed: int

        __init__(self, dimension) -> NaiveSampleGenerator

        Parameters:
            dimension: size_t


        1
        """
        this = _pysgpp_swig.new_NaiveSampleGenerator(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_NaiveSampleGenerator
    __del__ = lambda self : None;
NaiveSampleGenerator_swigregister = _pysgpp_swig.NaiveSampleGenerator_swigregister
NaiveSampleGenerator_swigregister(NaiveSampleGenerator)

class LatinHypercubeSampleGenerator(SampleGenerator):
    """1"""
    __swig_setmethods__ = {}
    for _s in [SampleGenerator]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LatinHypercubeSampleGenerator, name, value)
    __swig_getmethods__ = {}
    for _s in [SampleGenerator]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, LatinHypercubeSampleGenerator, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, dimensions, numberOfSamples, seed=-1) -> LatinHypercubeSampleGenerator

        Parameters:
            dimensions: size_t
            numberOfSamples: size_t
            seed: int

        __init__(self, dimensions, numberOfSamples) -> LatinHypercubeSampleGenerator

        Parameters:
            dimensions: size_t
            numberOfSamples: size_t


        1
        """
        this = _pysgpp_swig.new_LatinHypercubeSampleGenerator(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_LatinHypercubeSampleGenerator
    __del__ = lambda self : None;
LatinHypercubeSampleGenerator_swigregister = _pysgpp_swig.LatinHypercubeSampleGenerator_swigregister
LatinHypercubeSampleGenerator_swigregister(LatinHypercubeSampleGenerator)

class StratifiedSampleGenerator(SampleGenerator):
    """1"""
    __swig_setmethods__ = {}
    for _s in [SampleGenerator]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StratifiedSampleGenerator, name, value)
    __swig_getmethods__ = {}
    for _s in [SampleGenerator]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, StratifiedSampleGenerator, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, strataPerDimension, seed=-1) -> StratifiedSampleGenerator

        Parameters:
            strataPerDimension: std::vector< size_t,std::allocator< size_t > > &
            seed: int

        __init__(self, strataPerDimension) -> StratifiedSampleGenerator

        Parameters:
            strataPerDimension: std::vector< size_t,std::allocator< size_t > > &


        1
        """
        this = _pysgpp_swig.new_StratifiedSampleGenerator(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_StratifiedSampleGenerator
    __del__ = lambda self : None;
StratifiedSampleGenerator_swigregister = _pysgpp_swig.StratifiedSampleGenerator_swigregister
StratifiedSampleGenerator_swigregister(StratifiedSampleGenerator)

class HaltonSampleGenerator(SampleGenerator):
    """1"""
    __swig_setmethods__ = {}
    for _s in [SampleGenerator]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HaltonSampleGenerator, name, value)
    __swig_getmethods__ = {}
    for _s in [SampleGenerator]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, HaltonSampleGenerator, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, dimension) -> HaltonSampleGenerator

        Parameters:
            dimension: size_t


        1
        """
        this = _pysgpp_swig.new_HaltonSampleGenerator(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_HaltonSampleGenerator
    __del__ = lambda self : None;
HaltonSampleGenerator_swigregister = _pysgpp_swig.HaltonSampleGenerator_swigregister
HaltonSampleGenerator_swigregister(HaltonSampleGenerator)


def COMBIGRID_DMAX(*args):
  """
    COMBIGRID_DMAX(v1, v2) -> double

    Parameters:
        v1: double
        v2: double


    1
    """
  return _pysgpp_swig.COMBIGRID_DMAX(*args)

def COMBIGRID_IMAX(*args):
  """
    COMBIGRID_IMAX(v1, v2) -> int

    Parameters:
        v1: int
        v2: int


    1
    """
  return _pysgpp_swig.COMBIGRID_IMAX(*args)

def COMBIGRID_DMIN(*args):
  """
    COMBIGRID_DMIN(v1, v2) -> double

    Parameters:
        v1: double
        v2: double


    1
    """
  return _pysgpp_swig.COMBIGRID_DMIN(*args)

def COMBIGRID_IMIN(*args):
  """
    COMBIGRID_IMIN(v1, v2) -> int

    Parameters:
        v1: int
        v2: int


    1
    """
  return _pysgpp_swig.COMBIGRID_IMIN(*args)

def combination(*args):
  """
    combination(n, k) -> int

    Parameters:
        n: int
        k: int


    1
    """
  return _pysgpp_swig.combination(*args)

def l2_norm(*args):
  """
    l2_norm(v1) -> double

    Parameters:
        v1: std::vector< double,std::allocator< double > > *


    1
    """
  return _pysgpp_swig.l2_norm(*args)

def inf_norm(*args):
  """
    inf_norm(v1) -> double

    Parameters:
        v1: std::vector< double,std::allocator< double > > *


    1
    """
  return _pysgpp_swig.inf_norm(*args)

def vect_mul(*args):
  """
    vect_mul(v1, v2)

    Parameters:
        v1: std::vector< double,std::allocator< double > > *
        v2: std::vector< double,std::allocator< double > > *


    1
    """
  return _pysgpp_swig.vect_mul(*args)

def vect_diff(*args):
  """
    vect_diff(v1, v2)

    Parameters:
        v1: std::vector< double,std::allocator< double > > *
        v2: std::vector< double,std::allocator< double > > *


    1
    """
  return _pysgpp_swig.vect_diff(*args)

def vect_add_mul(*args):
  """
    vect_add_mul(coefv1, v1, coefv2, v2)

    Parameters:
        coefv1: double
        v1: std::vector< double,std::allocator< double > > *
        coefv2: double
        v2: std::vector< double,std::allocator< double > > *


    1
    """
  return _pysgpp_swig.vect_add_mul(*args)

def scalar_product(*args):
  """
    scalar_product(v1, v2, result)

    Parameters:
        v1: std::vector< double,std::allocator< double > > *
        v2: std::vector< double,std::allocator< double > > *
        result: double &


    1
    """
  return _pysgpp_swig.scalar_product(*args)

def vect_setvalue(*args):
  """
    vect_setvalue(v1, newValue)

    Parameters:
        v1: std::vector< double,std::allocator< double > > *
        newValue: double


    1
    """
  return _pysgpp_swig.vect_setvalue(*args)

def plot_vect(*args):
  """
    plot_vect(level, verb, v1, stri)

    Parameters:
        level: int
        verb: int
        v1: std::vector< double,std::allocator< double > > *
        stri: char const *


    1
    """
  return _pysgpp_swig.plot_vect(*args)
class CombigridLevelVector(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CombigridLevelVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CombigridLevelVector, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, level) -> CombigridLevelVector

        Parameters:
            level: std::vector< int,std::allocator< int > >

        __init__(self, dim) -> CombigridLevelVector

        Parameters:
            dim: int

        __init__(self) -> CombigridLevelVector
        __init__(self, level, coef) -> CombigridLevelVector

        Parameters:
            level: std::vector< int,std::allocator< int > >
            coef: double

        __init__(self, input, coef) -> CombigridLevelVector

        Parameters:
            input: std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > >
            coef: std::vector< double,std::allocator< double > >


        1
        """
        this = _pysgpp_swig.new_CombigridLevelVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def getLevelVec(self):
        """
        getLevelVec(self) -> IntIntVector

        Parameters:
            self: combigrid::CombigridLevelVector const *


        1
        """
        return _pysgpp_swig.CombigridLevelVector_getLevelVec(self)

    def getLevelVecSingle(self, *args):
        """
        getLevelVecSingle(self, i) -> IntVector

        Parameters:
            i: int


        1
        """
        return _pysgpp_swig.CombigridLevelVector_getLevelVecSingle(self, *args)

    def getCoef(self):
        """
        getCoef(self) -> DoubleVector

        Parameters:
            self: combigrid::CombigridLevelVector const *


        1
        """
        return _pysgpp_swig.CombigridLevelVector_getCoef(self)

    def getDim(self):
        """
        getDim(self) -> int

        Parameters:
            self: combigrid::CombigridLevelVector const *


        1
        """
        return _pysgpp_swig.CombigridLevelVector_getDim(self)

    def getN(self):
        """
        getN(self) -> int

        Parameters:
            self: combigrid::CombigridLevelVector const *


        1
        """
        return _pysgpp_swig.CombigridLevelVector_getN(self)

    def __mul__(self, *args):
        """
        __mul__(self, b) -> CombigridLevelVector

        Parameters:
            b: combigrid::CombigridLevelVector const &


        1
        """
        return _pysgpp_swig.CombigridLevelVector___mul__(self, *args)

    def __add__(self, *args):
        """
        __add__(self, b) -> CombigridLevelVector

        Parameters:
            b: combigrid::CombigridLevelVector const &


        1
        """
        return _pysgpp_swig.CombigridLevelVector___add__(self, *args)

    def __sub__(self, *args):
        """
        __sub__(self, b) -> CombigridLevelVector

        Parameters:
            b: combigrid::CombigridLevelVector const &


        1
        """
        return _pysgpp_swig.CombigridLevelVector___sub__(self, *args)

    def doAddition(self):
        """
        doAddition(self)

        Parameters:
            self: combigrid::CombigridLevelVector *


        1
        """
        return _pysgpp_swig.CombigridLevelVector_doAddition(self)

    def printLevelVec(self):
        """
        printLevelVec(self)

        Parameters:
            self: combigrid::CombigridLevelVector *


        1
        """
        return _pysgpp_swig.CombigridLevelVector_printLevelVec(self)

    def split(self):
        """
        split(self) -> std::vector< combigrid::CombigridLevelVector,std::allocator< combigrid::CombigridLevelVector > >

        Parameters:
            self: combigrid::CombigridLevelVector *


        1
        """
        return _pysgpp_swig.CombigridLevelVector_split(self)

    def getCombiLevels(*args):
        """
        getCombiLevels(input) -> CombigridLevelVector

        Parameters:
            input: std::vector< combigrid::CombigridLevelVector,std::allocator< combigrid::CombigridLevelVector > >

        getCombiLevels(input) -> CombigridLevelVector

        Parameters:
            input: std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > >

        getCombiLevels(input) -> CombigridLevelVector

        Parameters:
            input: combigrid::CombigridLevelVector


        1
        """
        return _pysgpp_swig.CombigridLevelVector_getCombiLevels(*args)

    if _newclass:getCombiLevels = staticmethod(getCombiLevels)
    __swig_getmethods__["getCombiLevels"] = lambda x: getCombiLevels
    def getChanges(self, *args):
        """
        getChanges(self, newFullGridLevels) -> CombigridLevelVector

        Parameters:
            newFullGridLevels: std::vector< int,std::allocator< int > >


        1
        """
        return _pysgpp_swig.CombigridLevelVector_getChanges(self, *args)

    def update(self, *args):
        """
        update(self, newFullGridLevels)

        Parameters:
            newFullGridLevels: std::vector< int,std::allocator< int > >


        1
        """
        return _pysgpp_swig.CombigridLevelVector_update(self, *args)

    __swig_destroy__ = _pysgpp_swig.delete_CombigridLevelVector
    __del__ = lambda self : None;
CombigridLevelVector_swigregister = _pysgpp_swig.CombigridLevelVector_swigregister
CombigridLevelVector_swigregister(CombigridLevelVector)
powerOfTwo = cvar.powerOfTwo
oneOverPowOfTwo = cvar.oneOverPowOfTwo

def CombigridLevelVector_getCombiLevels(*args):
  """
    getCombiLevels(input) -> CombigridLevelVector

    Parameters:
        input: std::vector< combigrid::CombigridLevelVector,std::allocator< combigrid::CombigridLevelVector > >

    getCombiLevels(input) -> CombigridLevelVector

    Parameters:
        input: std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > >

    CombigridLevelVector_getCombiLevels(input) -> CombigridLevelVector

    Parameters:
        input: combigrid::CombigridLevelVector


    1
    """
  return _pysgpp_swig.CombigridLevelVector_getCombiLevels(*args)

class BasisFunctionBasis(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BasisFunctionBasis, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BasisFunctionBasis, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def functionEval1(self, *args):
        """
        functionEval1(self, coord) -> double

        Parameters:
            coord: double


        1
        """
        return _pysgpp_swig.BasisFunctionBasis_functionEval1(self, *args)

    def functionEval2(self, *args):
        """
        functionEval2(self, coord) -> double

        Parameters:
            coord: double


        1
        """
        return _pysgpp_swig.BasisFunctionBasis_functionEval2(self, *args)

    __swig_destroy__ = _pysgpp_swig.delete_BasisFunctionBasis
    __del__ = lambda self : None;
BasisFunctionBasis_swigregister = _pysgpp_swig.BasisFunctionBasis_swigregister
BasisFunctionBasis_swigregister(BasisFunctionBasis)

class LinearBasisFunction(BasisFunctionBasis):
    """1"""
    __swig_setmethods__ = {}
    for _s in [BasisFunctionBasis]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LinearBasisFunction, name, value)
    __swig_getmethods__ = {}
    for _s in [BasisFunctionBasis]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, LinearBasisFunction, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """
        __init__(self) -> LinearBasisFunction

        1
        """
        this = _pysgpp_swig.new_LinearBasisFunction()
        try: self.this.append(this)
        except: self.this = this
    def getDefaultBasis():
        """
        getDefaultBasis() -> BasisFunctionBasis

        1
        """
        return _pysgpp_swig.LinearBasisFunction_getDefaultBasis()

    if _newclass:getDefaultBasis = staticmethod(getDefaultBasis)
    __swig_getmethods__["getDefaultBasis"] = lambda x: getDefaultBasis
    __swig_destroy__ = _pysgpp_swig.delete_LinearBasisFunction
    __del__ = lambda self : None;
LinearBasisFunction_swigregister = _pysgpp_swig.LinearBasisFunction_swigregister
LinearBasisFunction_swigregister(LinearBasisFunction)

def LinearBasisFunction_getDefaultBasis():
  """
    LinearBasisFunction_getDefaultBasis() -> BasisFunctionBasis

    1
    """
  return _pysgpp_swig.LinearBasisFunction_getDefaultBasis()

class AbstractStretchingMaker(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AbstractStretchingMaker, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AbstractStretchingMaker, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def get1DStretching(self, *args):
        """
        get1DStretching(self, level, min, max, stretching)

        Parameters:
            level: int
            min: double
            max: double
            stretching: std::vector< double,std::allocator< double > > &


        1
        """
        return _pysgpp_swig.AbstractStretchingMaker_get1DStretching(self, *args)

    __swig_destroy__ = _pysgpp_swig.delete_AbstractStretchingMaker
    __del__ = lambda self : None;
AbstractStretchingMaker_swigregister = _pysgpp_swig.AbstractStretchingMaker_swigregister
AbstractStretchingMaker_swigregister(AbstractStretchingMaker)

class Domain1D(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Domain1D, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Domain1D, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, min, max) -> Domain1D

        Parameters:
            min: double
            max: double

        __init__(self, inputStretching) -> Domain1D

        Parameters:
            inputStretching: std::vector< double,std::allocator< double > > const &

        __init__(self, level, min, max, stretching) -> Domain1D

        Parameters:
            level: int
            min: double
            max: double
            stretching: combigrid::AbstractStretchingMaker const &


        1
        """
        this = _pysgpp_swig.new_Domain1D(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_Domain1D
    __del__ = lambda self : None;
    def isAxisScaled(self):
        """
        isAxisScaled(self) -> bool

        Parameters:
            self: combigrid::Domain1D const *


        1
        """
        return _pysgpp_swig.Domain1D_isAxisScaled(self)

    def getMinDomain(self):
        """
        getMinDomain(self) -> double

        Parameters:
            self: combigrid::Domain1D const *


        1
        """
        return _pysgpp_swig.Domain1D_getMinDomain(self)

    def getMaxDomain(self):
        """
        getMaxDomain(self) -> double

        Parameters:
            self: combigrid::Domain1D const *


        1
        """
        return _pysgpp_swig.Domain1D_getMaxDomain(self)

    def axisScaling(self):
        """
        axisScaling(self) -> DoubleVector

        Parameters:
            self: combigrid::Domain1D const *


        1
        """
        return _pysgpp_swig.Domain1D_axisScaling(self)

    def getLevel(self):
        """
        getLevel(self) -> int

        Parameters:
            self: combigrid::Domain1D const *


        1
        """
        return _pysgpp_swig.Domain1D_getLevel(self)

    def transformRealToUnit(self, *args):
        """
        transformRealToUnit(self, coordReal, coordUnit, level_in=0, noBoundary=False)

        Parameters:
            coordReal: double
            coordUnit: double &
            level_in: int
            noBoundary: bool

        transformRealToUnit(self, coordReal, coordUnit, level_in=0)

        Parameters:
            coordReal: double
            coordUnit: double &
            level_in: int

        transformRealToUnit(self, coordReal, coordUnit)

        Parameters:
            coordReal: double
            coordUnit: double &


        1
        """
        return _pysgpp_swig.Domain1D_transformRealToUnit(self, *args)

    def transformUnitToReal(self, *args):
        """
        transformUnitToReal(self, level, index, realCoord)

        Parameters:
            level: int
            index: int
            realCoord: double &


        1
        """
        return _pysgpp_swig.Domain1D_transformUnitToReal(self, *args)

    def findEntry(self, *args):
        """
        findEntry(self, coordReal, level_in, startIndex, intersect)

        Parameters:
            coordReal: double
            level_in: int
            startIndex: int &
            intersect: double &


        1
        """
        return _pysgpp_swig.Domain1D_findEntry(self, *args)

    def getMeshWidth(self, *args):
        """
        getMeshWidth(self, index, level_in, h0, h1)

        Parameters:
            index: int
            level_in: int
            h0: double &
            h1: double &


        1
        """
        return _pysgpp_swig.Domain1D_getMeshWidth(self, *args)

Domain1D_swigregister = _pysgpp_swig.Domain1D_swigregister
Domain1D_swigregister(Domain1D)

class GridDomain(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GridDomain, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GridDomain, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, dim, levels, min, max, stretchingMaker) -> GridDomain

        Parameters:
            dim: int
            levels: std::vector< int,std::allocator< int > > const &
            min: std::vector< double,std::allocator< double > > const &
            max: std::vector< double,std::allocator< double > > const &
            stretchingMaker: combigrid::AbstractStretchingMaker const &

        __init__(self, dim, scalings) -> GridDomain

        Parameters:
            dim: int
            scalings: std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > const &

        __init__(self, dim, min, max) -> GridDomain

        Parameters:
            dim: int
            min: std::vector< double,std::allocator< double > > const &
            max: std::vector< double,std::allocator< double > > const &


        1
        """
        this = _pysgpp_swig.new_GridDomain(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_GridDomain
    __del__ = lambda self : None;
    def transformRealToUnit(self, *args):
        """
        transformRealToUnit(self, coords, levels_in, boundaryFlag)

        Parameters:
            coords: std::vector< double,std::allocator< double > > &
            levels_in: std::vector< int,std::allocator< int > > const &
            boundaryFlag: std::vector< bool,std::allocator< bool > > const &


        1
        """
        return _pysgpp_swig.GridDomain_transformRealToUnit(self, *args)

    def get1DDomain(self, *args):
        """
        get1DDomain(self, d) -> Domain1D

        Parameters:
            d: int


        1
        """
        return _pysgpp_swig.GridDomain_get1DDomain(self, *args)

    def printDomain(self):
        """
        printDomain(self)

        Parameters:
            self: combigrid::GridDomain *


        1
        """
        return _pysgpp_swig.GridDomain_printDomain(self)

GridDomain_swigregister = _pysgpp_swig.GridDomain_swigregister
GridDomain_swigregister(GridDomain)

class AtanSpecialStretching(AbstractStretchingMaker):
    """1"""
    __swig_setmethods__ = {}
    for _s in [AbstractStretchingMaker]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AtanSpecialStretching, name, value)
    __swig_getmethods__ = {}
    for _s in [AbstractStretchingMaker]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, AtanSpecialStretching, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """
        __init__(self) -> AtanSpecialStretching

        1
        """
        this = _pysgpp_swig.new_AtanSpecialStretching()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_AtanSpecialStretching
    __del__ = lambda self : None;
AtanSpecialStretching_swigregister = _pysgpp_swig.AtanSpecialStretching_swigregister
AtanSpecialStretching_swigregister(AtanSpecialStretching)

class TanStretching(AbstractStretchingMaker):
    """1"""
    __swig_setmethods__ = {}
    for _s in [AbstractStretchingMaker]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TanStretching, name, value)
    __swig_getmethods__ = {}
    for _s in [AbstractStretchingMaker]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TanStretching, name)
    __repr__ = _swig_repr
    def __init__(self, intFact=1.0/7.0): 
        """
        __init__(self, intFact=1.0/7.0) -> TanStretching

        Parameters:
            intFact: double

        __init__(self) -> TanStretching

        1
        """
        this = _pysgpp_swig.new_TanStretching(intFact)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_TanStretching
    __del__ = lambda self : None;
TanStretching_swigregister = _pysgpp_swig.TanStretching_swigregister
TanStretching_swigregister(TanStretching)

class UniformStretching(AbstractStretchingMaker):
    """1"""
    __swig_setmethods__ = {}
    for _s in [AbstractStretchingMaker]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UniformStretching, name, value)
    __swig_getmethods__ = {}
    for _s in [AbstractStretchingMaker]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, UniformStretching, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """
        __init__(self) -> UniformStretching

        1
        """
        this = _pysgpp_swig.new_UniformStretching()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_UniformStretching
    __del__ = lambda self : None;
UniformStretching_swigregister = _pysgpp_swig.UniformStretching_swigregister
UniformStretching_swigregister(UniformStretching)

class CombiSchemeBasis(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CombiSchemeBasis, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CombiSchemeBasis, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> CombiSchemeBasis
        __init__(self, dim, level) -> CombiSchemeBasis

        Parameters:
            dim: int
            level: int

        __init__(self, dim, levels) -> CombiSchemeBasis

        Parameters:
            dim: int
            levels: std::vector< int,std::allocator< int > > const &


        1
        """
        this = _pysgpp_swig.new_CombiSchemeBasis(*args)
        try: self.this.append(this)
        except: self.this = this
    def getDim(self):
        """
        getDim(self) -> int

        Parameters:
            self: combigrid::CombiSchemeBasis const *


        1
        """
        return _pysgpp_swig.CombiSchemeBasis_getDim(self)

    def getNrSapces(self):
        """
        getNrSapces(self) -> int

        Parameters:
            self: combigrid::CombiSchemeBasis const *


        1
        """
        return _pysgpp_swig.CombiSchemeBasis_getNrSapces(self)

    def getLevel(self, *args):
        """
        getLevel(self, i) -> IntVector

        Parameters:
            i: int


        1
        """
        return _pysgpp_swig.CombiSchemeBasis_getLevel(self, *args)

    def getLevels(self):
        """
        getLevels(self) -> IntIntVector

        Parameters:
            self: combigrid::CombiSchemeBasis const *


        1
        """
        return _pysgpp_swig.CombiSchemeBasis_getLevels(self)

    def getMaxLevel(self):
        """
        getMaxLevel(self) -> IntVector

        Parameters:
            self: combigrid::CombiSchemeBasis const *


        1
        """
        return _pysgpp_swig.CombiSchemeBasis_getMaxLevel(self)

    def getCoef(self, *args):
        """
        getCoef(self, i) -> double

        Parameters:
            i: int

        getCoef(self) -> DoubleVector

        Parameters:
            self: combigrid::CombiSchemeBasis const *


        1
        """
        return _pysgpp_swig.CombiSchemeBasis_getCoef(self, *args)

    def updateScheme(self, *args):
        """
        updateScheme(self, levelsNew, coef) -> IntVector

        Parameters:
            levelsNew: std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > >
            coef: std::vector< double,std::allocator< double > >


        1
        """
        return _pysgpp_swig.CombiSchemeBasis_updateScheme(self, *args)

    def setCoef(self, *args):
        """
        setCoef(self, newCoef)

        Parameters:
            newCoef: std::vector< double,std::allocator< double > >

        setCoef(self, i, newCoef)

        Parameters:
            i: int
            newCoef: double


        1
        """
        return _pysgpp_swig.CombiSchemeBasis_setCoef(self, *args)

    __swig_destroy__ = _pysgpp_swig.delete_CombiSchemeBasis
    __del__ = lambda self : None;
CombiSchemeBasis_swigregister = _pysgpp_swig.CombiSchemeBasis_swigregister
CombiSchemeBasis_swigregister(CombiSchemeBasis)

class TS_CT(CombiSchemeBasis):
    """1"""
    __swig_setmethods__ = {}
    for _s in [CombiSchemeBasis]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TS_CT, name, value)
    __swig_getmethods__ = {}
    for _s in [CombiSchemeBasis]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TS_CT, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, dim, level) -> TS_CT

        Parameters:
            dim: int
            level: int

        __init__(self, dim, levels) -> TS_CT

        Parameters:
            dim: int
            levels: std::vector< int,std::allocator< int > > const &

        __init__(self, dim, levels, makeCombiInDimension) -> TS_CT

        Parameters:
            dim: int
            levels: std::vector< int,std::allocator< int > > const &
            makeCombiInDimension: std::vector< bool,std::allocator< bool > > const &

        __init__(self, minlevels, maxlevels) -> TS_CT

        Parameters:
            minlevels: std::vector< int,std::allocator< int > > const &
            maxlevels: std::vector< int,std::allocator< int > > const &


        1
        """
        this = _pysgpp_swig.new_TS_CT(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_TS_CT
    __del__ = lambda self : None;
TS_CT_swigregister = _pysgpp_swig.TS_CT_swigregister
TS_CT_swigregister(TS_CT)

class S_CT(CombiSchemeBasis):
    """1"""
    __swig_setmethods__ = {}
    for _s in [CombiSchemeBasis]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, S_CT, name, value)
    __swig_getmethods__ = {}
    for _s in [CombiSchemeBasis]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, S_CT, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, dim, level) -> S_CT

        Parameters:
            dim: int
            level: int

        __init__(self, dim, level, level_truncation) -> S_CT

        Parameters:
            dim: int
            level: int
            level_truncation: int

        __init__(self, dim, levels) -> S_CT

        Parameters:
            dim: int
            levels: std::vector< int,std::allocator< int > > const &

        __init__(self, dim, level, levels_trunk) -> S_CT

        Parameters:
            dim: int
            level: int
            levels_trunk: std::vector< int,std::allocator< int > > const &

        __init__(self, dim, levels, levels_trunk) -> S_CT

        Parameters:
            dim: int
            levels: std::vector< int,std::allocator< int > > const &
            levels_trunk: std::vector< int,std::allocator< int > > const &


        1
        """
        this = _pysgpp_swig.new_S_CT(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_S_CT
    __del__ = lambda self : None;
S_CT_swigregister = _pysgpp_swig.S_CT_swigregister
S_CT_swigregister(S_CT)

class CombiArbitraryScheme(CombiSchemeBasis):
    """1"""
    __swig_setmethods__ = {}
    for _s in [CombiSchemeBasis]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CombiArbitraryScheme, name, value)
    __swig_getmethods__ = {}
    for _s in [CombiSchemeBasis]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CombiArbitraryScheme, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, level_vectors) -> CombiArbitraryScheme

        Parameters:
            level_vectors: std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > >

        __init__(self, input) -> CombiArbitraryScheme

        Parameters:
            input: combigrid::CombigridLevelVector


        1
        """
        this = _pysgpp_swig.new_CombiArbitraryScheme(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_CombiArbitraryScheme
    __del__ = lambda self : None;
CombiArbitraryScheme_swigregister = _pysgpp_swig.CombiArbitraryScheme_swigregister
CombiArbitraryScheme_swigregister(CombiArbitraryScheme)

class AbstractCombiGrid(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AbstractCombiGrid, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AbstractCombiGrid, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pysgpp_swig.delete_AbstractCombiGrid
    __del__ = lambda self : None;
    def setDomain(self, *args):
        """
        setDomain(self, gridDomain)

        Parameters:
            gridDomain: combigrid::GridDomain *


        1
        """
        return _pysgpp_swig.AbstractCombiGrid_setDomain(self, *args)

    def setDomainAllFG(self, *args):
        """
        setDomainAllFG(self, gridDomain)

        Parameters:
            gridDomain: combigrid::GridDomain *


        1
        """
        return _pysgpp_swig.AbstractCombiGrid_setDomainAllFG(self, *args)

    def getDomain(self):
        """
        getDomain(self) -> GridDomain

        Parameters:
            self: combigrid::AbstractCombiGrid const *


        1
        """
        return _pysgpp_swig.AbstractCombiGrid_getDomain(self)

    def getBoundaryFlags(self):
        """
        getBoundaryFlags(self) -> BoolVector

        Parameters:
            self: combigrid::AbstractCombiGrid const *


        1
        """
        return _pysgpp_swig.AbstractCombiGrid_getBoundaryFlags(self)

    def createFullGrids(self):
        """
        createFullGrids(self)

        Parameters:
            self: combigrid::AbstractCombiGrid *


        1
        """
        return _pysgpp_swig.AbstractCombiGrid_createFullGrids(self)

    def getFullGrid(self, *args):
        """
        getFullGrid(self, i) -> doubleFullGrid

        Parameters:
            i: int

        getFullGrid(self, i) -> doubleFullGrid

        Parameters:
            i: int


        1
        """
        return _pysgpp_swig.AbstractCombiGrid_getFullGrid(self, *args)

    def getNrFullGrid(self):
        """
        getNrFullGrid(self) -> int

        Parameters:
            self: combigrid::AbstractCombiGrid const *


        1
        """
        return _pysgpp_swig.AbstractCombiGrid_getNrFullGrid(self)

    def eval(self, *args):
        """
        eval(self, coords) -> double

        Parameters:
            coords: std::vector< double,std::allocator< double > > &

        eval(self, coords, results)

        Parameters:
            coords: std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > &
            results: std::vector< double,std::allocator< double > > &


        1
        """
        return _pysgpp_swig.AbstractCombiGrid_eval(self, *args)

    def createSGppGridStorage(self):
        """
        createSGppGridStorage(self) -> HashGridStorage

        Parameters:
            self: combigrid::AbstractCombiGrid const *


        1
        """
        return _pysgpp_swig.AbstractCombiGrid_createSGppGridStorage(self)

    def reCompose(self, *args):
        """
        reCompose(self, gridstorageSGpp, alpha, minAlpha=None, maxAlpha=None)

        Parameters:
            gridstorageSGpp: sg::base::GridStorage *
            alpha: sg::base::DataVector *
            minAlpha: sg::base::DataVector *
            maxAlpha: sg::base::DataVector *

        reCompose(self, gridstorageSGpp, alpha, minAlpha=None)

        Parameters:
            gridstorageSGpp: sg::base::GridStorage *
            alpha: sg::base::DataVector *
            minAlpha: sg::base::DataVector *

        reCompose(self, gridstorageSGpp, alpha)

        Parameters:
            gridstorageSGpp: sg::base::GridStorage *
            alpha: sg::base::DataVector *


        1
        """
        return _pysgpp_swig.AbstractCombiGrid_reCompose(self, *args)

    def deCompose(self, *args):
        """
        deCompose(self, gridstorageSGpp, alpha)

        Parameters:
            gridstorageSGpp: sg::base::GridStorage *
            alpha: sg::base::DataVector *


        1
        """
        return _pysgpp_swig.AbstractCombiGrid_deCompose(self, *args)

    def getCombiScheme(self):
        """
        getCombiScheme(self) -> CombiSchemeBasis

        Parameters:
            self: combigrid::AbstractCombiGrid const *


        1
        """
        return _pysgpp_swig.AbstractCombiGrid_getCombiScheme(self)

    def getCombiKernel(self):
        """
        getCombiKernel(self) -> CombiGridKernelD

        Parameters:
            self: combigrid::AbstractCombiGrid const *


        1
        """
        return _pysgpp_swig.AbstractCombiGrid_getCombiKernel(self)

AbstractCombiGrid_swigregister = _pysgpp_swig.AbstractCombiGrid_swigregister
AbstractCombiGrid_swigregister(AbstractCombiGrid)

class SerialCombiGrid(AbstractCombiGrid):
    """1"""
    __swig_setmethods__ = {}
    for _s in [AbstractCombiGrid]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SerialCombiGrid, name, value)
    __swig_getmethods__ = {}
    for _s in [AbstractCombiGrid]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SerialCombiGrid, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, combischeme, hasBoundaryPts) -> SerialCombiGrid

        Parameters:
            combischeme: combigrid::CombiSchemeBasis const *
            hasBoundaryPts: std::vector< bool,std::allocator< bool > > const &

        __init__(self, combischeme, hasBoundaryPts=True) -> SerialCombiGrid

        Parameters:
            combischeme: combigrid::CombiSchemeBasis const *
            hasBoundaryPts: bool

        __init__(self, combischeme) -> SerialCombiGrid

        Parameters:
            combischeme: combigrid::CombiSchemeBasis const *


        1
        """
        this = _pysgpp_swig.new_SerialCombiGrid(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_SerialCombiGrid
    __del__ = lambda self : None;
    def getFullGrid(self, *args):
        """
        getFullGrid(self, i) -> doubleFullGrid

        Parameters:
            i: int

        getFullGrid(self, i) -> doubleFullGrid

        Parameters:
            i: int


        1
        """
        return _pysgpp_swig.SerialCombiGrid_getFullGrid(self, *args)

    def evalSingleGrid(self, *args):
        """
        evalSingleGrid(self, index, coords) -> double

        Parameters:
            index: int
            coords: std::vector< double,std::allocator< double > > &


        1
        """
        return _pysgpp_swig.SerialCombiGrid_evalSingleGrid(self, *args)

    def eval(self, *args):
        """
        eval(self, coords) -> double

        Parameters:
            coords: std::vector< double,std::allocator< double > > &

        eval(self, coords, results)

        Parameters:
            coords: std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > &
            results: std::vector< double,std::allocator< double > > &


        1
        """
        return _pysgpp_swig.SerialCombiGrid_eval(self, *args)

    def reCompose(self, *args):
        """
        reCompose(self, gridstorageSGpp, alpha, minAlpha=None, maxAlpha=None)

        Parameters:
            gridstorageSGpp: sg::base::GridStorage *
            alpha: sg::base::DataVector *
            minAlpha: sg::base::DataVector *
            maxAlpha: sg::base::DataVector *

        reCompose(self, gridstorageSGpp, alpha, minAlpha=None)

        Parameters:
            gridstorageSGpp: sg::base::GridStorage *
            alpha: sg::base::DataVector *
            minAlpha: sg::base::DataVector *

        reCompose(self, gridstorageSGpp, alpha)

        Parameters:
            gridstorageSGpp: sg::base::GridStorage *
            alpha: sg::base::DataVector *


        1
        """
        return _pysgpp_swig.SerialCombiGrid_reCompose(self, *args)

SerialCombiGrid_swigregister = _pysgpp_swig.SerialCombiGrid_swigregister
SerialCombiGrid_swigregister(SerialCombiGrid)

class AdaptiveSerialCombiGrid(SerialCombiGrid):
    """1"""
    __swig_setmethods__ = {}
    for _s in [SerialCombiGrid]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AdaptiveSerialCombiGrid, name, value)
    __swig_getmethods__ = {}
    for _s in [SerialCombiGrid]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, AdaptiveSerialCombiGrid, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, combischeme, hasBoundaryPts) -> AdaptiveSerialCombiGrid

        Parameters:
            combischeme: combigrid::CombiSchemeBasis const *
            hasBoundaryPts: std::vector< bool,std::allocator< bool > > const &


        1
        """
        this = _pysgpp_swig.new_AdaptiveSerialCombiGrid(*args)
        try: self.this.append(this)
        except: self.this = this
    def addToCombiScheme(self, *args):
        """
        addToCombiScheme(self, level) -> IntVector

        Parameters:
            level: std::vector< int,std::allocator< int > >


        1
        """
        return _pysgpp_swig.AdaptiveSerialCombiGrid_addToCombiScheme(self, *args)

    __swig_destroy__ = _pysgpp_swig.delete_AdaptiveSerialCombiGrid
    __del__ = lambda self : None;
AdaptiveSerialCombiGrid_swigregister = _pysgpp_swig.AdaptiveSerialCombiGrid_swigregister
AdaptiveSerialCombiGrid_swigregister(AdaptiveSerialCombiGrid)

class AdaptiveSerialCombiGridVariableCoefficients(SerialCombiGrid):
    """1"""
    __swig_setmethods__ = {}
    for _s in [SerialCombiGrid]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AdaptiveSerialCombiGridVariableCoefficients, name, value)
    __swig_getmethods__ = {}
    for _s in [SerialCombiGrid]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, AdaptiveSerialCombiGridVariableCoefficients, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, combischeme, hasBoundaryPts) -> AdaptiveSerialCombiGridVariableCoefficients

        Parameters:
            combischeme: combigrid::CombiSchemeBasis const *
            hasBoundaryPts: std::vector< bool,std::allocator< bool > > const &


        1
        """
        this = _pysgpp_swig.new_AdaptiveSerialCombiGridVariableCoefficients(*args)
        try: self.this.append(this)
        except: self.this = this
    def changeCoefficients(self, *args):
        """
        changeCoefficients(self, newCoef)

        Parameters:
            newCoef: std::vector< double,std::allocator< double > >

        changeCoefficients(self, i, newCoef)

        Parameters:
            i: int
            newCoef: double


        1
        """
        return _pysgpp_swig.AdaptiveSerialCombiGridVariableCoefficients_changeCoefficients(self, *args)

    __swig_destroy__ = _pysgpp_swig.delete_AdaptiveSerialCombiGridVariableCoefficients
    __del__ = lambda self : None;
AdaptiveSerialCombiGridVariableCoefficients_swigregister = _pysgpp_swig.AdaptiveSerialCombiGridVariableCoefficients_swigregister
AdaptiveSerialCombiGridVariableCoefficients_swigregister(AdaptiveSerialCombiGridVariableCoefficients)

class doubleFullGrid(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, doubleFullGrid, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, doubleFullGrid, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, dim, level, hasBdrPoints=True, basis=None) -> doubleFullGrid

        Parameters:
            dim: int
            level: int
            hasBdrPoints: bool
            basis: combigrid::BasisFunctionBasis const *

        __init__(self, dim, level, hasBdrPoints=True) -> doubleFullGrid

        Parameters:
            dim: int
            level: int
            hasBdrPoints: bool

        __init__(self, dim, level) -> doubleFullGrid

        Parameters:
            dim: int
            level: int

        __init__(self, dim, levels, hasBdrPoints=True, basis=None) -> doubleFullGrid

        Parameters:
            dim: int
            levels: std::vector< int,std::allocator< int > > const &
            hasBdrPoints: bool
            basis: combigrid::BasisFunctionBasis const *

        __init__(self, dim, levels, hasBdrPoints=True) -> doubleFullGrid

        Parameters:
            dim: int
            levels: std::vector< int,std::allocator< int > > const &
            hasBdrPoints: bool

        __init__(self, dim, levels) -> doubleFullGrid

        Parameters:
            dim: int
            levels: std::vector< int,std::allocator< int > > const &

        __init__(self, dim, levels, hasBdrPoints, basis=None) -> doubleFullGrid

        Parameters:
            dim: int
            levels: std::vector< int,std::allocator< int > > const &
            hasBdrPoints: std::vector< bool,std::allocator< bool > > const &
            basis: combigrid::BasisFunctionBasis const *

        __init__(self, dim, levels, hasBdrPoints) -> doubleFullGrid

        Parameters:
            dim: int
            levels: std::vector< int,std::allocator< int > > const &
            hasBdrPoints: std::vector< bool,std::allocator< bool > > const &


        1
        """
        this = _pysgpp_swig.new_doubleFullGrid(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_doubleFullGrid
    __del__ = lambda self : None;
    def createFullGrid(self):
        """
        createFullGrid(self)

        Parameters:
            self: combigrid::FullGrid< double > *


        1
        """
        return _pysgpp_swig.doubleFullGrid_createFullGrid(self)

    def deleteFullGrid(self):
        """
        deleteFullGrid(self)

        Parameters:
            self: combigrid::FullGrid< double > *


        1
        """
        return _pysgpp_swig.doubleFullGrid_deleteFullGrid(self)

    def eval(self, *args):
        """
        eval(self, coords) -> double

        Parameters:
            coords: std::vector< double,std::allocator< double > > &


        1
        """
        return _pysgpp_swig.doubleFullGrid_eval(self, *args)

    def getCoords(self, *args):
        """
        getCoords(self, elemIndex, coords)

        Parameters:
            elemIndex: int
            coords: std::vector< double,std::allocator< double > > &


        1
        """
        return _pysgpp_swig.doubleFullGrid_getCoords(self, *args)

    def getLI(self, *args):
        """
        getLI(self, elementIndex, levels, indexes)

        Parameters:
            elementIndex: int
            levels: std::vector< int,std::allocator< int > > &
            indexes: std::vector< int,std::allocator< int > > &


        1
        """
        return _pysgpp_swig.doubleFullGrid_getLI(self, *args)

    def getVectorIndex(self, *args):
        """
        getVectorIndex(self, linIndex, axisIndex)

        Parameters:
            linIndex: int const
            axisIndex: std::vector< int,std::allocator< int > > &


        1
        """
        return _pysgpp_swig.doubleFullGrid_getVectorIndex(self, *args)

    def getLinearIndex(self, *args):
        """
        getLinearIndex(self, axisIndex) -> int

        Parameters:
            axisIndex: std::vector< int,std::allocator< int > > const &


        1
        """
        return _pysgpp_swig.doubleFullGrid_getLinearIndex(self, *args)

    def setDomain(self, *args):
        """
        setDomain(self, gridDomain)

        Parameters:
            gridDomain: combigrid::GridDomain *


        1
        """
        return _pysgpp_swig.doubleFullGrid_setDomain(self, *args)

    def getDomain(self, *args):
        """
        getDomain(self) -> GridDomain
        getDomain(self) -> GridDomain

        Parameters:
            self: combigrid::FullGrid< double > *


        1
        """
        return _pysgpp_swig.doubleFullGrid_getDomain(self, *args)

    def addCustomDomain(self, *args):
        """
        addCustomDomain(self, min, max)

        Parameters:
            min: std::vector< double,std::allocator< double > >
            max: std::vector< double,std::allocator< double > >


        1
        """
        return _pysgpp_swig.doubleFullGrid_addCustomDomain(self, *args)

    def getBasisFct(self):
        """
        getBasisFct(self) -> BasisFunctionBasis

        Parameters:
            self: combigrid::FullGrid< double > const *


        1
        """
        return _pysgpp_swig.doubleFullGrid_getBasisFct(self)

    def getDimension(self):
        """
        getDimension(self) -> int

        Parameters:
            self: combigrid::FullGrid< double > const *


        1
        """
        return _pysgpp_swig.doubleFullGrid_getDimension(self)

    def getElementVector(self, *args):
        """
        getElementVector(self) -> DoubleVector
        getElementVector(self) -> DoubleVector

        Parameters:
            self: combigrid::FullGrid< double > const *


        1
        """
        return _pysgpp_swig.doubleFullGrid_getElementVector(self, *args)

    def getOffset(self, *args):
        """
        getOffset(self, i) -> int

        Parameters:
            i: int


        1
        """
        return _pysgpp_swig.doubleFullGrid_getOffset(self, *args)

    def getOffsets(self):
        """
        getOffsets(self) -> IntVector

        Parameters:
            self: combigrid::FullGrid< double > const *


        1
        """
        return _pysgpp_swig.doubleFullGrid_getOffsets(self)

    def getLevels(self, *args):
        """
        getLevels(self) -> IntVector
        getLevels(self) -> IntVector

        Parameters:
            self: combigrid::FullGrid< double > *


        1
        """
        return _pysgpp_swig.doubleFullGrid_getLevels(self, *args)

    def isGridCreated(self):
        """
        isGridCreated(self) -> bool

        Parameters:
            self: combigrid::FullGrid< double > const *


        1
        """
        return _pysgpp_swig.doubleFullGrid_isGridCreated(self)

    def getNrElements(self):
        """
        getNrElements(self) -> int

        Parameters:
            self: combigrid::FullGrid< double > const *


        1
        """
        return _pysgpp_swig.doubleFullGrid_getNrElements(self)

    def length(self, *args):
        """
        length(self, i) -> int

        Parameters:
            i: int


        1
        """
        return _pysgpp_swig.doubleFullGrid_length(self, *args)

    def getSGppIndex(self):
        """
        getSGppIndex(self) -> IntVector

        Parameters:
            self: combigrid::FullGrid< double > const *


        1
        """
        return _pysgpp_swig.doubleFullGrid_getSGppIndex(self)

    def returnBoundaryFlags(self):
        """
        returnBoundaryFlags(self) -> BoolVector

        Parameters:
            self: combigrid::FullGrid< double > const *


        1
        """
        return _pysgpp_swig.doubleFullGrid_returnBoundaryFlags(self)

    def setElementVector(self, *args):
        """
        setElementVector(self, input)

        Parameters:
            input: std::vector< double,std::allocator< double > >


        1
        """
        return _pysgpp_swig.doubleFullGrid_setElementVector(self, *args)

doubleFullGrid_swigregister = _pysgpp_swig.doubleFullGrid_swigregister
doubleFullGrid_swigregister(doubleFullGrid)

class CombiGridKernelD(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CombiGridKernelD, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CombiGridKernelD, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, dim) -> CombiGridKernelD

        Parameters:
            dim: int

        __init__(self, combischeme, hasBoundaryPts) -> CombiGridKernelD

        Parameters:
            combischeme: combigrid::CombiSchemeBasis const *
            hasBoundaryPts: std::vector< bool,std::allocator< bool > > const &


        1
        """
        this = _pysgpp_swig.new_CombiGridKernelD(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_CombiGridKernelD
    __del__ = lambda self : None;
    def initialize(self, *args):
        """
        initialize(self, combischeme, hasBoundaryPts)

        Parameters:
            combischeme: combigrid::CombiSchemeBasis const *
            hasBoundaryPts: std::vector< bool,std::allocator< bool > > const &


        1
        """
        return _pysgpp_swig.CombiGridKernelD_initialize(self, *args)

    def addFullGrid(self, *args):
        """
        addFullGrid(self, levels, hasBoundaryPts, coef)

        Parameters:
            levels: std::vector< int,std::allocator< int > > const &
            hasBoundaryPts: std::vector< bool,std::allocator< bool > > const &
            coef: double


        1
        """
        return _pysgpp_swig.CombiGridKernelD_addFullGrid(self, *args)

    def deleteDuplicate(self):
        """
        deleteDuplicate(self)

        Parameters:
            self: combigrid::CombiGridKernel< double > *


        1
        """
        return _pysgpp_swig.CombiGridKernelD_deleteDuplicate(self)

    def deleteFullGrid(self, *args):
        """
        deleteFullGrid(self, i)

        Parameters:
            i: int


        1
        """
        return _pysgpp_swig.CombiGridKernelD_deleteFullGrid(self, *args)

    def getNrFullGrids(self):
        """
        getNrFullGrids(self) -> int

        Parameters:
            self: combigrid::CombiGridKernel< double > const *


        1
        """
        return _pysgpp_swig.CombiGridKernelD_getNrFullGrids(self)

    def getFullGridLevel(self, *args):
        """
        getFullGridLevel(self, i) -> IntVector

        Parameters:
            i: int


        1
        """
        return _pysgpp_swig.CombiGridKernelD_getFullGridLevel(self, *args)

    def getFullGrid(self, *args):
        """
        getFullGrid(self, i) -> doubleFullGrid

        Parameters:
            i: int

        getFullGrid(self, i) -> doubleFullGrid

        Parameters:
            i: int


        1
        """
        return _pysgpp_swig.CombiGridKernelD_getFullGrid(self, *args)

    def getDim(self):
        """
        getDim(self) -> int

        Parameters:
            self: combigrid::CombiGridKernel< double > const *


        1
        """
        return _pysgpp_swig.CombiGridKernelD_getDim(self)

    def setCoef(self, *args):
        """
        setCoef(self, i, newCoef)

        Parameters:
            i: int
            newCoef: double

        setCoef(self, newCoef)

        Parameters:
            newCoef: std::vector< double,std::allocator< double > >


        1
        """
        return _pysgpp_swig.CombiGridKernelD_setCoef(self, *args)

    def getCoef(self, *args):
        """
        getCoef(self, i) -> double

        Parameters:
            i: int

        getCoef(self) -> DoubleVector

        Parameters:
            self: combigrid::CombiGridKernel< double > *


        1
        """
        return _pysgpp_swig.CombiGridKernelD_getCoef(self, *args)

    def getBoundaryFlags(self):
        """
        getBoundaryFlags(self) -> BoolVector

        Parameters:
            self: combigrid::CombiGridKernel< double > const *


        1
        """
        return _pysgpp_swig.CombiGridKernelD_getBoundaryFlags(self)

    def updateCombiScheme(self, *args):
        """
        updateCombiScheme(self, newCoef, newFullGridLevels, changes)

        Parameters:
            newCoef: std::vector< double,std::allocator< double > >
            newFullGridLevels: std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > >
            changes: std::vector< int,std::allocator< int > >


        1
        """
        return _pysgpp_swig.CombiGridKernelD_updateCombiScheme(self, *args)

CombiGridKernelD_swigregister = _pysgpp_swig.CombiGridKernelD_swigregister
CombiGridKernelD_swigregister(CombiGridKernelD)


def omp_set_num_threads(*args):
  """
    omp_set_num_threads(num_threads)

    Parameters:
        num_threads: int


    1
    """
  return _pysgpp_swig.omp_set_num_threads(*args)
class OptRNG(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptRNG, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptRNG, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """
        __init__(self) -> OptRNG

        1
        """
        this = _pysgpp_swig.new_OptRNG()
        try: self.this.append(this)
        except: self.this = this
    def getUniformRN(self, a=0.0, b=1.0):
        """
        getUniformRN(self, a=0.0, b=1.0) -> sg::float_t

        Parameters:
            a: sg::float_t
            b: sg::float_t

        getUniformRN(self, a=0.0) -> sg::float_t

        Parameters:
            a: sg::float_t

        getUniformRN(self) -> sg::float_t

        Parameters:
            self: sg::optimization::RandomNumberGenerator *


        1
        """
        return _pysgpp_swig.OptRNG_getUniformRN(self, a, b)

    def getUniformIndexRN(self, *args):
        """
        getUniformIndexRN(self, size) -> size_t

        Parameters:
            size: size_t


        1
        """
        return _pysgpp_swig.OptRNG_getUniformIndexRN(self, *args)

    def getGaussianRN(self, stdDev=1.0, mean=0.0):
        """
        getGaussianRN(self, stdDev=1.0, mean=0.0) -> sg::float_t

        Parameters:
            stdDev: sg::float_t
            mean: sg::float_t

        getGaussianRN(self, stdDev=1.0) -> sg::float_t

        Parameters:
            stdDev: sg::float_t

        getGaussianRN(self) -> sg::float_t

        Parameters:
            self: sg::optimization::RandomNumberGenerator *


        1
        """
        return _pysgpp_swig.OptRNG_getGaussianRN(self, stdDev, mean)

    def getSeed(self):
        """
        getSeed(self) -> size_t

        Parameters:
            self: sg::optimization::RandomNumberGenerator const *


        1
        """
        return _pysgpp_swig.OptRNG_getSeed(self)

    def setSeed(self, *args):
        """
        setSeed(self)
        setSeed(self, seed)

        Parameters:
            seed: size_t


        1
        """
        return _pysgpp_swig.OptRNG_setSeed(self, *args)

    __swig_destroy__ = _pysgpp_swig.delete_OptRNG
    __del__ = lambda self : None;
OptRNG_swigregister = _pysgpp_swig.OptRNG_swigregister
OptRNG_swigregister(OptRNG)
ARMADILLO_ENABLED = cvar.ARMADILLO_ENABLED
EIGEN_ENABLED = cvar.EIGEN_ENABLED
GMMPP_ENABLED = cvar.GMMPP_ENABLED
UMFPACK_ENABLED = cvar.UMFPACK_ENABLED

class OptScalarFunction(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptScalarFunction, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptScalarFunction, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, d) -> OptScalarFunction

        Parameters:
            d: size_t


        1
        """
        if self.__class__ == OptScalarFunction:
            _self = None
        else:
            _self = self
        this = _pysgpp_swig.new_OptScalarFunction(_self, *args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptScalarFunction
    __del__ = lambda self : None;
    def eval(self, *args):
        """
        eval(self, x) -> sg::float_t

        Parameters:
            x: sg::base::DataVector const &


        1
        """
        return _pysgpp_swig.OptScalarFunction_eval(self, *args)

    def getNumberOfParameters(self):
        """
        getNumberOfParameters(self) -> size_t

        Parameters:
            self: sg::optimization::ScalarFunction const *


        1
        """
        return _pysgpp_swig.OptScalarFunction_getNumberOfParameters(self)

    def clone(self, *args):
        """
        clone(self, clone)

        Parameters:
            clone: std::unique_ptr< sg::optimization::ScalarFunction > &


        1
        """
        return _pysgpp_swig.OptScalarFunction_clone(self, *args)

    def __disown__(self):
        self.this.disown()
        _pysgpp_swig.disown_OptScalarFunction(self)
        return weakref_proxy(self)
OptScalarFunction_swigregister = _pysgpp_swig.OptScalarFunction_swigregister
OptScalarFunction_swigregister(OptScalarFunction)

class OptScalarFunctionGradient(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptScalarFunctionGradient, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptScalarFunctionGradient, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, d) -> OptScalarFunctionGradient

        Parameters:
            d: size_t


        1
        """
        if self.__class__ == OptScalarFunctionGradient:
            _self = None
        else:
            _self = self
        this = _pysgpp_swig.new_OptScalarFunctionGradient(_self, *args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptScalarFunctionGradient
    __del__ = lambda self : None;
    def eval(self, *args):
        """
        eval(self, x, gradient) -> sg::float_t

        Parameters:
            x: sg::base::DataVector const &
            gradient: sg::base::DataVector &


        1
        """
        return _pysgpp_swig.OptScalarFunctionGradient_eval(self, *args)

    def getNumberOfParameters(self):
        """
        getNumberOfParameters(self) -> size_t

        Parameters:
            self: sg::optimization::ScalarFunctionGradient const *


        1
        """
        return _pysgpp_swig.OptScalarFunctionGradient_getNumberOfParameters(self)

    def clone(self, *args):
        """
        clone(self, clone)

        Parameters:
            clone: std::unique_ptr< sg::optimization::ScalarFunctionGradient > &


        1
        """
        return _pysgpp_swig.OptScalarFunctionGradient_clone(self, *args)

    def __disown__(self):
        self.this.disown()
        _pysgpp_swig.disown_OptScalarFunctionGradient(self)
        return weakref_proxy(self)
OptScalarFunctionGradient_swigregister = _pysgpp_swig.OptScalarFunctionGradient_swigregister
OptScalarFunctionGradient_swigregister(OptScalarFunctionGradient)

class OptScalarFunctionHessian(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptScalarFunctionHessian, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptScalarFunctionHessian, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, d) -> OptScalarFunctionHessian

        Parameters:
            d: size_t


        1
        """
        if self.__class__ == OptScalarFunctionHessian:
            _self = None
        else:
            _self = self
        this = _pysgpp_swig.new_OptScalarFunctionHessian(_self, *args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptScalarFunctionHessian
    __del__ = lambda self : None;
    def eval(self, *args):
        """
        eval(self, x, gradient, hessian) -> sg::float_t

        Parameters:
            x: sg::base::DataVector const &
            gradient: sg::base::DataVector &
            hessian: sg::base::DataMatrix &


        1
        """
        return _pysgpp_swig.OptScalarFunctionHessian_eval(self, *args)

    def getNumberOfParameters(self):
        """
        getNumberOfParameters(self) -> size_t

        Parameters:
            self: sg::optimization::ScalarFunctionHessian const *


        1
        """
        return _pysgpp_swig.OptScalarFunctionHessian_getNumberOfParameters(self)

    def clone(self, *args):
        """
        clone(self, clone)

        Parameters:
            clone: std::unique_ptr< sg::optimization::ScalarFunctionHessian > &


        1
        """
        return _pysgpp_swig.OptScalarFunctionHessian_clone(self, *args)

    def __disown__(self):
        self.this.disown()
        _pysgpp_swig.disown_OptScalarFunctionHessian(self)
        return weakref_proxy(self)
OptScalarFunctionHessian_swigregister = _pysgpp_swig.OptScalarFunctionHessian_swigregister
OptScalarFunctionHessian_swigregister(OptScalarFunctionHessian)

class OptInterpolantScalarFunction(OptScalarFunction):
    """1"""
    __swig_setmethods__ = {}
    for _s in [OptScalarFunction]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptInterpolantScalarFunction, name, value)
    __swig_getmethods__ = {}
    for _s in [OptScalarFunction]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptInterpolantScalarFunction, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, grid, alpha) -> OptInterpolantScalarFunction

        Parameters:
            grid: sg::base::Grid &
            alpha: sg::base::DataVector const &


        1
        """
        this = _pysgpp_swig.new_OptInterpolantScalarFunction(*args)
        try: self.this.append(this)
        except: self.this = this
    def getAlpha(self):
        """
        getAlpha(self) -> DataVector

        Parameters:
            self: sg::optimization::InterpolantScalarFunction const *


        1
        """
        return _pysgpp_swig.OptInterpolantScalarFunction_getAlpha(self)

    def setAlpha(self, *args):
        """
        setAlpha(self, alpha)

        Parameters:
            alpha: sg::base::DataVector const &


        1
        """
        return _pysgpp_swig.OptInterpolantScalarFunction_setAlpha(self, *args)

    __swig_destroy__ = _pysgpp_swig.delete_OptInterpolantScalarFunction
    __del__ = lambda self : None;
OptInterpolantScalarFunction_swigregister = _pysgpp_swig.OptInterpolantScalarFunction_swigregister
OptInterpolantScalarFunction_swigregister(OptInterpolantScalarFunction)

class OptInterpolantScalarFunctionGradient(OptScalarFunctionGradient):
    """1"""
    __swig_setmethods__ = {}
    for _s in [OptScalarFunctionGradient]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptInterpolantScalarFunctionGradient, name, value)
    __swig_getmethods__ = {}
    for _s in [OptScalarFunctionGradient]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptInterpolantScalarFunctionGradient, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, grid, alpha) -> OptInterpolantScalarFunctionGradient

        Parameters:
            grid: sg::base::Grid &
            alpha: sg::base::DataVector const &


        1
        """
        this = _pysgpp_swig.new_OptInterpolantScalarFunctionGradient(*args)
        try: self.this.append(this)
        except: self.this = this
    def getAlpha(self):
        """
        getAlpha(self) -> DataVector

        Parameters:
            self: sg::optimization::InterpolantScalarFunctionGradient const *


        1
        """
        return _pysgpp_swig.OptInterpolantScalarFunctionGradient_getAlpha(self)

    def setAlpha(self, *args):
        """
        setAlpha(self, alpha)

        Parameters:
            alpha: sg::base::DataVector const &


        1
        """
        return _pysgpp_swig.OptInterpolantScalarFunctionGradient_setAlpha(self, *args)

    __swig_destroy__ = _pysgpp_swig.delete_OptInterpolantScalarFunctionGradient
    __del__ = lambda self : None;
OptInterpolantScalarFunctionGradient_swigregister = _pysgpp_swig.OptInterpolantScalarFunctionGradient_swigregister
OptInterpolantScalarFunctionGradient_swigregister(OptInterpolantScalarFunctionGradient)

class OptInterpolantScalarFunctionHessian(OptScalarFunctionHessian):
    """1"""
    __swig_setmethods__ = {}
    for _s in [OptScalarFunctionHessian]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptInterpolantScalarFunctionHessian, name, value)
    __swig_getmethods__ = {}
    for _s in [OptScalarFunctionHessian]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptInterpolantScalarFunctionHessian, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, grid, alpha) -> OptInterpolantScalarFunctionHessian

        Parameters:
            grid: sg::base::Grid &
            alpha: sg::base::DataVector const &


        1
        """
        this = _pysgpp_swig.new_OptInterpolantScalarFunctionHessian(*args)
        try: self.this.append(this)
        except: self.this = this
    def getAlpha(self):
        """
        getAlpha(self) -> DataVector

        Parameters:
            self: sg::optimization::InterpolantScalarFunctionHessian const *


        1
        """
        return _pysgpp_swig.OptInterpolantScalarFunctionHessian_getAlpha(self)

    def setAlpha(self, *args):
        """
        setAlpha(self, alpha)

        Parameters:
            alpha: sg::base::DataVector const &


        1
        """
        return _pysgpp_swig.OptInterpolantScalarFunctionHessian_setAlpha(self, *args)

    __swig_destroy__ = _pysgpp_swig.delete_OptInterpolantScalarFunctionHessian
    __del__ = lambda self : None;
OptInterpolantScalarFunctionHessian_swigregister = _pysgpp_swig.OptInterpolantScalarFunctionHessian_swigregister
OptInterpolantScalarFunctionHessian_swigregister(OptInterpolantScalarFunctionHessian)

class OptVectorFunction(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptVectorFunction, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptVectorFunction, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, d, m) -> OptVectorFunction

        Parameters:
            d: size_t
            m: size_t


        1
        """
        if self.__class__ == OptVectorFunction:
            _self = None
        else:
            _self = self
        this = _pysgpp_swig.new_OptVectorFunction(_self, *args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptVectorFunction
    __del__ = lambda self : None;
    def eval(self, *args):
        """
        eval(self, x, value)

        Parameters:
            x: sg::base::DataVector const &
            value: sg::base::DataVector &


        1
        """
        return _pysgpp_swig.OptVectorFunction_eval(self, *args)

    def getNumberOfParameters(self):
        """
        getNumberOfParameters(self) -> size_t

        Parameters:
            self: sg::optimization::VectorFunction const *


        1
        """
        return _pysgpp_swig.OptVectorFunction_getNumberOfParameters(self)

    def getNumberOfComponents(self):
        """
        getNumberOfComponents(self) -> size_t

        Parameters:
            self: sg::optimization::VectorFunction const *


        1
        """
        return _pysgpp_swig.OptVectorFunction_getNumberOfComponents(self)

    def clone(self, *args):
        """
        clone(self, clone)

        Parameters:
            clone: std::unique_ptr< sg::optimization::VectorFunction > &


        1
        """
        return _pysgpp_swig.OptVectorFunction_clone(self, *args)

    def __disown__(self):
        self.this.disown()
        _pysgpp_swig.disown_OptVectorFunction(self)
        return weakref_proxy(self)
OptVectorFunction_swigregister = _pysgpp_swig.OptVectorFunction_swigregister
OptVectorFunction_swigregister(OptVectorFunction)

class OptVectorFunctionGradient(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptVectorFunctionGradient, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptVectorFunctionGradient, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, d, m) -> OptVectorFunctionGradient

        Parameters:
            d: size_t
            m: size_t


        1
        """
        if self.__class__ == OptVectorFunctionGradient:
            _self = None
        else:
            _self = self
        this = _pysgpp_swig.new_OptVectorFunctionGradient(_self, *args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptVectorFunctionGradient
    __del__ = lambda self : None;
    def eval(self, *args):
        """
        eval(self, x, value, gradient)

        Parameters:
            x: sg::base::DataVector const &
            value: sg::base::DataVector &
            gradient: sg::base::DataMatrix &


        1
        """
        return _pysgpp_swig.OptVectorFunctionGradient_eval(self, *args)

    def getNumberOfParameters(self):
        """
        getNumberOfParameters(self) -> size_t

        Parameters:
            self: sg::optimization::VectorFunctionGradient const *


        1
        """
        return _pysgpp_swig.OptVectorFunctionGradient_getNumberOfParameters(self)

    def getNumberOfComponents(self):
        """
        getNumberOfComponents(self) -> size_t

        Parameters:
            self: sg::optimization::VectorFunctionGradient const *


        1
        """
        return _pysgpp_swig.OptVectorFunctionGradient_getNumberOfComponents(self)

    def clone(self, *args):
        """
        clone(self, clone)

        Parameters:
            clone: std::unique_ptr< sg::optimization::VectorFunctionGradient > &


        1
        """
        return _pysgpp_swig.OptVectorFunctionGradient_clone(self, *args)

    def __disown__(self):
        self.this.disown()
        _pysgpp_swig.disown_OptVectorFunctionGradient(self)
        return weakref_proxy(self)
OptVectorFunctionGradient_swigregister = _pysgpp_swig.OptVectorFunctionGradient_swigregister
OptVectorFunctionGradient_swigregister(OptVectorFunctionGradient)

class OptVectorFunctionHessian(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptVectorFunctionHessian, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptVectorFunctionHessian, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, d, m) -> OptVectorFunctionHessian

        Parameters:
            d: size_t
            m: size_t


        1
        """
        if self.__class__ == OptVectorFunctionHessian:
            _self = None
        else:
            _self = self
        this = _pysgpp_swig.new_OptVectorFunctionHessian(_self, *args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptVectorFunctionHessian
    __del__ = lambda self : None;
    def eval(self, *args):
        """
        eval(self, x, value, gradient, hessian)

        Parameters:
            x: sg::base::DataVector const &
            value: sg::base::DataVector &
            gradient: sg::base::DataMatrix &
            hessian: std::vector< sg::base::DataMatrix,std::allocator< sg::base::DataMatrix > > &


        1
        """
        return _pysgpp_swig.OptVectorFunctionHessian_eval(self, *args)

    def getNumberOfParameters(self):
        """
        getNumberOfParameters(self) -> size_t

        Parameters:
            self: sg::optimization::VectorFunctionHessian const *


        1
        """
        return _pysgpp_swig.OptVectorFunctionHessian_getNumberOfParameters(self)

    def getNumberOfComponents(self):
        """
        getNumberOfComponents(self) -> size_t

        Parameters:
            self: sg::optimization::VectorFunctionHessian const *


        1
        """
        return _pysgpp_swig.OptVectorFunctionHessian_getNumberOfComponents(self)

    def clone(self, *args):
        """
        clone(self, clone)

        Parameters:
            clone: std::unique_ptr< sg::optimization::VectorFunctionHessian > &


        1
        """
        return _pysgpp_swig.OptVectorFunctionHessian_clone(self, *args)

    def __disown__(self):
        self.this.disown()
        _pysgpp_swig.disown_OptVectorFunctionHessian(self)
        return weakref_proxy(self)
OptVectorFunctionHessian_swigregister = _pysgpp_swig.OptVectorFunctionHessian_swigregister
OptVectorFunctionHessian_swigregister(OptVectorFunctionHessian)

class OptInterpolantVectorFunction(OptVectorFunction):
    """1"""
    __swig_setmethods__ = {}
    for _s in [OptVectorFunction]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptInterpolantVectorFunction, name, value)
    __swig_getmethods__ = {}
    for _s in [OptVectorFunction]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptInterpolantVectorFunction, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, grid, alpha) -> OptInterpolantVectorFunction

        Parameters:
            grid: sg::base::Grid &
            alpha: sg::base::DataMatrix const &


        1
        """
        this = _pysgpp_swig.new_OptInterpolantVectorFunction(*args)
        try: self.this.append(this)
        except: self.this = this
    def getAlpha(self):
        """
        getAlpha(self) -> DataMatrix

        Parameters:
            self: sg::optimization::InterpolantVectorFunction const *


        1
        """
        return _pysgpp_swig.OptInterpolantVectorFunction_getAlpha(self)

    def setAlpha(self, *args):
        """
        setAlpha(self, alpha)

        Parameters:
            alpha: sg::base::DataMatrix const &


        1
        """
        return _pysgpp_swig.OptInterpolantVectorFunction_setAlpha(self, *args)

    __swig_destroy__ = _pysgpp_swig.delete_OptInterpolantVectorFunction
    __del__ = lambda self : None;
OptInterpolantVectorFunction_swigregister = _pysgpp_swig.OptInterpolantVectorFunction_swigregister
OptInterpolantVectorFunction_swigregister(OptInterpolantVectorFunction)

class InterpolantVectorFunctionGradient(OptVectorFunctionGradient):
    """1"""
    __swig_setmethods__ = {}
    for _s in [OptVectorFunctionGradient]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, InterpolantVectorFunctionGradient, name, value)
    __swig_getmethods__ = {}
    for _s in [OptVectorFunctionGradient]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, InterpolantVectorFunctionGradient, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, grid, alpha) -> InterpolantVectorFunctionGradient

        Parameters:
            grid: sg::base::Grid &
            alpha: sg::base::DataMatrix const &


        1
        """
        this = _pysgpp_swig.new_InterpolantVectorFunctionGradient(*args)
        try: self.this.append(this)
        except: self.this = this
    def getAlpha(self):
        """
        getAlpha(self) -> DataMatrix

        Parameters:
            self: sg::optimization::InterpolantVectorFunctionGradient const *


        1
        """
        return _pysgpp_swig.InterpolantVectorFunctionGradient_getAlpha(self)

    def setAlpha(self, *args):
        """
        setAlpha(self, alpha)

        Parameters:
            alpha: sg::base::DataMatrix const &


        1
        """
        return _pysgpp_swig.InterpolantVectorFunctionGradient_setAlpha(self, *args)

    __swig_destroy__ = _pysgpp_swig.delete_InterpolantVectorFunctionGradient
    __del__ = lambda self : None;
InterpolantVectorFunctionGradient_swigregister = _pysgpp_swig.InterpolantVectorFunctionGradient_swigregister
InterpolantVectorFunctionGradient_swigregister(InterpolantVectorFunctionGradient)

class InterpolantVectorFunctionHessian(OptVectorFunctionHessian):
    """1"""
    __swig_setmethods__ = {}
    for _s in [OptVectorFunctionHessian]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, InterpolantVectorFunctionHessian, name, value)
    __swig_getmethods__ = {}
    for _s in [OptVectorFunctionHessian]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, InterpolantVectorFunctionHessian, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, grid, alpha) -> InterpolantVectorFunctionHessian

        Parameters:
            grid: sg::base::Grid &
            alpha: sg::base::DataMatrix const &


        1
        """
        this = _pysgpp_swig.new_InterpolantVectorFunctionHessian(*args)
        try: self.this.append(this)
        except: self.this = this
    def getAlpha(self):
        """
        getAlpha(self) -> DataMatrix

        Parameters:
            self: sg::optimization::InterpolantVectorFunctionHessian const *


        1
        """
        return _pysgpp_swig.InterpolantVectorFunctionHessian_getAlpha(self)

    def setAlpha(self, *args):
        """
        setAlpha(self, alpha)

        Parameters:
            alpha: sg::base::DataMatrix const &


        1
        """
        return _pysgpp_swig.InterpolantVectorFunctionHessian_setAlpha(self, *args)

    __swig_destroy__ = _pysgpp_swig.delete_InterpolantVectorFunctionHessian
    __del__ = lambda self : None;
InterpolantVectorFunctionHessian_swigregister = _pysgpp_swig.InterpolantVectorFunctionHessian_swigregister
InterpolantVectorFunctionHessian_swigregister(InterpolantVectorFunctionHessian)

class OptComponentScalarFunction(OptScalarFunction):
    """1"""
    __swig_setmethods__ = {}
    for _s in [OptScalarFunction]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptComponentScalarFunction, name, value)
    __swig_getmethods__ = {}
    for _s in [OptScalarFunction]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptComponentScalarFunction, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        ComponentScalarFunction(f, defaultValues=std::vector< sg::float_t >()) -> OptComponentScalarFunction

        Parameters:
            f: sg::optimization::ScalarFunction &
            defaultValues: std::vector< sg::float_t,std::allocator< sg::float_t > >

        ComponentScalarFunction(f) -> OptComponentScalarFunction

        Parameters:
            f: sg::optimization::ScalarFunction &

        ComponentScalarFunction(f, k, defaultValues=std::vector< sg::float_t >()) -> OptComponentScalarFunction

        Parameters:
            f: sg::optimization::VectorFunction &
            k: size_t
            defaultValues: std::vector< sg::float_t,std::allocator< sg::float_t > >

        __init__(self, f, k) -> OptComponentScalarFunction

        Parameters:
            f: sg::optimization::VectorFunction &
            k: size_t


        1
        """
        this = _pysgpp_swig.new_OptComponentScalarFunction(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptComponentScalarFunction
    __del__ = lambda self : None;
OptComponentScalarFunction_swigregister = _pysgpp_swig.OptComponentScalarFunction_swigregister
OptComponentScalarFunction_swigregister(OptComponentScalarFunction)

class OptComponentScalarFunctionGradient(OptScalarFunctionGradient):
    """1"""
    __swig_setmethods__ = {}
    for _s in [OptScalarFunctionGradient]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptComponentScalarFunctionGradient, name, value)
    __swig_getmethods__ = {}
    for _s in [OptScalarFunctionGradient]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptComponentScalarFunctionGradient, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        ComponentScalarFunctionGradient(fGradient, defaultValues=std::vector< sg::float_t >()) -> OptComponentScalarFunctionGradient

        Parameters:
            fGradient: sg::optimization::ScalarFunctionGradient &
            defaultValues: std::vector< sg::float_t,std::allocator< sg::float_t > >

        ComponentScalarFunctionGradient(fGradient) -> OptComponentScalarFunctionGradient

        Parameters:
            fGradient: sg::optimization::ScalarFunctionGradient &

        ComponentScalarFunctionGradient(fGradient, k, defaultValues=std::vector< sg::float_t >()) -> OptComponentScalarFunctionGradient

        Parameters:
            fGradient: sg::optimization::VectorFunctionGradient &
            k: size_t
            defaultValues: std::vector< sg::float_t,std::allocator< sg::float_t > >

        __init__(self, fGradient, k) -> OptComponentScalarFunctionGradient

        Parameters:
            fGradient: sg::optimization::VectorFunctionGradient &
            k: size_t


        1
        """
        this = _pysgpp_swig.new_OptComponentScalarFunctionGradient(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptComponentScalarFunctionGradient
    __del__ = lambda self : None;
OptComponentScalarFunctionGradient_swigregister = _pysgpp_swig.OptComponentScalarFunctionGradient_swigregister
OptComponentScalarFunctionGradient_swigregister(OptComponentScalarFunctionGradient)

class OptComponentScalarFunctionHessian(OptScalarFunctionHessian):
    """1"""
    __swig_setmethods__ = {}
    for _s in [OptScalarFunctionHessian]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptComponentScalarFunctionHessian, name, value)
    __swig_getmethods__ = {}
    for _s in [OptScalarFunctionHessian]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptComponentScalarFunctionHessian, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        ComponentScalarFunctionHessian(fHessian, defaultValues=std::vector< sg::float_t >()) -> OptComponentScalarFunctionHessian

        Parameters:
            fHessian: sg::optimization::ScalarFunctionHessian &
            defaultValues: std::vector< sg::float_t,std::allocator< sg::float_t > >

        ComponentScalarFunctionHessian(fHessian) -> OptComponentScalarFunctionHessian

        Parameters:
            fHessian: sg::optimization::ScalarFunctionHessian &

        ComponentScalarFunctionHessian(fHessian, k, defaultValues=std::vector< sg::float_t >()) -> OptComponentScalarFunctionHessian

        Parameters:
            fHessian: sg::optimization::VectorFunctionHessian &
            k: size_t
            defaultValues: std::vector< sg::float_t,std::allocator< sg::float_t > >

        __init__(self, fHessian, k) -> OptComponentScalarFunctionHessian

        Parameters:
            fHessian: sg::optimization::VectorFunctionHessian &
            k: size_t


        1
        """
        this = _pysgpp_swig.new_OptComponentScalarFunctionHessian(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptComponentScalarFunctionHessian
    __del__ = lambda self : None;
OptComponentScalarFunctionHessian_swigregister = _pysgpp_swig.OptComponentScalarFunctionHessian_swigregister
OptComponentScalarFunctionHessian_swigregister(OptComponentScalarFunctionHessian)

class OptWrapperScalarFunction(OptScalarFunction):
    """1"""
    __swig_setmethods__ = {}
    for _s in [OptScalarFunction]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptWrapperScalarFunction, name, value)
    __swig_getmethods__ = {}
    for _s in [OptScalarFunction]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptWrapperScalarFunction, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, d, f) -> OptWrapperScalarFunction

        Parameters:
            d: size_t
            f: sg::optimization::WrapperScalarFunction::FunctionEvalType


        1
        """
        this = _pysgpp_swig.new_OptWrapperScalarFunction(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptWrapperScalarFunction
    __del__ = lambda self : None;
OptWrapperScalarFunction_swigregister = _pysgpp_swig.OptWrapperScalarFunction_swigregister
OptWrapperScalarFunction_swigregister(OptWrapperScalarFunction)

class OptWrapperScalarFunctionGradient(OptScalarFunctionGradient):
    """1"""
    __swig_setmethods__ = {}
    for _s in [OptScalarFunctionGradient]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptWrapperScalarFunctionGradient, name, value)
    __swig_getmethods__ = {}
    for _s in [OptScalarFunctionGradient]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptWrapperScalarFunctionGradient, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, d, fGradient) -> OptWrapperScalarFunctionGradient

        Parameters:
            d: size_t
            fGradient: sg::optimization::WrapperScalarFunctionGradient::FunctionGradientEvalType


        1
        """
        this = _pysgpp_swig.new_OptWrapperScalarFunctionGradient(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptWrapperScalarFunctionGradient
    __del__ = lambda self : None;
OptWrapperScalarFunctionGradient_swigregister = _pysgpp_swig.OptWrapperScalarFunctionGradient_swigregister
OptWrapperScalarFunctionGradient_swigregister(OptWrapperScalarFunctionGradient)

class OptWrapperScalarFunctionHessian(OptScalarFunctionHessian):
    """1"""
    __swig_setmethods__ = {}
    for _s in [OptScalarFunctionHessian]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptWrapperScalarFunctionHessian, name, value)
    __swig_getmethods__ = {}
    for _s in [OptScalarFunctionHessian]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptWrapperScalarFunctionHessian, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, d, fHessian) -> OptWrapperScalarFunctionHessian

        Parameters:
            d: size_t
            fHessian: sg::optimization::WrapperScalarFunctionHessian::FunctionHessianEvalType


        1
        """
        this = _pysgpp_swig.new_OptWrapperScalarFunctionHessian(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptWrapperScalarFunctionHessian
    __del__ = lambda self : None;
OptWrapperScalarFunctionHessian_swigregister = _pysgpp_swig.OptWrapperScalarFunctionHessian_swigregister
OptWrapperScalarFunctionHessian_swigregister(OptWrapperScalarFunctionHessian)

class OptWrapperVectorFunction(OptVectorFunction):
    """1"""
    __swig_setmethods__ = {}
    for _s in [OptVectorFunction]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptWrapperVectorFunction, name, value)
    __swig_getmethods__ = {}
    for _s in [OptVectorFunction]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptWrapperVectorFunction, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, d, m, f) -> OptWrapperVectorFunction

        Parameters:
            d: size_t
            m: size_t
            f: sg::optimization::WrapperVectorFunction::FunctionEvalType


        1
        """
        this = _pysgpp_swig.new_OptWrapperVectorFunction(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptWrapperVectorFunction
    __del__ = lambda self : None;
OptWrapperVectorFunction_swigregister = _pysgpp_swig.OptWrapperVectorFunction_swigregister
OptWrapperVectorFunction_swigregister(OptWrapperVectorFunction)

class OptWrapperVectorFunctionGradient(OptVectorFunctionGradient):
    """1"""
    __swig_setmethods__ = {}
    for _s in [OptVectorFunctionGradient]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptWrapperVectorFunctionGradient, name, value)
    __swig_getmethods__ = {}
    for _s in [OptVectorFunctionGradient]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptWrapperVectorFunctionGradient, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, d, m, fGradient) -> OptWrapperVectorFunctionGradient

        Parameters:
            d: size_t
            m: size_t
            fGradient: sg::optimization::WrapperVectorFunctionGradient::FunctionGradientEvalType


        1
        """
        this = _pysgpp_swig.new_OptWrapperVectorFunctionGradient(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptWrapperVectorFunctionGradient
    __del__ = lambda self : None;
OptWrapperVectorFunctionGradient_swigregister = _pysgpp_swig.OptWrapperVectorFunctionGradient_swigregister
OptWrapperVectorFunctionGradient_swigregister(OptWrapperVectorFunctionGradient)

class OptWrapperVectorFunctionHessian(OptVectorFunctionHessian):
    """1"""
    __swig_setmethods__ = {}
    for _s in [OptVectorFunctionHessian]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptWrapperVectorFunctionHessian, name, value)
    __swig_getmethods__ = {}
    for _s in [OptVectorFunctionHessian]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptWrapperVectorFunctionHessian, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, d, m, fHessian) -> OptWrapperVectorFunctionHessian

        Parameters:
            d: size_t
            m: size_t
            fHessian: sg::optimization::WrapperVectorFunctionHessian::FunctionHessianEvalType


        1
        """
        this = _pysgpp_swig.new_OptWrapperVectorFunctionHessian(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptWrapperVectorFunctionHessian
    __del__ = lambda self : None;
OptWrapperVectorFunctionHessian_swigregister = _pysgpp_swig.OptWrapperVectorFunctionHessian_swigregister
OptWrapperVectorFunctionHessian_swigregister(OptWrapperVectorFunctionHessian)

class OptTestFunction(OptScalarFunction):
    """1"""
    __swig_setmethods__ = {}
    for _s in [OptScalarFunction]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptTestFunction, name, value)
    __swig_getmethods__ = {}
    for _s in [OptScalarFunction]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptTestFunction, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    DEFAULT_STANDARD_DEVIATION = _pysgpp_swig.OptTestFunction_DEFAULT_STANDARD_DEVIATION
    __swig_destroy__ = _pysgpp_swig.delete_OptTestFunction
    __del__ = lambda self : None;
    def evalUndisplaced(self, *args):
        """
        evalUndisplaced(self, x) -> sg::float_t

        Parameters:
            x: sg::base::DataVector const &


        1
        """
        return _pysgpp_swig.OptTestFunction_evalUndisplaced(self, *args)

    def getOptimalPoint(self, *args):
        """
        getOptimalPoint(self, x) -> sg::float_t

        Parameters:
            x: sg::base::DataVector &


        1
        """
        return _pysgpp_swig.OptTestFunction_getOptimalPoint(self, *args)

    def getOptimalPointUndisplaced(self, *args):
        """
        getOptimalPointUndisplaced(self, x) -> sg::float_t

        Parameters:
            x: sg::base::DataVector &


        1
        """
        return _pysgpp_swig.OptTestFunction_getOptimalPointUndisplaced(self, *args)

    def generateDisplacement(self, *args):
        """
        generateDisplacement(self)
        generateDisplacement(self, stdDev)

        Parameters:
            stdDev: sg::float_t


        1
        """
        return _pysgpp_swig.OptTestFunction_generateDisplacement(self, *args)

    def displaceVector(self, *args):
        """
        displaceVector(self, x)

        Parameters:
            x: sg::base::DataVector &


        1
        """
        return _pysgpp_swig.OptTestFunction_displaceVector(self, *args)

    def reverseDisplaceVector(self, *args):
        """
        reverseDisplaceVector(self, x)

        Parameters:
            x: sg::base::DataVector &


        1
        """
        return _pysgpp_swig.OptTestFunction_reverseDisplaceVector(self, *args)

    def getStandardDeviation(self):
        """
        getStandardDeviation(self) -> sg::float_t

        Parameters:
            self: sg::optimization::test_functions::TestFunction const *


        1
        """
        return _pysgpp_swig.OptTestFunction_getStandardDeviation(self)

    def getDisplacement(self, *args):
        """
        getDisplacement(self, displacement)

        Parameters:
            displacement: sg::base::DataVector &


        1
        """
        return _pysgpp_swig.OptTestFunction_getDisplacement(self, *args)

OptTestFunction_swigregister = _pysgpp_swig.OptTestFunction_swigregister
OptTestFunction_swigregister(OptTestFunction)

class OptAckley(OptTestFunction):
    """1"""
    __swig_setmethods__ = {}
    for _s in [OptTestFunction]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptAckley, name, value)
    __swig_getmethods__ = {}
    for _s in [OptTestFunction]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptAckley, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, d) -> OptAckley

        Parameters:
            d: size_t


        1
        """
        this = _pysgpp_swig.new_OptAckley(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptAckley
    __del__ = lambda self : None;
OptAckley_swigregister = _pysgpp_swig.OptAckley_swigregister
OptAckley_swigregister(OptAckley)

class OptBeale(OptTestFunction):
    """1"""
    __swig_setmethods__ = {}
    for _s in [OptTestFunction]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptBeale, name, value)
    __swig_getmethods__ = {}
    for _s in [OptTestFunction]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptBeale, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """
        __init__(self) -> OptBeale

        1
        """
        this = _pysgpp_swig.new_OptBeale()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptBeale
    __del__ = lambda self : None;
OptBeale_swigregister = _pysgpp_swig.OptBeale_swigregister
OptBeale_swigregister(OptBeale)

class OptBranin(OptTestFunction):
    """1"""
    __swig_setmethods__ = {}
    for _s in [OptTestFunction]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptBranin, name, value)
    __swig_getmethods__ = {}
    for _s in [OptTestFunction]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptBranin, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """
        __init__(self) -> OptBranin

        1
        """
        this = _pysgpp_swig.new_OptBranin()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptBranin
    __del__ = lambda self : None;
OptBranin_swigregister = _pysgpp_swig.OptBranin_swigregister
OptBranin_swigregister(OptBranin)

class OptEasom(OptTestFunction):
    """1"""
    __swig_setmethods__ = {}
    for _s in [OptTestFunction]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptEasom, name, value)
    __swig_getmethods__ = {}
    for _s in [OptTestFunction]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptEasom, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """
        __init__(self) -> OptEasom

        1
        """
        this = _pysgpp_swig.new_OptEasom()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptEasom
    __del__ = lambda self : None;
OptEasom_swigregister = _pysgpp_swig.OptEasom_swigregister
OptEasom_swigregister(OptEasom)

class OptEggholder(OptTestFunction):
    """1"""
    __swig_setmethods__ = {}
    for _s in [OptTestFunction]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptEggholder, name, value)
    __swig_getmethods__ = {}
    for _s in [OptTestFunction]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptEggholder, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """
        __init__(self) -> OptEggholder

        1
        """
        this = _pysgpp_swig.new_OptEggholder()
        try: self.this.append(this)
        except: self.this = this
    def generateDisplacement(self, *args):
        """
        generateDisplacement(self)
        generateDisplacement(self, stdDev)

        Parameters:
            stdDev: sg::float_t


        1
        """
        return _pysgpp_swig.OptEggholder_generateDisplacement(self, *args)

    __swig_destroy__ = _pysgpp_swig.delete_OptEggholder
    __del__ = lambda self : None;
OptEggholder_swigregister = _pysgpp_swig.OptEggholder_swigregister
OptEggholder_swigregister(OptEggholder)

class OptGoldsteinPrice(OptTestFunction):
    """1"""
    __swig_setmethods__ = {}
    for _s in [OptTestFunction]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptGoldsteinPrice, name, value)
    __swig_getmethods__ = {}
    for _s in [OptTestFunction]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptGoldsteinPrice, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """
        __init__(self) -> OptGoldsteinPrice

        1
        """
        this = _pysgpp_swig.new_OptGoldsteinPrice()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptGoldsteinPrice
    __del__ = lambda self : None;
OptGoldsteinPrice_swigregister = _pysgpp_swig.OptGoldsteinPrice_swigregister
OptGoldsteinPrice_swigregister(OptGoldsteinPrice)

class OptGriewank(OptTestFunction):
    """1"""
    __swig_setmethods__ = {}
    for _s in [OptTestFunction]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptGriewank, name, value)
    __swig_getmethods__ = {}
    for _s in [OptTestFunction]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptGriewank, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, d) -> OptGriewank

        Parameters:
            d: size_t


        1
        """
        this = _pysgpp_swig.new_OptGriewank(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptGriewank
    __del__ = lambda self : None;
OptGriewank_swigregister = _pysgpp_swig.OptGriewank_swigregister
OptGriewank_swigregister(OptGriewank)

class OptHartman3(OptTestFunction):
    """1"""
    __swig_setmethods__ = {}
    for _s in [OptTestFunction]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptHartman3, name, value)
    __swig_getmethods__ = {}
    for _s in [OptTestFunction]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptHartman3, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """
        __init__(self) -> OptHartman3

        1
        """
        this = _pysgpp_swig.new_OptHartman3()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptHartman3
    __del__ = lambda self : None;
OptHartman3_swigregister = _pysgpp_swig.OptHartman3_swigregister
OptHartman3_swigregister(OptHartman3)

class OptHartman6(OptTestFunction):
    """1"""
    __swig_setmethods__ = {}
    for _s in [OptTestFunction]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptHartman6, name, value)
    __swig_getmethods__ = {}
    for _s in [OptTestFunction]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptHartman6, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """
        __init__(self) -> OptHartman6

        1
        """
        this = _pysgpp_swig.new_OptHartman6()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptHartman6
    __del__ = lambda self : None;
OptHartman6_swigregister = _pysgpp_swig.OptHartman6_swigregister
OptHartman6_swigregister(OptHartman6)

class OptHimmelblau(OptTestFunction):
    """1"""
    __swig_setmethods__ = {}
    for _s in [OptTestFunction]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptHimmelblau, name, value)
    __swig_getmethods__ = {}
    for _s in [OptTestFunction]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptHimmelblau, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """
        __init__(self) -> OptHimmelblau

        1
        """
        this = _pysgpp_swig.new_OptHimmelblau()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptHimmelblau
    __del__ = lambda self : None;
OptHimmelblau_swigregister = _pysgpp_swig.OptHimmelblau_swigregister
OptHimmelblau_swigregister(OptHimmelblau)

class OptHoelderTable(OptTestFunction):
    """1"""
    __swig_setmethods__ = {}
    for _s in [OptTestFunction]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptHoelderTable, name, value)
    __swig_getmethods__ = {}
    for _s in [OptTestFunction]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptHoelderTable, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """
        __init__(self) -> OptHoelderTable

        1
        """
        this = _pysgpp_swig.new_OptHoelderTable()
        try: self.this.append(this)
        except: self.this = this
    def generateDisplacement(self, *args):
        """
        generateDisplacement(self)
        generateDisplacement(self, stdDev)

        Parameters:
            stdDev: sg::float_t


        1
        """
        return _pysgpp_swig.OptHoelderTable_generateDisplacement(self, *args)

    __swig_destroy__ = _pysgpp_swig.delete_OptHoelderTable
    __del__ = lambda self : None;
OptHoelderTable_swigregister = _pysgpp_swig.OptHoelderTable_swigregister
OptHoelderTable_swigregister(OptHoelderTable)

class OptMichalewicz(OptTestFunction):
    """1"""
    __swig_setmethods__ = {}
    for _s in [OptTestFunction]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptMichalewicz, name, value)
    __swig_getmethods__ = {}
    for _s in [OptTestFunction]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptMichalewicz, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """
        __init__(self) -> OptMichalewicz

        1
        """
        this = _pysgpp_swig.new_OptMichalewicz()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptMichalewicz
    __del__ = lambda self : None;
OptMichalewicz_swigregister = _pysgpp_swig.OptMichalewicz_swigregister
OptMichalewicz_swigregister(OptMichalewicz)

class OptMladineo(OptTestFunction):
    """1"""
    __swig_setmethods__ = {}
    for _s in [OptTestFunction]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptMladineo, name, value)
    __swig_getmethods__ = {}
    for _s in [OptTestFunction]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptMladineo, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """
        __init__(self) -> OptMladineo

        1
        """
        this = _pysgpp_swig.new_OptMladineo()
        try: self.this.append(this)
        except: self.this = this
    def generateDisplacement(self, *args):
        """
        generateDisplacement(self)
        generateDisplacement(self, stdDev)

        Parameters:
            stdDev: sg::float_t


        1
        """
        return _pysgpp_swig.OptMladineo_generateDisplacement(self, *args)

    __swig_destroy__ = _pysgpp_swig.delete_OptMladineo
    __del__ = lambda self : None;
OptMladineo_swigregister = _pysgpp_swig.OptMladineo_swigregister
OptMladineo_swigregister(OptMladineo)

class OptRastrigin(OptTestFunction):
    """1"""
    __swig_setmethods__ = {}
    for _s in [OptTestFunction]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptRastrigin, name, value)
    __swig_getmethods__ = {}
    for _s in [OptTestFunction]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptRastrigin, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, d) -> OptRastrigin

        Parameters:
            d: size_t


        1
        """
        this = _pysgpp_swig.new_OptRastrigin(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptRastrigin
    __del__ = lambda self : None;
OptRastrigin_swigregister = _pysgpp_swig.OptRastrigin_swigregister
OptRastrigin_swigregister(OptRastrigin)

class OptRosenbrock(OptTestFunction):
    """1"""
    __swig_setmethods__ = {}
    for _s in [OptTestFunction]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptRosenbrock, name, value)
    __swig_getmethods__ = {}
    for _s in [OptTestFunction]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptRosenbrock, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, d) -> OptRosenbrock

        Parameters:
            d: size_t


        1
        """
        this = _pysgpp_swig.new_OptRosenbrock(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptRosenbrock
    __del__ = lambda self : None;
OptRosenbrock_swigregister = _pysgpp_swig.OptRosenbrock_swigregister
OptRosenbrock_swigregister(OptRosenbrock)

class OptSHCB(OptTestFunction):
    """1"""
    __swig_setmethods__ = {}
    for _s in [OptTestFunction]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptSHCB, name, value)
    __swig_getmethods__ = {}
    for _s in [OptTestFunction]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptSHCB, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """
        __init__(self) -> OptSHCB

        1
        """
        this = _pysgpp_swig.new_OptSHCB()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptSHCB
    __del__ = lambda self : None;
OptSHCB_swigregister = _pysgpp_swig.OptSHCB_swigregister
OptSHCB_swigregister(OptSHCB)

class OptSchwefel(OptTestFunction):
    """1"""
    __swig_setmethods__ = {}
    for _s in [OptTestFunction]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptSchwefel, name, value)
    __swig_getmethods__ = {}
    for _s in [OptTestFunction]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptSchwefel, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, d) -> OptSchwefel

        Parameters:
            d: size_t


        1
        """
        this = _pysgpp_swig.new_OptSchwefel(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptSchwefel
    __del__ = lambda self : None;
OptSchwefel_swigregister = _pysgpp_swig.OptSchwefel_swigregister
OptSchwefel_swigregister(OptSchwefel)

class OptSphere(OptTestFunction):
    """1"""
    __swig_setmethods__ = {}
    for _s in [OptTestFunction]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptSphere, name, value)
    __swig_getmethods__ = {}
    for _s in [OptTestFunction]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptSphere, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, d) -> OptSphere

        Parameters:
            d: size_t


        1
        """
        this = _pysgpp_swig.new_OptSphere(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptSphere
    __del__ = lambda self : None;
OptSphere_swigregister = _pysgpp_swig.OptSphere_swigregister
OptSphere_swigregister(OptSphere)

class OptHashRefinementMultiple(HashRefinement):
    """1"""
    __swig_setmethods__ = {}
    for _s in [HashRefinement]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptHashRefinementMultiple, name, value)
    __swig_getmethods__ = {}
    for _s in [HashRefinement]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptHashRefinementMultiple, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """
        __init__(self) -> OptHashRefinementMultiple

        1
        """
        this = _pysgpp_swig.new_OptHashRefinementMultiple()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptHashRefinementMultiple
    __del__ = lambda self : None;
OptHashRefinementMultiple_swigregister = _pysgpp_swig.OptHashRefinementMultiple_swigregister
OptHashRefinementMultiple_swigregister(OptHashRefinementMultiple)

class OptIterativeGridGenerator(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptIterativeGridGenerator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptIterativeGridGenerator, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, f, grid, N) -> OptIterativeGridGenerator

        Parameters:
            f: sg::optimization::ScalarFunction &
            grid: sg::base::Grid &
            N: size_t


        1
        """
        if self.__class__ == OptIterativeGridGenerator:
            _self = None
        else:
            _self = self
        this = _pysgpp_swig.new_OptIterativeGridGenerator(_self, *args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptIterativeGridGenerator
    __del__ = lambda self : None;
    def generate(self):
        """
        generate(self) -> bool

        Parameters:
            self: sg::optimization::IterativeGridGenerator *


        1
        """
        return _pysgpp_swig.OptIterativeGridGenerator_generate(self)

    def getGrid(self):
        """
        getGrid(self) -> Grid

        Parameters:
            self: sg::optimization::IterativeGridGenerator const *


        1
        """
        return _pysgpp_swig.OptIterativeGridGenerator_getGrid(self)

    def getFunctionValues(self):
        """
        getFunctionValues(self) -> DataVector

        Parameters:
            self: sg::optimization::IterativeGridGenerator const *


        1
        """
        return _pysgpp_swig.OptIterativeGridGenerator_getFunctionValues(self)

    def __disown__(self):
        self.this.disown()
        _pysgpp_swig.disown_OptIterativeGridGenerator(self)
        return weakref_proxy(self)
OptIterativeGridGenerator_swigregister = _pysgpp_swig.OptIterativeGridGenerator_swigregister
OptIterativeGridGenerator_swigregister(OptIterativeGridGenerator)

class OptIterativeGridGeneratorLinearSurplus(OptIterativeGridGenerator):
    """1"""
    __swig_setmethods__ = {}
    for _s in [OptIterativeGridGenerator]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptIterativeGridGeneratorLinearSurplus, name, value)
    __swig_getmethods__ = {}
    for _s in [OptIterativeGridGenerator]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptIterativeGridGeneratorLinearSurplus, name)
    __repr__ = _swig_repr
    DEFAULT_ADAPTIVITY = _pysgpp_swig.OptIterativeGridGeneratorLinearSurplus_DEFAULT_ADAPTIVITY
    def __init__(self, *args): 
        """
        IterativeGridGeneratorLinearSurplus(f, grid, N, adaptivity=DEFAULT_ADAPTIVITY) -> OptIterativeGridGeneratorLinearSurplus

        Parameters:
            f: sg::optimization::ScalarFunction &
            grid: sg::base::Grid &
            N: size_t
            adaptivity: sg::float_t

        __init__(self, f, grid, N) -> OptIterativeGridGeneratorLinearSurplus

        Parameters:
            f: sg::optimization::ScalarFunction &
            grid: sg::base::Grid &
            N: size_t


        1
        """
        this = _pysgpp_swig.new_OptIterativeGridGeneratorLinearSurplus(*args)
        try: self.this.append(this)
        except: self.this = this
    def getAdaptivity(self):
        """
        getAdaptivity(self) -> sg::float_t

        Parameters:
            self: sg::optimization::IterativeGridGeneratorLinearSurplus const *


        1
        """
        return _pysgpp_swig.OptIterativeGridGeneratorLinearSurplus_getAdaptivity(self)

    def setAdaptivity(self, *args):
        """
        setAdaptivity(self, adaptivity)

        Parameters:
            adaptivity: sg::float_t


        1
        """
        return _pysgpp_swig.OptIterativeGridGeneratorLinearSurplus_setAdaptivity(self, *args)

    __swig_destroy__ = _pysgpp_swig.delete_OptIterativeGridGeneratorLinearSurplus
    __del__ = lambda self : None;
OptIterativeGridGeneratorLinearSurplus_swigregister = _pysgpp_swig.OptIterativeGridGeneratorLinearSurplus_swigregister
OptIterativeGridGeneratorLinearSurplus_swigregister(OptIterativeGridGeneratorLinearSurplus)

class OptIterativeGridGeneratorRitterNovak(OptIterativeGridGenerator):
    """1"""
    __swig_setmethods__ = {}
    for _s in [OptIterativeGridGenerator]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptIterativeGridGeneratorRitterNovak, name, value)
    __swig_getmethods__ = {}
    for _s in [OptIterativeGridGenerator]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptIterativeGridGeneratorRitterNovak, name)
    __repr__ = _swig_repr
    DEFAULT_ADAPTIVITY = _pysgpp_swig.OptIterativeGridGeneratorRitterNovak_DEFAULT_ADAPTIVITY
    DEFAULT_MAX_LEVEL = _pysgpp_swig.OptIterativeGridGeneratorRitterNovak_DEFAULT_MAX_LEVEL
    STD_POW = _pysgpp_swig.OptIterativeGridGeneratorRitterNovak_STD_POW
    FAST_POW = _pysgpp_swig.OptIterativeGridGeneratorRitterNovak_FAST_POW
    def __init__(self, *args): 
        """
        IterativeGridGeneratorRitterNovak(f, grid, N, adaptivity=DEFAULT_ADAPTIVITY, maxLevel=DEFAULT_MAX_LEVEL, powMethod=STD_POW) -> OptIterativeGridGeneratorRitterNovak

        Parameters:
            f: sg::optimization::ScalarFunction &
            grid: sg::base::Grid &
            N: size_t
            adaptivity: sg::float_t
            maxLevel: sg::base::level_t
            powMethod: enum sg::optimization::IterativeGridGeneratorRitterNovak::PowMethod

        IterativeGridGeneratorRitterNovak(f, grid, N, adaptivity=DEFAULT_ADAPTIVITY, maxLevel=DEFAULT_MAX_LEVEL) -> OptIterativeGridGeneratorRitterNovak

        Parameters:
            f: sg::optimization::ScalarFunction &
            grid: sg::base::Grid &
            N: size_t
            adaptivity: sg::float_t
            maxLevel: sg::base::level_t

        IterativeGridGeneratorRitterNovak(f, grid, N, adaptivity=DEFAULT_ADAPTIVITY) -> OptIterativeGridGeneratorRitterNovak

        Parameters:
            f: sg::optimization::ScalarFunction &
            grid: sg::base::Grid &
            N: size_t
            adaptivity: sg::float_t

        __init__(self, f, grid, N) -> OptIterativeGridGeneratorRitterNovak

        Parameters:
            f: sg::optimization::ScalarFunction &
            grid: sg::base::Grid &
            N: size_t


        1
        """
        this = _pysgpp_swig.new_OptIterativeGridGeneratorRitterNovak(*args)
        try: self.this.append(this)
        except: self.this = this
    def getAdaptivity(self):
        """
        getAdaptivity(self) -> sg::float_t

        Parameters:
            self: sg::optimization::IterativeGridGeneratorRitterNovak const *


        1
        """
        return _pysgpp_swig.OptIterativeGridGeneratorRitterNovak_getAdaptivity(self)

    def setAdaptivity(self, *args):
        """
        setAdaptivity(self, adaptivity)

        Parameters:
            adaptivity: sg::float_t


        1
        """
        return _pysgpp_swig.OptIterativeGridGeneratorRitterNovak_setAdaptivity(self, *args)

    def getMaxLevel(self):
        """
        getMaxLevel(self) -> sg::base::level_t

        Parameters:
            self: sg::optimization::IterativeGridGeneratorRitterNovak const *


        1
        """
        return _pysgpp_swig.OptIterativeGridGeneratorRitterNovak_getMaxLevel(self)

    def setMaxLevel(self, *args):
        """
        setMaxLevel(self, maxLevel)

        Parameters:
            maxLevel: sg::base::level_t


        1
        """
        return _pysgpp_swig.OptIterativeGridGeneratorRitterNovak_setMaxLevel(self, *args)

    def getPowMethod(self):
        """
        getPowMethod(self) -> sg::optimization::IterativeGridGeneratorRitterNovak::PowMethod

        Parameters:
            self: sg::optimization::IterativeGridGeneratorRitterNovak const *


        1
        """
        return _pysgpp_swig.OptIterativeGridGeneratorRitterNovak_getPowMethod(self)

    def setPowMethod(self, *args):
        """
        setPowMethod(self, powMethod)

        Parameters:
            powMethod: enum sg::optimization::IterativeGridGeneratorRitterNovak::PowMethod


        1
        """
        return _pysgpp_swig.OptIterativeGridGeneratorRitterNovak_setPowMethod(self, *args)

    __swig_destroy__ = _pysgpp_swig.delete_OptIterativeGridGeneratorRitterNovak
    __del__ = lambda self : None;
OptIterativeGridGeneratorRitterNovak_swigregister = _pysgpp_swig.OptIterativeGridGeneratorRitterNovak_swigregister
OptIterativeGridGeneratorRitterNovak_swigregister(OptIterativeGridGeneratorRitterNovak)

class OptIterativeGridGeneratorSOO(OptIterativeGridGenerator):
    """1"""
    __swig_setmethods__ = {}
    for _s in [OptIterativeGridGenerator]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptIterativeGridGeneratorSOO, name, value)
    __swig_getmethods__ = {}
    for _s in [OptIterativeGridGenerator]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptIterativeGridGeneratorSOO, name)
    __repr__ = _swig_repr
    DEFAULT_ADAPTIVITY = _pysgpp_swig.OptIterativeGridGeneratorSOO_DEFAULT_ADAPTIVITY
    def __init__(self, *args): 
        """
        IterativeGridGeneratorSOO(f, grid, N, adaptivity=DEFAULT_ADAPTIVITY) -> OptIterativeGridGeneratorSOO

        Parameters:
            f: sg::optimization::ScalarFunction &
            grid: sg::base::Grid &
            N: size_t
            adaptivity: sg::float_t

        __init__(self, f, grid, N) -> OptIterativeGridGeneratorSOO

        Parameters:
            f: sg::optimization::ScalarFunction &
            grid: sg::base::Grid &
            N: size_t


        1
        """
        this = _pysgpp_swig.new_OptIterativeGridGeneratorSOO(*args)
        try: self.this.append(this)
        except: self.this = this
    def getAdaptivity(self):
        """
        getAdaptivity(self) -> sg::optimization::IterativeGridGeneratorSOO::AdaptivityFunction

        Parameters:
            self: sg::optimization::IterativeGridGeneratorSOO const *


        1
        """
        return _pysgpp_swig.OptIterativeGridGeneratorSOO_getAdaptivity(self)

    def setAdaptivity(self, *args):
        """
        setAdaptivity(self, adaptivity)

        Parameters:
            adaptivity: sg::float_t

        setAdaptivity(self, adaptivity)

        Parameters:
            adaptivity: sg::optimization::IterativeGridGeneratorSOO::AdaptivityFunction


        1
        """
        return _pysgpp_swig.OptIterativeGridGeneratorSOO_setAdaptivity(self, *args)

    __swig_destroy__ = _pysgpp_swig.delete_OptIterativeGridGeneratorSOO
    __del__ = lambda self : None;
OptIterativeGridGeneratorSOO_swigregister = _pysgpp_swig.OptIterativeGridGeneratorSOO_swigregister
OptIterativeGridGeneratorSOO_swigregister(OptIterativeGridGeneratorSOO)


def createOperationMultipleHierarchisation(*args):
  """
    createOperationMultipleHierarchisation(grid) -> OperationMultipleHierarchisation

    Parameters:
        grid: sg::base::Grid &


    1
    """
  return _pysgpp_swig.createOperationMultipleHierarchisation(*args)
class OperationMultipleHierarchisation(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OperationMultipleHierarchisation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OperationMultipleHierarchisation, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pysgpp_swig.delete_OperationMultipleHierarchisation
    __del__ = lambda self : None;
    def doHierarchisation(self, *args):
        """
        doHierarchisation(self, nodeValues) -> bool

        Parameters:
            nodeValues: sg::base::DataVector &

        doHierarchisation(self, nodeValues) -> bool

        Parameters:
            nodeValues: sg::base::DataMatrix &


        1
        """
        return _pysgpp_swig.OperationMultipleHierarchisation_doHierarchisation(self, *args)

    def doDehierarchisation(self, *args):
        """
        doDehierarchisation(self, alpha)

        Parameters:
            alpha: sg::base::DataVector &

        doDehierarchisation(self, alpha)

        Parameters:
            alpha: sg::base::DataMatrix &


        1
        """
        return _pysgpp_swig.OperationMultipleHierarchisation_doDehierarchisation(self, *args)

OperationMultipleHierarchisation_swigregister = _pysgpp_swig.OperationMultipleHierarchisation_swigregister
OperationMultipleHierarchisation_swigregister(OperationMultipleHierarchisation)

class OptSLE(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptSLE, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptSLE, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """
        __init__(self) -> OptSLE

        Parameters:
            self: PyObject *


        1
        """
        if self.__class__ == OptSLE:
            _self = None
        else:
            _self = self
        this = _pysgpp_swig.new_OptSLE(_self, )
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptSLE
    __del__ = lambda self : None;
    def isMatrixEntryNonZero(self, *args):
        """
        isMatrixEntryNonZero(self, i, j) -> bool

        Parameters:
            i: size_t
            j: size_t


        1
        """
        return _pysgpp_swig.OptSLE_isMatrixEntryNonZero(self, *args)

    def getMatrixEntry(self, *args):
        """
        getMatrixEntry(self, i, j) -> sg::float_t

        Parameters:
            i: size_t
            j: size_t


        1
        """
        return _pysgpp_swig.OptSLE_getMatrixEntry(self, *args)

    def matrixVectorMultiplication(self, *args):
        """
        matrixVectorMultiplication(self, x, y)

        Parameters:
            x: sg::base::DataVector const &
            y: sg::base::DataVector &


        1
        """
        return _pysgpp_swig.OptSLE_matrixVectorMultiplication(self, *args)

    def countNNZ(self):
        """
        countNNZ(self) -> size_t

        Parameters:
            self: sg::optimization::SLE *


        1
        """
        return _pysgpp_swig.OptSLE_countNNZ(self)

    def getDimension(self):
        """
        getDimension(self) -> size_t

        Parameters:
            self: sg::optimization::SLE const *


        1
        """
        return _pysgpp_swig.OptSLE_getDimension(self)

    def isCloneable(self):
        """
        isCloneable(self) -> bool

        Parameters:
            self: sg::optimization::SLE const *


        1
        """
        return _pysgpp_swig.OptSLE_isCloneable(self)

    def __disown__(self):
        self.this.disown()
        _pysgpp_swig.disown_OptSLE(self)
        return weakref_proxy(self)
OptSLE_swigregister = _pysgpp_swig.OptSLE_swigregister
OptSLE_swigregister(OptSLE)

class CloneableSLE(OptSLE):
    """1"""
    __swig_setmethods__ = {}
    for _s in [OptSLE]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CloneableSLE, name, value)
    __swig_getmethods__ = {}
    for _s in [OptSLE]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CloneableSLE, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pysgpp_swig.delete_CloneableSLE
    __del__ = lambda self : None;
    def clone(self, *args):
        """
        clone(self, clone)

        Parameters:
            clone: std::unique_ptr< sg::optimization::CloneableSLE > &


        1
        """
        return _pysgpp_swig.CloneableSLE_clone(self, *args)

    def isCloneableSLE(self):
        """
        isCloneableSLE(self) -> bool

        Parameters:
            self: sg::optimization::CloneableSLE const *


        1
        """
        return _pysgpp_swig.CloneableSLE_isCloneableSLE(self)

CloneableSLE_swigregister = _pysgpp_swig.CloneableSLE_swigregister
CloneableSLE_swigregister(CloneableSLE)

class OptFullSLE(CloneableSLE):
    """1"""
    __swig_setmethods__ = {}
    for _s in [CloneableSLE]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptFullSLE, name, value)
    __swig_getmethods__ = {}
    for _s in [CloneableSLE]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptFullSLE, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, A) -> OptFullSLE

        Parameters:
            A: sg::base::DataMatrix &


        1
        """
        this = _pysgpp_swig.new_OptFullSLE(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptFullSLE
    __del__ = lambda self : None;
    def getA(self):
        """
        getA(self) -> DataMatrix

        Parameters:
            self: sg::optimization::FullSLE *


        1
        """
        return _pysgpp_swig.OptFullSLE_getA(self)

OptFullSLE_swigregister = _pysgpp_swig.OptFullSLE_swigregister
OptFullSLE_swigregister(OptFullSLE)

class OptHierarchisationSLE(CloneableSLE):
    """1"""
    __swig_setmethods__ = {}
    for _s in [CloneableSLE]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptHierarchisationSLE, name, value)
    __swig_getmethods__ = {}
    for _s in [CloneableSLE]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptHierarchisationSLE, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        HierarchisationSLE(grid) -> OptHierarchisationSLE

        Parameters:
            grid: sg::base::Grid &

        __init__(self, grid, gridStorage) -> OptHierarchisationSLE

        Parameters:
            grid: sg::base::Grid &
            gridStorage: sg::base::GridStorage &


        1
        """
        this = _pysgpp_swig.new_OptHierarchisationSLE(*args)
        try: self.this.append(this)
        except: self.this = this
    def getGrid(self):
        """
        getGrid(self) -> Grid

        Parameters:
            self: sg::optimization::HierarchisationSLE *


        1
        """
        return _pysgpp_swig.OptHierarchisationSLE_getGrid(self)

    def setGrid(self, *args):
        """
        setGrid(self, grid)

        Parameters:
            grid: sg::base::Grid &


        1
        """
        return _pysgpp_swig.OptHierarchisationSLE_setGrid(self, *args)

    def getGridStorage(self):
        """
        getGridStorage(self) -> HashGridStorage

        Parameters:
            self: sg::optimization::HierarchisationSLE *


        1
        """
        return _pysgpp_swig.OptHierarchisationSLE_getGridStorage(self)

    __swig_destroy__ = _pysgpp_swig.delete_OptHierarchisationSLE
    __del__ = lambda self : None;
OptHierarchisationSLE_swigregister = _pysgpp_swig.OptHierarchisationSLE_swigregister
OptHierarchisationSLE_swigregister(OptHierarchisationSLE)

class OptSLESolver(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptSLESolver, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptSLESolver, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """
        __init__(self) -> OptSLESolver

        Parameters:
            self: PyObject *


        1
        """
        if self.__class__ == OptSLESolver:
            _self = None
        else:
            _self = self
        this = _pysgpp_swig.new_OptSLESolver(_self, )
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptSLESolver
    __del__ = lambda self : None;
    def solve(self, *args):
        """
        solve(self, system, b, x) -> bool

        Parameters:
            system: sg::optimization::SLE &
            b: sg::base::DataVector &
            x: sg::base::DataVector &

        solve(self, system, B, X) -> bool

        Parameters:
            system: sg::optimization::SLE &
            B: sg::base::DataMatrix &
            X: sg::base::DataMatrix &


        1
        """
        return _pysgpp_swig.OptSLESolver_solve(self, *args)

    def __disown__(self):
        self.this.disown()
        _pysgpp_swig.disown_OptSLESolver(self)
        return weakref_proxy(self)
OptSLESolver_swigregister = _pysgpp_swig.OptSLESolver_swigregister
OptSLESolver_swigregister(OptSLESolver)

class OptArmadillo(OptSLESolver):
    """1"""
    __swig_setmethods__ = {}
    for _s in [OptSLESolver]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptArmadillo, name, value)
    __swig_getmethods__ = {}
    for _s in [OptSLESolver]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptArmadillo, name)
    __repr__ = _swig_repr
    def solve(self, *args):
        """
        solve(self, system, b, x) -> bool

        Parameters:
            system: sg::optimization::SLE &
            b: sg::base::DataVector &
            x: sg::base::DataVector &

        solve(self, system, B, X) -> bool

        Parameters:
            system: sg::optimization::SLE &
            B: sg::base::DataMatrix &
            X: sg::base::DataMatrix &


        1
        """
        return _pysgpp_swig.OptArmadillo_solve(self, *args)

    def __init__(self): 
        """
        __init__(self) -> OptArmadillo

        1
        """
        this = _pysgpp_swig.new_OptArmadillo()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptArmadillo
    __del__ = lambda self : None;
OptArmadillo_swigregister = _pysgpp_swig.OptArmadillo_swigregister
OptArmadillo_swigregister(OptArmadillo)

class OptAutoSLESolver(OptSLESolver):
    """1"""
    __swig_setmethods__ = {}
    for _s in [OptSLESolver]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptAutoSLESolver, name, value)
    __swig_getmethods__ = {}
    for _s in [OptSLESolver]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptAutoSLESolver, name)
    __repr__ = _swig_repr
    MAX_DIM_FOR_FULL = _pysgpp_swig.OptAutoSLESolver_MAX_DIM_FOR_FULL
    MAX_NNZ_RATIO_FOR_SPARSE = _pysgpp_swig.OptAutoSLESolver_MAX_NNZ_RATIO_FOR_SPARSE
    ESTIMATE_NNZ_ROWS_SAMPLE_SIZE = _pysgpp_swig.OptAutoSLESolver_ESTIMATE_NNZ_ROWS_SAMPLE_SIZE
    def solve(self, *args):
        """
        solve(self, system, b, x) -> bool

        Parameters:
            system: sg::optimization::SLE &
            b: sg::base::DataVector &
            x: sg::base::DataVector &

        solve(self, system, B, X) -> bool

        Parameters:
            system: sg::optimization::SLE &
            B: sg::base::DataMatrix &
            X: sg::base::DataMatrix &


        1
        """
        return _pysgpp_swig.OptAutoSLESolver_solve(self, *args)

    def __init__(self): 
        """
        __init__(self) -> OptAutoSLESolver

        1
        """
        this = _pysgpp_swig.new_OptAutoSLESolver()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptAutoSLESolver
    __del__ = lambda self : None;
OptAutoSLESolver_swigregister = _pysgpp_swig.OptAutoSLESolver_swigregister
OptAutoSLESolver_swigregister(OptAutoSLESolver)

class OptBiCGStab(OptSLESolver):
    """1"""
    __swig_setmethods__ = {}
    for _s in [OptSLESolver]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptBiCGStab, name, value)
    __swig_getmethods__ = {}
    for _s in [OptSLESolver]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptBiCGStab, name)
    __repr__ = _swig_repr
    DEFAULT_MAX_IT_COUNT = _pysgpp_swig.OptBiCGStab_DEFAULT_MAX_IT_COUNT
    DEFAULT_TOLERANCE = _pysgpp_swig.OptBiCGStab_DEFAULT_TOLERANCE
    def __init__(self, *args): 
        """
        BiCGStab() -> OptBiCGStab
        __init__(self, maxItCount, tolerance, startingPoint) -> OptBiCGStab

        Parameters:
            maxItCount: size_t
            tolerance: sg::float_t
            startingPoint: sg::base::DataVector const &


        1
        """
        this = _pysgpp_swig.new_OptBiCGStab(*args)
        try: self.this.append(this)
        except: self.this = this
    def getMaxItCount(self):
        """
        getMaxItCount(self) -> size_t

        Parameters:
            self: sg::optimization::sle_solver::BiCGStab const *


        1
        """
        return _pysgpp_swig.OptBiCGStab_getMaxItCount(self)

    def setMaxItCount(self, *args):
        """
        setMaxItCount(self, maxItCount)

        Parameters:
            maxItCount: size_t


        1
        """
        return _pysgpp_swig.OptBiCGStab_setMaxItCount(self, *args)

    def getTolerance(self):
        """
        getTolerance(self) -> sg::float_t

        Parameters:
            self: sg::optimization::sle_solver::BiCGStab const *


        1
        """
        return _pysgpp_swig.OptBiCGStab_getTolerance(self)

    def setTolerance(self, *args):
        """
        setTolerance(self, tolerance)

        Parameters:
            tolerance: sg::float_t


        1
        """
        return _pysgpp_swig.OptBiCGStab_setTolerance(self, *args)

    def getStartingPoint(self):
        """
        getStartingPoint(self) -> DataVector

        Parameters:
            self: sg::optimization::sle_solver::BiCGStab const *


        1
        """
        return _pysgpp_swig.OptBiCGStab_getStartingPoint(self)

    def setStartingPoint(self, *args):
        """
        setStartingPoint(self, startingPoint)

        Parameters:
            startingPoint: sg::base::DataVector const &


        1
        """
        return _pysgpp_swig.OptBiCGStab_setStartingPoint(self, *args)

    __swig_destroy__ = _pysgpp_swig.delete_OptBiCGStab
    __del__ = lambda self : None;
OptBiCGStab_swigregister = _pysgpp_swig.OptBiCGStab_swigregister
OptBiCGStab_swigregister(OptBiCGStab)

class OptEigen(OptSLESolver):
    """1"""
    __swig_setmethods__ = {}
    for _s in [OptSLESolver]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptEigen, name, value)
    __swig_getmethods__ = {}
    for _s in [OptSLESolver]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptEigen, name)
    __repr__ = _swig_repr
    def solve(self, *args):
        """
        solve(self, system, b, x) -> bool

        Parameters:
            system: sg::optimization::SLE &
            b: sg::base::DataVector &
            x: sg::base::DataVector &

        solve(self, system, B, X) -> bool

        Parameters:
            system: sg::optimization::SLE &
            B: sg::base::DataMatrix &
            X: sg::base::DataMatrix &


        1
        """
        return _pysgpp_swig.OptEigen_solve(self, *args)

    def __init__(self): 
        """
        __init__(self) -> OptEigen

        1
        """
        this = _pysgpp_swig.new_OptEigen()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptEigen
    __del__ = lambda self : None;
OptEigen_swigregister = _pysgpp_swig.OptEigen_swigregister
OptEigen_swigregister(OptEigen)

class OptGaussianElimination(OptSLESolver):
    """1"""
    __swig_setmethods__ = {}
    for _s in [OptSLESolver]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptGaussianElimination, name, value)
    __swig_getmethods__ = {}
    for _s in [OptSLESolver]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptGaussianElimination, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """
        __init__(self) -> OptGaussianElimination

        1
        """
        this = _pysgpp_swig.new_OptGaussianElimination()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptGaussianElimination
    __del__ = lambda self : None;
OptGaussianElimination_swigregister = _pysgpp_swig.OptGaussianElimination_swigregister
OptGaussianElimination_swigregister(OptGaussianElimination)

class OptGmmpp(OptSLESolver):
    """1"""
    __swig_setmethods__ = {}
    for _s in [OptSLESolver]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptGmmpp, name, value)
    __swig_getmethods__ = {}
    for _s in [OptSLESolver]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptGmmpp, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """
        __init__(self) -> OptGmmpp

        1
        """
        this = _pysgpp_swig.new_OptGmmpp()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptGmmpp
    __del__ = lambda self : None;
OptGmmpp_swigregister = _pysgpp_swig.OptGmmpp_swigregister
OptGmmpp_swigregister(OptGmmpp)

class OptUMFPACK(OptSLESolver):
    """1"""
    __swig_setmethods__ = {}
    for _s in [OptSLESolver]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptUMFPACK, name, value)
    __swig_getmethods__ = {}
    for _s in [OptSLESolver]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptUMFPACK, name)
    __repr__ = _swig_repr
    def solve(self, *args):
        """
        solve(self, system, b, x) -> bool

        Parameters:
            system: sg::optimization::SLE &
            b: sg::base::DataVector &
            x: sg::base::DataVector &

        solve(self, system, B, X) -> bool

        Parameters:
            system: sg::optimization::SLE &
            B: sg::base::DataMatrix &
            X: sg::base::DataMatrix &


        1
        """
        return _pysgpp_swig.OptUMFPACK_solve(self, *args)

    def __init__(self): 
        """
        __init__(self) -> OptUMFPACK

        1
        """
        this = _pysgpp_swig.new_OptUMFPACK()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptUMFPACK
    __del__ = lambda self : None;
OptUMFPACK_swigregister = _pysgpp_swig.OptUMFPACK_swigregister
OptUMFPACK_swigregister(OptUMFPACK)

class OptUnconstrainedOptimizer(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptUnconstrainedOptimizer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptUnconstrainedOptimizer, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    DEFAULT_N = _pysgpp_swig.OptUnconstrainedOptimizer_DEFAULT_N
    __swig_destroy__ = _pysgpp_swig.delete_OptUnconstrainedOptimizer
    __del__ = lambda self : None;
    def optimize(self):
        """
        optimize(self)

        Parameters:
            self: sg::optimization::optimizer::UnconstrainedOptimizer *


        1
        """
        return _pysgpp_swig.OptUnconstrainedOptimizer_optimize(self)

    def getObjectiveFunction(self):
        """
        getObjectiveFunction(self) -> OptScalarFunction

        Parameters:
            self: sg::optimization::optimizer::UnconstrainedOptimizer const *


        1
        """
        return _pysgpp_swig.OptUnconstrainedOptimizer_getObjectiveFunction(self)

    def getN(self):
        """
        getN(self) -> size_t

        Parameters:
            self: sg::optimization::optimizer::UnconstrainedOptimizer const *


        1
        """
        return _pysgpp_swig.OptUnconstrainedOptimizer_getN(self)

    def setN(self, *args):
        """
        setN(self, N)

        Parameters:
            N: size_t


        1
        """
        return _pysgpp_swig.OptUnconstrainedOptimizer_setN(self, *args)

    def getStartingPoint(self):
        """
        getStartingPoint(self) -> DataVector

        Parameters:
            self: sg::optimization::optimizer::UnconstrainedOptimizer const *


        1
        """
        return _pysgpp_swig.OptUnconstrainedOptimizer_getStartingPoint(self)

    def setStartingPoint(self, *args):
        """
        setStartingPoint(self, startingPoint)

        Parameters:
            startingPoint: sg::base::DataVector const &


        1
        """
        return _pysgpp_swig.OptUnconstrainedOptimizer_setStartingPoint(self, *args)

    def getOptimalPoint(self):
        """
        getOptimalPoint(self) -> DataVector

        Parameters:
            self: sg::optimization::optimizer::UnconstrainedOptimizer const *


        1
        """
        return _pysgpp_swig.OptUnconstrainedOptimizer_getOptimalPoint(self)

    def getOptimalValue(self):
        """
        getOptimalValue(self) -> sg::float_t

        Parameters:
            self: sg::optimization::optimizer::UnconstrainedOptimizer const *


        1
        """
        return _pysgpp_swig.OptUnconstrainedOptimizer_getOptimalValue(self)

    def getHistoryOfOptimalPoints(self):
        """
        getHistoryOfOptimalPoints(self) -> DataMatrix

        Parameters:
            self: sg::optimization::optimizer::UnconstrainedOptimizer const *


        1
        """
        return _pysgpp_swig.OptUnconstrainedOptimizer_getHistoryOfOptimalPoints(self)

    def getHistoryOfOptimalValues(self):
        """
        getHistoryOfOptimalValues(self) -> DataVector

        Parameters:
            self: sg::optimization::optimizer::UnconstrainedOptimizer const *


        1
        """
        return _pysgpp_swig.OptUnconstrainedOptimizer_getHistoryOfOptimalValues(self)

    def clone(self, *args):
        """
        clone(self, clone)

        Parameters:
            clone: std::unique_ptr< sg::optimization::optimizer::UnconstrainedOptimizer > &


        1
        """
        return _pysgpp_swig.OptUnconstrainedOptimizer_clone(self, *args)

OptUnconstrainedOptimizer_swigregister = _pysgpp_swig.OptUnconstrainedOptimizer_swigregister
OptUnconstrainedOptimizer_swigregister(OptUnconstrainedOptimizer)

class OptAdaptiveGradientDescent(OptUnconstrainedOptimizer):
    """1"""
    __swig_setmethods__ = {}
    for _s in [OptUnconstrainedOptimizer]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptAdaptiveGradientDescent, name, value)
    __swig_getmethods__ = {}
    for _s in [OptUnconstrainedOptimizer]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptAdaptiveGradientDescent, name)
    __repr__ = _swig_repr
    DEFAULT_TOLERANCE = _pysgpp_swig.OptAdaptiveGradientDescent_DEFAULT_TOLERANCE
    DEFAULT_STEP_SIZE_INCREASE_FACTOR = _pysgpp_swig.OptAdaptiveGradientDescent_DEFAULT_STEP_SIZE_INCREASE_FACTOR
    DEFAULT_STEP_SIZE_DECREASE_FACTOR = _pysgpp_swig.OptAdaptiveGradientDescent_DEFAULT_STEP_SIZE_DECREASE_FACTOR
    DEFAULT_LINE_SEARCH_ACCURACY = _pysgpp_swig.OptAdaptiveGradientDescent_DEFAULT_LINE_SEARCH_ACCURACY
    def __init__(self, *args): 
        """
        AdaptiveGradientDescent(f, fGradient, maxItCount=DEFAULT_N, tolerance=DEFAULT_TOLERANCE, stepSizeIncreaseFactor=DEFAULT_STEP_SIZE_INCREASE_FACTOR, 
            stepSizeDecreaseFactor=DEFAULT_STEP_SIZE_DECREASE_FACTOR, 
            lineSearchAccuracy=DEFAULT_LINE_SEARCH_ACCURACY) -> OptAdaptiveGradientDescent

        Parameters:
            f: sg::optimization::ScalarFunction &
            fGradient: sg::optimization::ScalarFunctionGradient &
            maxItCount: size_t
            tolerance: sg::float_t
            stepSizeIncreaseFactor: sg::float_t
            stepSizeDecreaseFactor: sg::float_t
            lineSearchAccuracy: sg::float_t

        AdaptiveGradientDescent(f, fGradient, maxItCount=DEFAULT_N, tolerance=DEFAULT_TOLERANCE, stepSizeIncreaseFactor=DEFAULT_STEP_SIZE_INCREASE_FACTOR, 
            stepSizeDecreaseFactor=DEFAULT_STEP_SIZE_DECREASE_FACTOR) -> OptAdaptiveGradientDescent

        Parameters:
            f: sg::optimization::ScalarFunction &
            fGradient: sg::optimization::ScalarFunctionGradient &
            maxItCount: size_t
            tolerance: sg::float_t
            stepSizeIncreaseFactor: sg::float_t
            stepSizeDecreaseFactor: sg::float_t

        AdaptiveGradientDescent(f, fGradient, maxItCount=DEFAULT_N, tolerance=DEFAULT_TOLERANCE, stepSizeIncreaseFactor=DEFAULT_STEP_SIZE_INCREASE_FACTOR) -> OptAdaptiveGradientDescent

        Parameters:
            f: sg::optimization::ScalarFunction &
            fGradient: sg::optimization::ScalarFunctionGradient &
            maxItCount: size_t
            tolerance: sg::float_t
            stepSizeIncreaseFactor: sg::float_t

        AdaptiveGradientDescent(f, fGradient, maxItCount=DEFAULT_N, tolerance=DEFAULT_TOLERANCE) -> OptAdaptiveGradientDescent

        Parameters:
            f: sg::optimization::ScalarFunction &
            fGradient: sg::optimization::ScalarFunctionGradient &
            maxItCount: size_t
            tolerance: sg::float_t

        AdaptiveGradientDescent(f, fGradient, maxItCount=DEFAULT_N) -> OptAdaptiveGradientDescent

        Parameters:
            f: sg::optimization::ScalarFunction &
            fGradient: sg::optimization::ScalarFunctionGradient &
            maxItCount: size_t

        __init__(self, f, fGradient) -> OptAdaptiveGradientDescent

        Parameters:
            f: sg::optimization::ScalarFunction &
            fGradient: sg::optimization::ScalarFunctionGradient &


        1
        """
        this = _pysgpp_swig.new_OptAdaptiveGradientDescent(*args)
        try: self.this.append(this)
        except: self.this = this
    def getObjectiveGradient(self):
        """
        getObjectiveGradient(self) -> OptScalarFunctionGradient

        Parameters:
            self: sg::optimization::optimizer::AdaptiveGradientDescent const *


        1
        """
        return _pysgpp_swig.OptAdaptiveGradientDescent_getObjectiveGradient(self)

    def getTolerance(self):
        """
        getTolerance(self) -> sg::float_t

        Parameters:
            self: sg::optimization::optimizer::AdaptiveGradientDescent const *


        1
        """
        return _pysgpp_swig.OptAdaptiveGradientDescent_getTolerance(self)

    def setTolerance(self, *args):
        """
        setTolerance(self, tolerance)

        Parameters:
            tolerance: sg::float_t


        1
        """
        return _pysgpp_swig.OptAdaptiveGradientDescent_setTolerance(self, *args)

    def getStepSizeIncreaseFactor(self):
        """
        getStepSizeIncreaseFactor(self) -> sg::float_t

        Parameters:
            self: sg::optimization::optimizer::AdaptiveGradientDescent const *


        1
        """
        return _pysgpp_swig.OptAdaptiveGradientDescent_getStepSizeIncreaseFactor(self)

    def setStepSizeIncreaseFactor(self, *args):
        """
        setStepSizeIncreaseFactor(self, stepSizeIncreaseFactor)

        Parameters:
            stepSizeIncreaseFactor: sg::float_t


        1
        """
        return _pysgpp_swig.OptAdaptiveGradientDescent_setStepSizeIncreaseFactor(self, *args)

    def getStepSizeDecreaseFactor(self):
        """
        getStepSizeDecreaseFactor(self) -> sg::float_t

        Parameters:
            self: sg::optimization::optimizer::AdaptiveGradientDescent const *


        1
        """
        return _pysgpp_swig.OptAdaptiveGradientDescent_getStepSizeDecreaseFactor(self)

    def setStepSizeDecreaseFactor(self, *args):
        """
        setStepSizeDecreaseFactor(self, stepSizeDecreaseFactor)

        Parameters:
            stepSizeDecreaseFactor: sg::float_t


        1
        """
        return _pysgpp_swig.OptAdaptiveGradientDescent_setStepSizeDecreaseFactor(self, *args)

    def getLineSearchAccuracy(self):
        """
        getLineSearchAccuracy(self) -> sg::float_t

        Parameters:
            self: sg::optimization::optimizer::AdaptiveGradientDescent const *


        1
        """
        return _pysgpp_swig.OptAdaptiveGradientDescent_getLineSearchAccuracy(self)

    def setLineSearchAccuracy(self, *args):
        """
        setLineSearchAccuracy(self, lineSearchAccuracy)

        Parameters:
            lineSearchAccuracy: sg::float_t


        1
        """
        return _pysgpp_swig.OptAdaptiveGradientDescent_setLineSearchAccuracy(self, *args)

    __swig_destroy__ = _pysgpp_swig.delete_OptAdaptiveGradientDescent
    __del__ = lambda self : None;
OptAdaptiveGradientDescent_swigregister = _pysgpp_swig.OptAdaptiveGradientDescent_swigregister
OptAdaptiveGradientDescent_swigregister(OptAdaptiveGradientDescent)

class OptAdaptiveNewton(OptUnconstrainedOptimizer):
    """1"""
    __swig_setmethods__ = {}
    for _s in [OptUnconstrainedOptimizer]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptAdaptiveNewton, name, value)
    __swig_getmethods__ = {}
    for _s in [OptUnconstrainedOptimizer]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptAdaptiveNewton, name)
    __repr__ = _swig_repr
    DEFAULT_TOLERANCE = _pysgpp_swig.OptAdaptiveNewton_DEFAULT_TOLERANCE
    DEFAULT_STEP_SIZE_INCREASE_FACTOR = _pysgpp_swig.OptAdaptiveNewton_DEFAULT_STEP_SIZE_INCREASE_FACTOR
    DEFAULT_STEP_SIZE_DECREASE_FACTOR = _pysgpp_swig.OptAdaptiveNewton_DEFAULT_STEP_SIZE_DECREASE_FACTOR
    DEFAULT_DAMPING_INCREASE_FACTOR = _pysgpp_swig.OptAdaptiveNewton_DEFAULT_DAMPING_INCREASE_FACTOR
    DEFAULT_DAMPING_DECREASE_FACTOR = _pysgpp_swig.OptAdaptiveNewton_DEFAULT_DAMPING_DECREASE_FACTOR
    DEFAULT_LINE_SEARCH_ACCURACY = _pysgpp_swig.OptAdaptiveNewton_DEFAULT_LINE_SEARCH_ACCURACY
    def __init__(self, *args): 
        """
        AdaptiveNewton(f, fHessian, maxItCount=DEFAULT_N, tolerance=DEFAULT_TOLERANCE, stepSizeIncreaseFactor=DEFAULT_STEP_SIZE_INCREASE_FACTOR, 
            stepSizeDecreaseFactor=DEFAULT_STEP_SIZE_DECREASE_FACTOR, 
            dampingIncreaseFactor=DEFAULT_DAMPING_INCREASE_FACTOR, 
            dampingDecreaseFactor=DEFAULT_DAMPING_DECREASE_FACTOR, lineSearchAccuracy=DEFAULT_LINE_SEARCH_ACCURACY) -> OptAdaptiveNewton

        Parameters:
            f: sg::optimization::ScalarFunction &
            fHessian: sg::optimization::ScalarFunctionHessian &
            maxItCount: size_t
            tolerance: sg::float_t
            stepSizeIncreaseFactor: sg::float_t
            stepSizeDecreaseFactor: sg::float_t
            dampingIncreaseFactor: sg::float_t
            dampingDecreaseFactor: sg::float_t
            lineSearchAccuracy: sg::float_t

        AdaptiveNewton(f, fHessian, maxItCount=DEFAULT_N, tolerance=DEFAULT_TOLERANCE, stepSizeIncreaseFactor=DEFAULT_STEP_SIZE_INCREASE_FACTOR, 
            stepSizeDecreaseFactor=DEFAULT_STEP_SIZE_DECREASE_FACTOR, 
            dampingIncreaseFactor=DEFAULT_DAMPING_INCREASE_FACTOR, 
            dampingDecreaseFactor=DEFAULT_DAMPING_DECREASE_FACTOR) -> OptAdaptiveNewton

        Parameters:
            f: sg::optimization::ScalarFunction &
            fHessian: sg::optimization::ScalarFunctionHessian &
            maxItCount: size_t
            tolerance: sg::float_t
            stepSizeIncreaseFactor: sg::float_t
            stepSizeDecreaseFactor: sg::float_t
            dampingIncreaseFactor: sg::float_t
            dampingDecreaseFactor: sg::float_t

        AdaptiveNewton(f, fHessian, maxItCount=DEFAULT_N, tolerance=DEFAULT_TOLERANCE, stepSizeIncreaseFactor=DEFAULT_STEP_SIZE_INCREASE_FACTOR, 
            stepSizeDecreaseFactor=DEFAULT_STEP_SIZE_DECREASE_FACTOR, 
            dampingIncreaseFactor=DEFAULT_DAMPING_INCREASE_FACTOR) -> OptAdaptiveNewton

        Parameters:
            f: sg::optimization::ScalarFunction &
            fHessian: sg::optimization::ScalarFunctionHessian &
            maxItCount: size_t
            tolerance: sg::float_t
            stepSizeIncreaseFactor: sg::float_t
            stepSizeDecreaseFactor: sg::float_t
            dampingIncreaseFactor: sg::float_t

        AdaptiveNewton(f, fHessian, maxItCount=DEFAULT_N, tolerance=DEFAULT_TOLERANCE, stepSizeIncreaseFactor=DEFAULT_STEP_SIZE_INCREASE_FACTOR, 
            stepSizeDecreaseFactor=DEFAULT_STEP_SIZE_DECREASE_FACTOR) -> OptAdaptiveNewton

        Parameters:
            f: sg::optimization::ScalarFunction &
            fHessian: sg::optimization::ScalarFunctionHessian &
            maxItCount: size_t
            tolerance: sg::float_t
            stepSizeIncreaseFactor: sg::float_t
            stepSizeDecreaseFactor: sg::float_t

        AdaptiveNewton(f, fHessian, maxItCount=DEFAULT_N, tolerance=DEFAULT_TOLERANCE, stepSizeIncreaseFactor=DEFAULT_STEP_SIZE_INCREASE_FACTOR) -> OptAdaptiveNewton

        Parameters:
            f: sg::optimization::ScalarFunction &
            fHessian: sg::optimization::ScalarFunctionHessian &
            maxItCount: size_t
            tolerance: sg::float_t
            stepSizeIncreaseFactor: sg::float_t

        AdaptiveNewton(f, fHessian, maxItCount=DEFAULT_N, tolerance=DEFAULT_TOLERANCE) -> OptAdaptiveNewton

        Parameters:
            f: sg::optimization::ScalarFunction &
            fHessian: sg::optimization::ScalarFunctionHessian &
            maxItCount: size_t
            tolerance: sg::float_t

        AdaptiveNewton(f, fHessian, maxItCount=DEFAULT_N) -> OptAdaptiveNewton

        Parameters:
            f: sg::optimization::ScalarFunction &
            fHessian: sg::optimization::ScalarFunctionHessian &
            maxItCount: size_t

        AdaptiveNewton(f, fHessian) -> OptAdaptiveNewton

        Parameters:
            f: sg::optimization::ScalarFunction &
            fHessian: sg::optimization::ScalarFunctionHessian &

        __init__(self, f, fHessian, maxItCount, tolerance, stepSizeIncreaseFactor, stepSizeDecreaseFactor, 
            dampingIncreaseFactor, dampingDecreaseFactor, lineSearchAccuracy, sleSolver) -> OptAdaptiveNewton

        Parameters:
            f: sg::optimization::ScalarFunction &
            fHessian: sg::optimization::ScalarFunctionHessian &
            maxItCount: size_t
            tolerance: sg::float_t
            stepSizeIncreaseFactor: sg::float_t
            stepSizeDecreaseFactor: sg::float_t
            dampingIncreaseFactor: sg::float_t
            dampingDecreaseFactor: sg::float_t
            lineSearchAccuracy: sg::float_t
            sleSolver: sg::optimization::sle_solver::SLESolver const &


        1
        """
        this = _pysgpp_swig.new_OptAdaptiveNewton(*args)
        try: self.this.append(this)
        except: self.this = this
    def getObjectiveHessian(self):
        """
        getObjectiveHessian(self) -> OptScalarFunctionHessian

        Parameters:
            self: sg::optimization::optimizer::AdaptiveNewton const *


        1
        """
        return _pysgpp_swig.OptAdaptiveNewton_getObjectiveHessian(self)

    def getTolerance(self):
        """
        getTolerance(self) -> sg::float_t

        Parameters:
            self: sg::optimization::optimizer::AdaptiveNewton const *


        1
        """
        return _pysgpp_swig.OptAdaptiveNewton_getTolerance(self)

    def setTolerance(self, *args):
        """
        setTolerance(self, tolerance)

        Parameters:
            tolerance: sg::float_t


        1
        """
        return _pysgpp_swig.OptAdaptiveNewton_setTolerance(self, *args)

    def getStepSizeIncreaseFactor(self):
        """
        getStepSizeIncreaseFactor(self) -> sg::float_t

        Parameters:
            self: sg::optimization::optimizer::AdaptiveNewton const *


        1
        """
        return _pysgpp_swig.OptAdaptiveNewton_getStepSizeIncreaseFactor(self)

    def setStepSizeIncreaseFactor(self, *args):
        """
        setStepSizeIncreaseFactor(self, stepSizeIncreaseFactor)

        Parameters:
            stepSizeIncreaseFactor: sg::float_t


        1
        """
        return _pysgpp_swig.OptAdaptiveNewton_setStepSizeIncreaseFactor(self, *args)

    def getStepSizeDecreaseFactor(self):
        """
        getStepSizeDecreaseFactor(self) -> sg::float_t

        Parameters:
            self: sg::optimization::optimizer::AdaptiveNewton const *


        1
        """
        return _pysgpp_swig.OptAdaptiveNewton_getStepSizeDecreaseFactor(self)

    def setStepSizeDecreaseFactor(self, *args):
        """
        setStepSizeDecreaseFactor(self, stepSizeDecreaseFactor)

        Parameters:
            stepSizeDecreaseFactor: sg::float_t


        1
        """
        return _pysgpp_swig.OptAdaptiveNewton_setStepSizeDecreaseFactor(self, *args)

    def getDampingIncreaseFactor(self):
        """
        getDampingIncreaseFactor(self) -> sg::float_t

        Parameters:
            self: sg::optimization::optimizer::AdaptiveNewton const *


        1
        """
        return _pysgpp_swig.OptAdaptiveNewton_getDampingIncreaseFactor(self)

    def setDampingIncreaseFactor(self, *args):
        """
        setDampingIncreaseFactor(self, dampingIncreaseFactor)

        Parameters:
            dampingIncreaseFactor: sg::float_t


        1
        """
        return _pysgpp_swig.OptAdaptiveNewton_setDampingIncreaseFactor(self, *args)

    def getDampingDecreaseFactor(self):
        """
        getDampingDecreaseFactor(self) -> sg::float_t

        Parameters:
            self: sg::optimization::optimizer::AdaptiveNewton const *


        1
        """
        return _pysgpp_swig.OptAdaptiveNewton_getDampingDecreaseFactor(self)

    def setDampingDecreaseFactor(self, *args):
        """
        setDampingDecreaseFactor(self, dampingDecreaseFactor)

        Parameters:
            dampingDecreaseFactor: sg::float_t


        1
        """
        return _pysgpp_swig.OptAdaptiveNewton_setDampingDecreaseFactor(self, *args)

    def getLineSearchAccuracy(self):
        """
        getLineSearchAccuracy(self) -> sg::float_t

        Parameters:
            self: sg::optimization::optimizer::AdaptiveNewton const *


        1
        """
        return _pysgpp_swig.OptAdaptiveNewton_getLineSearchAccuracy(self)

    def setLineSearchAccuracy(self, *args):
        """
        setLineSearchAccuracy(self, lineSearchAccuracy)

        Parameters:
            lineSearchAccuracy: sg::float_t


        1
        """
        return _pysgpp_swig.OptAdaptiveNewton_setLineSearchAccuracy(self, *args)

    __swig_destroy__ = _pysgpp_swig.delete_OptAdaptiveNewton
    __del__ = lambda self : None;
OptAdaptiveNewton_swigregister = _pysgpp_swig.OptAdaptiveNewton_swigregister
OptAdaptiveNewton_swigregister(OptAdaptiveNewton)

class OptBFGS(OptUnconstrainedOptimizer):
    """1"""
    __swig_setmethods__ = {}
    for _s in [OptUnconstrainedOptimizer]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptBFGS, name, value)
    __swig_getmethods__ = {}
    for _s in [OptUnconstrainedOptimizer]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptBFGS, name)
    __repr__ = _swig_repr
    DEFAULT_TOLERANCE = _pysgpp_swig.OptBFGS_DEFAULT_TOLERANCE
    DEFAULT_STEP_SIZE_INCREASE_FACTOR = _pysgpp_swig.OptBFGS_DEFAULT_STEP_SIZE_INCREASE_FACTOR
    DEFAULT_STEP_SIZE_DECREASE_FACTOR = _pysgpp_swig.OptBFGS_DEFAULT_STEP_SIZE_DECREASE_FACTOR
    DEFAULT_LINE_SEARCH_ACCURACY = _pysgpp_swig.OptBFGS_DEFAULT_LINE_SEARCH_ACCURACY
    def __init__(self, *args): 
        """
        BFGS(f, fGradient, maxItCount=DEFAULT_N, tolerance=DEFAULT_TOLERANCE, stepSizeIncreaseFactor=DEFAULT_STEP_SIZE_INCREASE_FACTOR, 
            stepSizeDecreaseFactor=DEFAULT_STEP_SIZE_DECREASE_FACTOR, 
            lineSearchAccuracy=DEFAULT_LINE_SEARCH_ACCURACY) -> OptBFGS

        Parameters:
            f: sg::optimization::ScalarFunction &
            fGradient: sg::optimization::ScalarFunctionGradient &
            maxItCount: size_t
            tolerance: sg::float_t
            stepSizeIncreaseFactor: sg::float_t
            stepSizeDecreaseFactor: sg::float_t
            lineSearchAccuracy: sg::float_t

        BFGS(f, fGradient, maxItCount=DEFAULT_N, tolerance=DEFAULT_TOLERANCE, stepSizeIncreaseFactor=DEFAULT_STEP_SIZE_INCREASE_FACTOR, 
            stepSizeDecreaseFactor=DEFAULT_STEP_SIZE_DECREASE_FACTOR) -> OptBFGS

        Parameters:
            f: sg::optimization::ScalarFunction &
            fGradient: sg::optimization::ScalarFunctionGradient &
            maxItCount: size_t
            tolerance: sg::float_t
            stepSizeIncreaseFactor: sg::float_t
            stepSizeDecreaseFactor: sg::float_t

        BFGS(f, fGradient, maxItCount=DEFAULT_N, tolerance=DEFAULT_TOLERANCE, stepSizeIncreaseFactor=DEFAULT_STEP_SIZE_INCREASE_FACTOR) -> OptBFGS

        Parameters:
            f: sg::optimization::ScalarFunction &
            fGradient: sg::optimization::ScalarFunctionGradient &
            maxItCount: size_t
            tolerance: sg::float_t
            stepSizeIncreaseFactor: sg::float_t

        BFGS(f, fGradient, maxItCount=DEFAULT_N, tolerance=DEFAULT_TOLERANCE) -> OptBFGS

        Parameters:
            f: sg::optimization::ScalarFunction &
            fGradient: sg::optimization::ScalarFunctionGradient &
            maxItCount: size_t
            tolerance: sg::float_t

        BFGS(f, fGradient, maxItCount=DEFAULT_N) -> OptBFGS

        Parameters:
            f: sg::optimization::ScalarFunction &
            fGradient: sg::optimization::ScalarFunctionGradient &
            maxItCount: size_t

        __init__(self, f, fGradient) -> OptBFGS

        Parameters:
            f: sg::optimization::ScalarFunction &
            fGradient: sg::optimization::ScalarFunctionGradient &


        1
        """
        this = _pysgpp_swig.new_OptBFGS(*args)
        try: self.this.append(this)
        except: self.this = this
    def getObjectiveGradient(self):
        """
        getObjectiveGradient(self) -> OptScalarFunctionGradient

        Parameters:
            self: sg::optimization::optimizer::BFGS const *


        1
        """
        return _pysgpp_swig.OptBFGS_getObjectiveGradient(self)

    def getTolerance(self):
        """
        getTolerance(self) -> sg::float_t

        Parameters:
            self: sg::optimization::optimizer::BFGS const *


        1
        """
        return _pysgpp_swig.OptBFGS_getTolerance(self)

    def setTolerance(self, *args):
        """
        setTolerance(self, tolerance)

        Parameters:
            tolerance: sg::float_t


        1
        """
        return _pysgpp_swig.OptBFGS_setTolerance(self, *args)

    def getStepSizeIncreaseFactor(self):
        """
        getStepSizeIncreaseFactor(self) -> sg::float_t

        Parameters:
            self: sg::optimization::optimizer::BFGS const *


        1
        """
        return _pysgpp_swig.OptBFGS_getStepSizeIncreaseFactor(self)

    def setStepSizeIncreaseFactor(self, *args):
        """
        setStepSizeIncreaseFactor(self, stepSizeIncreaseFactor)

        Parameters:
            stepSizeIncreaseFactor: sg::float_t


        1
        """
        return _pysgpp_swig.OptBFGS_setStepSizeIncreaseFactor(self, *args)

    def getStepSizeDecreaseFactor(self):
        """
        getStepSizeDecreaseFactor(self) -> sg::float_t

        Parameters:
            self: sg::optimization::optimizer::BFGS const *


        1
        """
        return _pysgpp_swig.OptBFGS_getStepSizeDecreaseFactor(self)

    def setStepSizeDecreaseFactor(self, *args):
        """
        setStepSizeDecreaseFactor(self, stepSizeDecreaseFactor)

        Parameters:
            stepSizeDecreaseFactor: sg::float_t


        1
        """
        return _pysgpp_swig.OptBFGS_setStepSizeDecreaseFactor(self, *args)

    def getLineSearchAccuracy(self):
        """
        getLineSearchAccuracy(self) -> sg::float_t

        Parameters:
            self: sg::optimization::optimizer::BFGS const *


        1
        """
        return _pysgpp_swig.OptBFGS_getLineSearchAccuracy(self)

    def setLineSearchAccuracy(self, *args):
        """
        setLineSearchAccuracy(self, lineSearchAccuracy)

        Parameters:
            lineSearchAccuracy: sg::float_t


        1
        """
        return _pysgpp_swig.OptBFGS_setLineSearchAccuracy(self, *args)

    __swig_destroy__ = _pysgpp_swig.delete_OptBFGS
    __del__ = lambda self : None;
OptBFGS_swigregister = _pysgpp_swig.OptBFGS_swigregister
OptBFGS_swigregister(OptBFGS)

class OptCMAES(OptUnconstrainedOptimizer):
    """1"""
    __swig_setmethods__ = {}
    for _s in [OptUnconstrainedOptimizer]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptCMAES, name, value)
    __swig_getmethods__ = {}
    for _s in [OptUnconstrainedOptimizer]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptCMAES, name)
    __repr__ = _swig_repr
    DEFAULT_MAX_FCN_EVAL_COUNT = _pysgpp_swig.OptCMAES_DEFAULT_MAX_FCN_EVAL_COUNT
    def __init__(self, *args): 
        """
        CMAES(f, maxFcnEvalCount=DEFAULT_MAX_FCN_EVAL_COUNT) -> OptCMAES

        Parameters:
            f: sg::optimization::ScalarFunction &
            maxFcnEvalCount: size_t

        __init__(self, f) -> OptCMAES

        Parameters:
            f: sg::optimization::ScalarFunction &


        1
        """
        this = _pysgpp_swig.new_OptCMAES(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptCMAES
    __del__ = lambda self : None;
OptCMAES_swigregister = _pysgpp_swig.OptCMAES_swigregister
OptCMAES_swigregister(OptCMAES)

class OptDifferentialEvolution(OptUnconstrainedOptimizer):
    """1"""
    __swig_setmethods__ = {}
    for _s in [OptUnconstrainedOptimizer]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptDifferentialEvolution, name, value)
    __swig_getmethods__ = {}
    for _s in [OptUnconstrainedOptimizer]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptDifferentialEvolution, name)
    __repr__ = _swig_repr
    DEFAULT_CROSSOVER_PROBABILITY = _pysgpp_swig.OptDifferentialEvolution_DEFAULT_CROSSOVER_PROBABILITY
    DEFAULT_SCALING_FACTOR = _pysgpp_swig.OptDifferentialEvolution_DEFAULT_SCALING_FACTOR
    DEFAULT_IDLE_GENERATIONS_COUNT = _pysgpp_swig.OptDifferentialEvolution_DEFAULT_IDLE_GENERATIONS_COUNT
    DEFAULT_AVG_IMPROVEMENT_THRESHOLD = _pysgpp_swig.OptDifferentialEvolution_DEFAULT_AVG_IMPROVEMENT_THRESHOLD
    DEFAULT_MAX_DISTANCE_THRESHOLD = _pysgpp_swig.OptDifferentialEvolution_DEFAULT_MAX_DISTANCE_THRESHOLD
    def __init__(self, *args): 
        """
        DifferentialEvolution(f, maxFcnEvalCount=DEFAULT_N, populationSize=0, crossoverProbability=DEFAULT_CROSSOVER_PROBABILITY, 
            scalingFactor=DEFAULT_SCALING_FACTOR, idleGenerationsCount=DEFAULT_IDLE_GENERATIONS_COUNT, 
            avgImprovementThreshold=DEFAULT_AVG_IMPROVEMENT_THRESHOLD, 
            maxDistanceThreshold=DEFAULT_MAX_DISTANCE_THRESHOLD) -> OptDifferentialEvolution

        Parameters:
            f: sg::optimization::ScalarFunction &
            maxFcnEvalCount: size_t
            populationSize: size_t
            crossoverProbability: sg::float_t
            scalingFactor: sg::float_t
            idleGenerationsCount: size_t
            avgImprovementThreshold: sg::float_t
            maxDistanceThreshold: sg::float_t

        DifferentialEvolution(f, maxFcnEvalCount=DEFAULT_N, populationSize=0, crossoverProbability=DEFAULT_CROSSOVER_PROBABILITY, 
            scalingFactor=DEFAULT_SCALING_FACTOR, idleGenerationsCount=DEFAULT_IDLE_GENERATIONS_COUNT, 
            avgImprovementThreshold=DEFAULT_AVG_IMPROVEMENT_THRESHOLD) -> OptDifferentialEvolution

        Parameters:
            f: sg::optimization::ScalarFunction &
            maxFcnEvalCount: size_t
            populationSize: size_t
            crossoverProbability: sg::float_t
            scalingFactor: sg::float_t
            idleGenerationsCount: size_t
            avgImprovementThreshold: sg::float_t

        DifferentialEvolution(f, maxFcnEvalCount=DEFAULT_N, populationSize=0, crossoverProbability=DEFAULT_CROSSOVER_PROBABILITY, 
            scalingFactor=DEFAULT_SCALING_FACTOR, idleGenerationsCount=DEFAULT_IDLE_GENERATIONS_COUNT) -> OptDifferentialEvolution

        Parameters:
            f: sg::optimization::ScalarFunction &
            maxFcnEvalCount: size_t
            populationSize: size_t
            crossoverProbability: sg::float_t
            scalingFactor: sg::float_t
            idleGenerationsCount: size_t

        DifferentialEvolution(f, maxFcnEvalCount=DEFAULT_N, populationSize=0, crossoverProbability=DEFAULT_CROSSOVER_PROBABILITY, 
            scalingFactor=DEFAULT_SCALING_FACTOR) -> OptDifferentialEvolution

        Parameters:
            f: sg::optimization::ScalarFunction &
            maxFcnEvalCount: size_t
            populationSize: size_t
            crossoverProbability: sg::float_t
            scalingFactor: sg::float_t

        DifferentialEvolution(f, maxFcnEvalCount=DEFAULT_N, populationSize=0, crossoverProbability=DEFAULT_CROSSOVER_PROBABILITY) -> OptDifferentialEvolution

        Parameters:
            f: sg::optimization::ScalarFunction &
            maxFcnEvalCount: size_t
            populationSize: size_t
            crossoverProbability: sg::float_t

        DifferentialEvolution(f, maxFcnEvalCount=DEFAULT_N, populationSize=0) -> OptDifferentialEvolution

        Parameters:
            f: sg::optimization::ScalarFunction &
            maxFcnEvalCount: size_t
            populationSize: size_t

        DifferentialEvolution(f, maxFcnEvalCount=DEFAULT_N) -> OptDifferentialEvolution

        Parameters:
            f: sg::optimization::ScalarFunction &
            maxFcnEvalCount: size_t

        __init__(self, f) -> OptDifferentialEvolution

        Parameters:
            f: sg::optimization::ScalarFunction &


        1
        """
        this = _pysgpp_swig.new_OptDifferentialEvolution(*args)
        try: self.this.append(this)
        except: self.this = this
    def getPopulationSize(self):
        """
        getPopulationSize(self) -> size_t

        Parameters:
            self: sg::optimization::optimizer::DifferentialEvolution const *


        1
        """
        return _pysgpp_swig.OptDifferentialEvolution_getPopulationSize(self)

    def setPopulationSize(self, *args):
        """
        setPopulationSize(self, populationSize)

        Parameters:
            populationSize: size_t


        1
        """
        return _pysgpp_swig.OptDifferentialEvolution_setPopulationSize(self, *args)

    __swig_destroy__ = _pysgpp_swig.delete_OptDifferentialEvolution
    __del__ = lambda self : None;
OptDifferentialEvolution_swigregister = _pysgpp_swig.OptDifferentialEvolution_swigregister
OptDifferentialEvolution_swigregister(OptDifferentialEvolution)

class OptGradientDescent(OptUnconstrainedOptimizer):
    """1"""
    __swig_setmethods__ = {}
    for _s in [OptUnconstrainedOptimizer]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptGradientDescent, name, value)
    __swig_getmethods__ = {}
    for _s in [OptUnconstrainedOptimizer]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptGradientDescent, name)
    __repr__ = _swig_repr
    DEFAULT_MAX_IT_COUNT = _pysgpp_swig.OptGradientDescent_DEFAULT_MAX_IT_COUNT
    DEFAULT_BETA = _pysgpp_swig.OptGradientDescent_DEFAULT_BETA
    DEFAULT_GAMMA = _pysgpp_swig.OptGradientDescent_DEFAULT_GAMMA
    DEFAULT_TOLERANCE = _pysgpp_swig.OptGradientDescent_DEFAULT_TOLERANCE
    DEFAULT_EPSILON = _pysgpp_swig.OptGradientDescent_DEFAULT_EPSILON
    def __init__(self, *args): 
        """
        GradientDescent(f, fGradient, maxItCount=DEFAULT_MAX_IT_COUNT, beta=DEFAULT_BETA, gamma=DEFAULT_GAMMA, 
            tolerance=DEFAULT_TOLERANCE, epsilon=DEFAULT_EPSILON) -> OptGradientDescent

        Parameters:
            f: sg::optimization::ScalarFunction &
            fGradient: sg::optimization::ScalarFunctionGradient &
            maxItCount: size_t
            beta: sg::float_t
            gamma: sg::float_t
            tolerance: sg::float_t
            epsilon: sg::float_t

        GradientDescent(f, fGradient, maxItCount=DEFAULT_MAX_IT_COUNT, beta=DEFAULT_BETA, gamma=DEFAULT_GAMMA, 
            tolerance=DEFAULT_TOLERANCE) -> OptGradientDescent

        Parameters:
            f: sg::optimization::ScalarFunction &
            fGradient: sg::optimization::ScalarFunctionGradient &
            maxItCount: size_t
            beta: sg::float_t
            gamma: sg::float_t
            tolerance: sg::float_t

        GradientDescent(f, fGradient, maxItCount=DEFAULT_MAX_IT_COUNT, beta=DEFAULT_BETA, gamma=DEFAULT_GAMMA) -> OptGradientDescent

        Parameters:
            f: sg::optimization::ScalarFunction &
            fGradient: sg::optimization::ScalarFunctionGradient &
            maxItCount: size_t
            beta: sg::float_t
            gamma: sg::float_t

        GradientDescent(f, fGradient, maxItCount=DEFAULT_MAX_IT_COUNT, beta=DEFAULT_BETA) -> OptGradientDescent

        Parameters:
            f: sg::optimization::ScalarFunction &
            fGradient: sg::optimization::ScalarFunctionGradient &
            maxItCount: size_t
            beta: sg::float_t

        GradientDescent(f, fGradient, maxItCount=DEFAULT_MAX_IT_COUNT) -> OptGradientDescent

        Parameters:
            f: sg::optimization::ScalarFunction &
            fGradient: sg::optimization::ScalarFunctionGradient &
            maxItCount: size_t

        __init__(self, f, fGradient) -> OptGradientDescent

        Parameters:
            f: sg::optimization::ScalarFunction &
            fGradient: sg::optimization::ScalarFunctionGradient &


        1
        """
        this = _pysgpp_swig.new_OptGradientDescent(*args)
        try: self.this.append(this)
        except: self.this = this
    def getObjectiveGradient(self):
        """
        getObjectiveGradient(self) -> OptScalarFunctionGradient

        Parameters:
            self: sg::optimization::optimizer::GradientDescent const *


        1
        """
        return _pysgpp_swig.OptGradientDescent_getObjectiveGradient(self)

    def getBeta(self):
        """
        getBeta(self) -> sg::float_t

        Parameters:
            self: sg::optimization::optimizer::GradientDescent const *


        1
        """
        return _pysgpp_swig.OptGradientDescent_getBeta(self)

    def setBeta(self, *args):
        """
        setBeta(self, beta)

        Parameters:
            beta: sg::float_t


        1
        """
        return _pysgpp_swig.OptGradientDescent_setBeta(self, *args)

    def getGamma(self):
        """
        getGamma(self) -> sg::float_t

        Parameters:
            self: sg::optimization::optimizer::GradientDescent const *


        1
        """
        return _pysgpp_swig.OptGradientDescent_getGamma(self)

    def setGamma(self, *args):
        """
        setGamma(self, gamma)

        Parameters:
            gamma: sg::float_t


        1
        """
        return _pysgpp_swig.OptGradientDescent_setGamma(self, *args)

    def getTolerance(self):
        """
        getTolerance(self) -> sg::float_t

        Parameters:
            self: sg::optimization::optimizer::GradientDescent const *


        1
        """
        return _pysgpp_swig.OptGradientDescent_getTolerance(self)

    def setTolerance(self, *args):
        """
        setTolerance(self, tolerance)

        Parameters:
            tolerance: sg::float_t


        1
        """
        return _pysgpp_swig.OptGradientDescent_setTolerance(self, *args)

    def getEpsilon(self):
        """
        getEpsilon(self) -> sg::float_t

        Parameters:
            self: sg::optimization::optimizer::GradientDescent const *


        1
        """
        return _pysgpp_swig.OptGradientDescent_getEpsilon(self)

    def setEpsilon(self, *args):
        """
        setEpsilon(self, epsilon)

        Parameters:
            epsilon: sg::float_t


        1
        """
        return _pysgpp_swig.OptGradientDescent_setEpsilon(self, *args)

    __swig_destroy__ = _pysgpp_swig.delete_OptGradientDescent
    __del__ = lambda self : None;
OptGradientDescent_swigregister = _pysgpp_swig.OptGradientDescent_swigregister
OptGradientDescent_swigregister(OptGradientDescent)

class OptMultiStart(OptUnconstrainedOptimizer):
    """1"""
    __swig_setmethods__ = {}
    for _s in [OptUnconstrainedOptimizer]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptMultiStart, name, value)
    __swig_getmethods__ = {}
    for _s in [OptUnconstrainedOptimizer]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptMultiStart, name)
    __repr__ = _swig_repr
    DEFAULT_MAX_FCN_EVAL_COUNT = _pysgpp_swig.OptMultiStart_DEFAULT_MAX_FCN_EVAL_COUNT
    def __init__(self, *args): 
        """
        MultiStart(f, maxFcnEvalCount=DEFAULT_MAX_FCN_EVAL_COUNT, populationSize=0) -> OptMultiStart

        Parameters:
            f: sg::optimization::ScalarFunction &
            maxFcnEvalCount: size_t
            populationSize: size_t

        MultiStart(f, maxFcnEvalCount=DEFAULT_MAX_FCN_EVAL_COUNT) -> OptMultiStart

        Parameters:
            f: sg::optimization::ScalarFunction &
            maxFcnEvalCount: size_t

        MultiStart(f) -> OptMultiStart

        Parameters:
            f: sg::optimization::ScalarFunction &

        MultiStart(optimizer, maxFcnEvalCount=DEFAULT_MAX_FCN_EVAL_COUNT, populationSize=0) -> OptMultiStart

        Parameters:
            optimizer: sg::optimization::optimizer::UnconstrainedOptimizer &
            maxFcnEvalCount: size_t
            populationSize: size_t

        MultiStart(optimizer, maxFcnEvalCount=DEFAULT_MAX_FCN_EVAL_COUNT) -> OptMultiStart

        Parameters:
            optimizer: sg::optimization::optimizer::UnconstrainedOptimizer &
            maxFcnEvalCount: size_t

        __init__(self, optimizer) -> OptMultiStart

        Parameters:
            optimizer: sg::optimization::optimizer::UnconstrainedOptimizer &


        1
        """
        this = _pysgpp_swig.new_OptMultiStart(*args)
        try: self.this.append(this)
        except: self.this = this
    def getPopulationSize(self):
        """
        getPopulationSize(self) -> size_t

        Parameters:
            self: sg::optimization::optimizer::MultiStart const *


        1
        """
        return _pysgpp_swig.OptMultiStart_getPopulationSize(self)

    def setPopulationSize(self, *args):
        """
        setPopulationSize(self, populationSize)

        Parameters:
            populationSize: size_t


        1
        """
        return _pysgpp_swig.OptMultiStart_setPopulationSize(self, *args)

    def getHistoryOfInnerIterations(self):
        """
        getHistoryOfInnerIterations(self) -> IndexVector

        Parameters:
            self: sg::optimization::optimizer::MultiStart const *


        1
        """
        return _pysgpp_swig.OptMultiStart_getHistoryOfInnerIterations(self)

    __swig_destroy__ = _pysgpp_swig.delete_OptMultiStart
    __del__ = lambda self : None;
OptMultiStart_swigregister = _pysgpp_swig.OptMultiStart_swigregister
OptMultiStart_swigregister(OptMultiStart)

class OptNelderMead(OptUnconstrainedOptimizer):
    """1"""
    __swig_setmethods__ = {}
    for _s in [OptUnconstrainedOptimizer]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptNelderMead, name, value)
    __swig_getmethods__ = {}
    for _s in [OptUnconstrainedOptimizer]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptNelderMead, name)
    __repr__ = _swig_repr
    DEFAULT_ALPHA = _pysgpp_swig.OptNelderMead_DEFAULT_ALPHA
    DEFAULT_BETA = _pysgpp_swig.OptNelderMead_DEFAULT_BETA
    DEFAULT_GAMMA = _pysgpp_swig.OptNelderMead_DEFAULT_GAMMA
    DEFAULT_DELTA = _pysgpp_swig.OptNelderMead_DEFAULT_DELTA
    DEFAULT_MAX_FCN_EVAL_COUNT = _pysgpp_swig.OptNelderMead_DEFAULT_MAX_FCN_EVAL_COUNT
    STARTING_SIMPLEX_EDGE_LENGTH = _pysgpp_swig.OptNelderMead_STARTING_SIMPLEX_EDGE_LENGTH
    def __init__(self, *args): 
        """
        NelderMead(f, maxFcnEvalCount=DEFAULT_MAX_FCN_EVAL_COUNT, alpha=DEFAULT_ALPHA, beta=DEFAULT_BETA, 
            gamma=DEFAULT_GAMMA, delta=DEFAULT_DELTA) -> OptNelderMead

        Parameters:
            f: sg::optimization::ScalarFunction &
            maxFcnEvalCount: size_t
            alpha: sg::float_t
            beta: sg::float_t
            gamma: sg::float_t
            delta: sg::float_t

        NelderMead(f, maxFcnEvalCount=DEFAULT_MAX_FCN_EVAL_COUNT, alpha=DEFAULT_ALPHA, beta=DEFAULT_BETA, 
            gamma=DEFAULT_GAMMA) -> OptNelderMead

        Parameters:
            f: sg::optimization::ScalarFunction &
            maxFcnEvalCount: size_t
            alpha: sg::float_t
            beta: sg::float_t
            gamma: sg::float_t

        NelderMead(f, maxFcnEvalCount=DEFAULT_MAX_FCN_EVAL_COUNT, alpha=DEFAULT_ALPHA, beta=DEFAULT_BETA) -> OptNelderMead

        Parameters:
            f: sg::optimization::ScalarFunction &
            maxFcnEvalCount: size_t
            alpha: sg::float_t
            beta: sg::float_t

        NelderMead(f, maxFcnEvalCount=DEFAULT_MAX_FCN_EVAL_COUNT, alpha=DEFAULT_ALPHA) -> OptNelderMead

        Parameters:
            f: sg::optimization::ScalarFunction &
            maxFcnEvalCount: size_t
            alpha: sg::float_t

        NelderMead(f, maxFcnEvalCount=DEFAULT_MAX_FCN_EVAL_COUNT) -> OptNelderMead

        Parameters:
            f: sg::optimization::ScalarFunction &
            maxFcnEvalCount: size_t

        __init__(self, f) -> OptNelderMead

        Parameters:
            f: sg::optimization::ScalarFunction &


        1
        """
        this = _pysgpp_swig.new_OptNelderMead(*args)
        try: self.this.append(this)
        except: self.this = this
    def getAlpha(self):
        """
        getAlpha(self) -> sg::float_t

        Parameters:
            self: sg::optimization::optimizer::NelderMead const *


        1
        """
        return _pysgpp_swig.OptNelderMead_getAlpha(self)

    def setAlpha(self, *args):
        """
        setAlpha(self, alpha)

        Parameters:
            alpha: sg::float_t


        1
        """
        return _pysgpp_swig.OptNelderMead_setAlpha(self, *args)

    def getBeta(self):
        """
        getBeta(self) -> sg::float_t

        Parameters:
            self: sg::optimization::optimizer::NelderMead const *


        1
        """
        return _pysgpp_swig.OptNelderMead_getBeta(self)

    def setBeta(self, *args):
        """
        setBeta(self, beta)

        Parameters:
            beta: sg::float_t


        1
        """
        return _pysgpp_swig.OptNelderMead_setBeta(self, *args)

    def getGamma(self):
        """
        getGamma(self) -> sg::float_t

        Parameters:
            self: sg::optimization::optimizer::NelderMead const *


        1
        """
        return _pysgpp_swig.OptNelderMead_getGamma(self)

    def setGamma(self, *args):
        """
        setGamma(self, gamma)

        Parameters:
            gamma: sg::float_t


        1
        """
        return _pysgpp_swig.OptNelderMead_setGamma(self, *args)

    def getDelta(self):
        """
        getDelta(self) -> sg::float_t

        Parameters:
            self: sg::optimization::optimizer::NelderMead const *


        1
        """
        return _pysgpp_swig.OptNelderMead_getDelta(self)

    def setDelta(self, *args):
        """
        setDelta(self, delta)

        Parameters:
            delta: sg::float_t


        1
        """
        return _pysgpp_swig.OptNelderMead_setDelta(self, *args)

    __swig_destroy__ = _pysgpp_swig.delete_OptNelderMead
    __del__ = lambda self : None;
OptNelderMead_swigregister = _pysgpp_swig.OptNelderMead_swigregister
OptNelderMead_swigregister(OptNelderMead)

class OptNewton(OptUnconstrainedOptimizer):
    """1"""
    __swig_setmethods__ = {}
    for _s in [OptUnconstrainedOptimizer]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptNewton, name, value)
    __swig_getmethods__ = {}
    for _s in [OptUnconstrainedOptimizer]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptNewton, name)
    __repr__ = _swig_repr
    DEFAULT_BETA = _pysgpp_swig.OptNewton_DEFAULT_BETA
    DEFAULT_GAMMA = _pysgpp_swig.OptNewton_DEFAULT_GAMMA
    DEFAULT_TOLERANCE = _pysgpp_swig.OptNewton_DEFAULT_TOLERANCE
    DEFAULT_EPSILON = _pysgpp_swig.OptNewton_DEFAULT_EPSILON
    DEFAULT_ALPHA1 = _pysgpp_swig.OptNewton_DEFAULT_ALPHA1
    DEFAULT_ALPHA2 = _pysgpp_swig.OptNewton_DEFAULT_ALPHA2
    DEFAULT_P = _pysgpp_swig.OptNewton_DEFAULT_P
    def __init__(self, *args): 
        """
        Newton(f, fHessian, maxItCount=DEFAULT_N, beta=DEFAULT_BETA, gamma=DEFAULT_GAMMA, tolerance=DEFAULT_TOLERANCE, 
            epsilon=DEFAULT_EPSILON, alpha1=DEFAULT_ALPHA1, alpha2=DEFAULT_ALPHA2, 
            p=DEFAULT_P) -> OptNewton

        Parameters:
            f: sg::optimization::ScalarFunction &
            fHessian: sg::optimization::ScalarFunctionHessian &
            maxItCount: size_t
            beta: sg::float_t
            gamma: sg::float_t
            tolerance: sg::float_t
            epsilon: sg::float_t
            alpha1: sg::float_t
            alpha2: sg::float_t
            p: sg::float_t

        Newton(f, fHessian, maxItCount=DEFAULT_N, beta=DEFAULT_BETA, gamma=DEFAULT_GAMMA, tolerance=DEFAULT_TOLERANCE, 
            epsilon=DEFAULT_EPSILON, alpha1=DEFAULT_ALPHA1, alpha2=DEFAULT_ALPHA2) -> OptNewton

        Parameters:
            f: sg::optimization::ScalarFunction &
            fHessian: sg::optimization::ScalarFunctionHessian &
            maxItCount: size_t
            beta: sg::float_t
            gamma: sg::float_t
            tolerance: sg::float_t
            epsilon: sg::float_t
            alpha1: sg::float_t
            alpha2: sg::float_t

        Newton(f, fHessian, maxItCount=DEFAULT_N, beta=DEFAULT_BETA, gamma=DEFAULT_GAMMA, tolerance=DEFAULT_TOLERANCE, 
            epsilon=DEFAULT_EPSILON, alpha1=DEFAULT_ALPHA1) -> OptNewton

        Parameters:
            f: sg::optimization::ScalarFunction &
            fHessian: sg::optimization::ScalarFunctionHessian &
            maxItCount: size_t
            beta: sg::float_t
            gamma: sg::float_t
            tolerance: sg::float_t
            epsilon: sg::float_t
            alpha1: sg::float_t

        Newton(f, fHessian, maxItCount=DEFAULT_N, beta=DEFAULT_BETA, gamma=DEFAULT_GAMMA, tolerance=DEFAULT_TOLERANCE, 
            epsilon=DEFAULT_EPSILON) -> OptNewton

        Parameters:
            f: sg::optimization::ScalarFunction &
            fHessian: sg::optimization::ScalarFunctionHessian &
            maxItCount: size_t
            beta: sg::float_t
            gamma: sg::float_t
            tolerance: sg::float_t
            epsilon: sg::float_t

        Newton(f, fHessian, maxItCount=DEFAULT_N, beta=DEFAULT_BETA, gamma=DEFAULT_GAMMA, tolerance=DEFAULT_TOLERANCE) -> OptNewton

        Parameters:
            f: sg::optimization::ScalarFunction &
            fHessian: sg::optimization::ScalarFunctionHessian &
            maxItCount: size_t
            beta: sg::float_t
            gamma: sg::float_t
            tolerance: sg::float_t

        Newton(f, fHessian, maxItCount=DEFAULT_N, beta=DEFAULT_BETA, gamma=DEFAULT_GAMMA) -> OptNewton

        Parameters:
            f: sg::optimization::ScalarFunction &
            fHessian: sg::optimization::ScalarFunctionHessian &
            maxItCount: size_t
            beta: sg::float_t
            gamma: sg::float_t

        Newton(f, fHessian, maxItCount=DEFAULT_N, beta=DEFAULT_BETA) -> OptNewton

        Parameters:
            f: sg::optimization::ScalarFunction &
            fHessian: sg::optimization::ScalarFunctionHessian &
            maxItCount: size_t
            beta: sg::float_t

        Newton(f, fHessian, maxItCount=DEFAULT_N) -> OptNewton

        Parameters:
            f: sg::optimization::ScalarFunction &
            fHessian: sg::optimization::ScalarFunctionHessian &
            maxItCount: size_t

        Newton(f, fHessian) -> OptNewton

        Parameters:
            f: sg::optimization::ScalarFunction &
            fHessian: sg::optimization::ScalarFunctionHessian &

        __init__(self, f, fHessian, maxItCount, beta, gamma, tolerance, epsilon, alpha1, alpha2, p, sleSolver) -> OptNewton

        Parameters:
            f: sg::optimization::ScalarFunction &
            fHessian: sg::optimization::ScalarFunctionHessian &
            maxItCount: size_t
            beta: sg::float_t
            gamma: sg::float_t
            tolerance: sg::float_t
            epsilon: sg::float_t
            alpha1: sg::float_t
            alpha2: sg::float_t
            p: sg::float_t
            sleSolver: sg::optimization::sle_solver::SLESolver const &


        1
        """
        this = _pysgpp_swig.new_OptNewton(*args)
        try: self.this.append(this)
        except: self.this = this
    def getObjectiveHessian(self):
        """
        getObjectiveHessian(self) -> OptScalarFunctionHessian

        Parameters:
            self: sg::optimization::optimizer::Newton const *


        1
        """
        return _pysgpp_swig.OptNewton_getObjectiveHessian(self)

    def getBeta(self):
        """
        getBeta(self) -> sg::float_t

        Parameters:
            self: sg::optimization::optimizer::Newton const *


        1
        """
        return _pysgpp_swig.OptNewton_getBeta(self)

    def setBeta(self, *args):
        """
        setBeta(self, beta)

        Parameters:
            beta: sg::float_t


        1
        """
        return _pysgpp_swig.OptNewton_setBeta(self, *args)

    def getGamma(self):
        """
        getGamma(self) -> sg::float_t

        Parameters:
            self: sg::optimization::optimizer::Newton const *


        1
        """
        return _pysgpp_swig.OptNewton_getGamma(self)

    def setGamma(self, *args):
        """
        setGamma(self, gamma)

        Parameters:
            gamma: sg::float_t


        1
        """
        return _pysgpp_swig.OptNewton_setGamma(self, *args)

    def getTolerance(self):
        """
        getTolerance(self) -> sg::float_t

        Parameters:
            self: sg::optimization::optimizer::Newton const *


        1
        """
        return _pysgpp_swig.OptNewton_getTolerance(self)

    def setTolerance(self, *args):
        """
        setTolerance(self, tolerance)

        Parameters:
            tolerance: sg::float_t


        1
        """
        return _pysgpp_swig.OptNewton_setTolerance(self, *args)

    def getEpsilon(self):
        """
        getEpsilon(self) -> sg::float_t

        Parameters:
            self: sg::optimization::optimizer::Newton const *


        1
        """
        return _pysgpp_swig.OptNewton_getEpsilon(self)

    def setEpsilon(self, *args):
        """
        setEpsilon(self, epsilon)

        Parameters:
            epsilon: sg::float_t


        1
        """
        return _pysgpp_swig.OptNewton_setEpsilon(self, *args)

    def getAlpha1(self):
        """
        getAlpha1(self) -> sg::float_t

        Parameters:
            self: sg::optimization::optimizer::Newton const *


        1
        """
        return _pysgpp_swig.OptNewton_getAlpha1(self)

    def setAlpha1(self, *args):
        """
        setAlpha1(self, alpha1)

        Parameters:
            alpha1: sg::float_t


        1
        """
        return _pysgpp_swig.OptNewton_setAlpha1(self, *args)

    def getAlpha2(self):
        """
        getAlpha2(self) -> sg::float_t

        Parameters:
            self: sg::optimization::optimizer::Newton const *


        1
        """
        return _pysgpp_swig.OptNewton_getAlpha2(self)

    def setAlpha2(self, *args):
        """
        setAlpha2(self, alpha2)

        Parameters:
            alpha2: sg::float_t


        1
        """
        return _pysgpp_swig.OptNewton_setAlpha2(self, *args)

    def getP(self):
        """
        getP(self) -> sg::float_t

        Parameters:
            self: sg::optimization::optimizer::Newton const *


        1
        """
        return _pysgpp_swig.OptNewton_getP(self)

    def setP(self, *args):
        """
        setP(self, p)

        Parameters:
            p: sg::float_t


        1
        """
        return _pysgpp_swig.OptNewton_setP(self, *args)

    __swig_destroy__ = _pysgpp_swig.delete_OptNewton
    __del__ = lambda self : None;
OptNewton_swigregister = _pysgpp_swig.OptNewton_swigregister
OptNewton_swigregister(OptNewton)

class OptNLCG(OptUnconstrainedOptimizer):
    """1"""
    __swig_setmethods__ = {}
    for _s in [OptUnconstrainedOptimizer]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptNLCG, name, value)
    __swig_getmethods__ = {}
    for _s in [OptUnconstrainedOptimizer]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptNLCG, name)
    __repr__ = _swig_repr
    DEFAULT_BETA = _pysgpp_swig.OptNLCG_DEFAULT_BETA
    DEFAULT_GAMMA = _pysgpp_swig.OptNLCG_DEFAULT_GAMMA
    DEFAULT_TOLERANCE = _pysgpp_swig.OptNLCG_DEFAULT_TOLERANCE
    DEFAULT_EPSILON = _pysgpp_swig.OptNLCG_DEFAULT_EPSILON
    DEFAULT_RESTART_THRESHOLD = _pysgpp_swig.OptNLCG_DEFAULT_RESTART_THRESHOLD
    def __init__(self, *args): 
        """
        NLCG(f, fGradient, maxItCount=DEFAULT_N, beta=DEFAULT_BETA, gamma=DEFAULT_GAMMA, tolerance=DEFAULT_TOLERANCE, 
            epsilon=DEFAULT_EPSILON, restartThreshold=DEFAULT_RESTART_THRESHOLD) -> OptNLCG

        Parameters:
            f: sg::optimization::ScalarFunction &
            fGradient: sg::optimization::ScalarFunctionGradient &
            maxItCount: size_t
            beta: sg::float_t
            gamma: sg::float_t
            tolerance: sg::float_t
            epsilon: sg::float_t
            restartThreshold: sg::float_t

        NLCG(f, fGradient, maxItCount=DEFAULT_N, beta=DEFAULT_BETA, gamma=DEFAULT_GAMMA, tolerance=DEFAULT_TOLERANCE, 
            epsilon=DEFAULT_EPSILON) -> OptNLCG

        Parameters:
            f: sg::optimization::ScalarFunction &
            fGradient: sg::optimization::ScalarFunctionGradient &
            maxItCount: size_t
            beta: sg::float_t
            gamma: sg::float_t
            tolerance: sg::float_t
            epsilon: sg::float_t

        NLCG(f, fGradient, maxItCount=DEFAULT_N, beta=DEFAULT_BETA, gamma=DEFAULT_GAMMA, tolerance=DEFAULT_TOLERANCE) -> OptNLCG

        Parameters:
            f: sg::optimization::ScalarFunction &
            fGradient: sg::optimization::ScalarFunctionGradient &
            maxItCount: size_t
            beta: sg::float_t
            gamma: sg::float_t
            tolerance: sg::float_t

        NLCG(f, fGradient, maxItCount=DEFAULT_N, beta=DEFAULT_BETA, gamma=DEFAULT_GAMMA) -> OptNLCG

        Parameters:
            f: sg::optimization::ScalarFunction &
            fGradient: sg::optimization::ScalarFunctionGradient &
            maxItCount: size_t
            beta: sg::float_t
            gamma: sg::float_t

        NLCG(f, fGradient, maxItCount=DEFAULT_N, beta=DEFAULT_BETA) -> OptNLCG

        Parameters:
            f: sg::optimization::ScalarFunction &
            fGradient: sg::optimization::ScalarFunctionGradient &
            maxItCount: size_t
            beta: sg::float_t

        NLCG(f, fGradient, maxItCount=DEFAULT_N) -> OptNLCG

        Parameters:
            f: sg::optimization::ScalarFunction &
            fGradient: sg::optimization::ScalarFunctionGradient &
            maxItCount: size_t

        __init__(self, f, fGradient) -> OptNLCG

        Parameters:
            f: sg::optimization::ScalarFunction &
            fGradient: sg::optimization::ScalarFunctionGradient &


        1
        """
        this = _pysgpp_swig.new_OptNLCG(*args)
        try: self.this.append(this)
        except: self.this = this
    def getObjectiveGradient(self):
        """
        getObjectiveGradient(self) -> OptScalarFunctionGradient

        Parameters:
            self: sg::optimization::optimizer::NLCG const *


        1
        """
        return _pysgpp_swig.OptNLCG_getObjectiveGradient(self)

    def getBeta(self):
        """
        getBeta(self) -> sg::float_t

        Parameters:
            self: sg::optimization::optimizer::NLCG const *


        1
        """
        return _pysgpp_swig.OptNLCG_getBeta(self)

    def setBeta(self, *args):
        """
        setBeta(self, beta)

        Parameters:
            beta: sg::float_t


        1
        """
        return _pysgpp_swig.OptNLCG_setBeta(self, *args)

    def getGamma(self):
        """
        getGamma(self) -> sg::float_t

        Parameters:
            self: sg::optimization::optimizer::NLCG const *


        1
        """
        return _pysgpp_swig.OptNLCG_getGamma(self)

    def setGamma(self, *args):
        """
        setGamma(self, gamma)

        Parameters:
            gamma: sg::float_t


        1
        """
        return _pysgpp_swig.OptNLCG_setGamma(self, *args)

    def getTolerance(self):
        """
        getTolerance(self) -> sg::float_t

        Parameters:
            self: sg::optimization::optimizer::NLCG const *


        1
        """
        return _pysgpp_swig.OptNLCG_getTolerance(self)

    def setTolerance(self, *args):
        """
        setTolerance(self, tolerance)

        Parameters:
            tolerance: sg::float_t


        1
        """
        return _pysgpp_swig.OptNLCG_setTolerance(self, *args)

    def getEpsilon(self):
        """
        getEpsilon(self) -> sg::float_t

        Parameters:
            self: sg::optimization::optimizer::NLCG const *


        1
        """
        return _pysgpp_swig.OptNLCG_getEpsilon(self)

    def setEpsilon(self, *args):
        """
        setEpsilon(self, epsilon)

        Parameters:
            epsilon: sg::float_t


        1
        """
        return _pysgpp_swig.OptNLCG_setEpsilon(self, *args)

    def getRestartThreshold(self):
        """
        getRestartThreshold(self) -> sg::float_t

        Parameters:
            self: sg::optimization::optimizer::NLCG const *


        1
        """
        return _pysgpp_swig.OptNLCG_getRestartThreshold(self)

    def setRestartThreshold(self, *args):
        """
        setRestartThreshold(self, restartThreshold)

        Parameters:
            restartThreshold: sg::float_t


        1
        """
        return _pysgpp_swig.OptNLCG_setRestartThreshold(self, *args)

    __swig_destroy__ = _pysgpp_swig.delete_OptNLCG
    __del__ = lambda self : None;
OptNLCG_swigregister = _pysgpp_swig.OptNLCG_swigregister
OptNLCG_swigregister(OptNLCG)

class OptRprop(OptUnconstrainedOptimizer):
    """1"""
    __swig_setmethods__ = {}
    for _s in [OptUnconstrainedOptimizer]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptRprop, name, value)
    __swig_getmethods__ = {}
    for _s in [OptUnconstrainedOptimizer]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptRprop, name)
    __repr__ = _swig_repr
    DEFAULT_TOLERANCE = _pysgpp_swig.OptRprop_DEFAULT_TOLERANCE
    DEFAULT_INITIAL_STEP_SIZE = _pysgpp_swig.OptRprop_DEFAULT_INITIAL_STEP_SIZE
    DEFAULT_STEP_SIZE_INCREASE_FACTOR = _pysgpp_swig.OptRprop_DEFAULT_STEP_SIZE_INCREASE_FACTOR
    DEFAULT_STEP_SIZE_DECREASE_FACTOR = _pysgpp_swig.OptRprop_DEFAULT_STEP_SIZE_DECREASE_FACTOR
    def __init__(self, *args): 
        """
        Rprop(f, fGradient, maxItCount=DEFAULT_N, tolerance=DEFAULT_TOLERANCE, initialStepSize=DEFAULT_INITIAL_STEP_SIZE, 
            stepSizeIncreaseFactor=DEFAULT_STEP_SIZE_INCREASE_FACTOR, 
            stepSizeDecreaseFactor=DEFAULT_STEP_SIZE_DECREASE_FACTOR) -> OptRprop

        Parameters:
            f: sg::optimization::ScalarFunction &
            fGradient: sg::optimization::ScalarFunctionGradient &
            maxItCount: size_t
            tolerance: sg::float_t
            initialStepSize: sg::float_t
            stepSizeIncreaseFactor: sg::float_t
            stepSizeDecreaseFactor: sg::float_t

        Rprop(f, fGradient, maxItCount=DEFAULT_N, tolerance=DEFAULT_TOLERANCE, initialStepSize=DEFAULT_INITIAL_STEP_SIZE, 
            stepSizeIncreaseFactor=DEFAULT_STEP_SIZE_INCREASE_FACTOR) -> OptRprop

        Parameters:
            f: sg::optimization::ScalarFunction &
            fGradient: sg::optimization::ScalarFunctionGradient &
            maxItCount: size_t
            tolerance: sg::float_t
            initialStepSize: sg::float_t
            stepSizeIncreaseFactor: sg::float_t

        Rprop(f, fGradient, maxItCount=DEFAULT_N, tolerance=DEFAULT_TOLERANCE, initialStepSize=DEFAULT_INITIAL_STEP_SIZE) -> OptRprop

        Parameters:
            f: sg::optimization::ScalarFunction &
            fGradient: sg::optimization::ScalarFunctionGradient &
            maxItCount: size_t
            tolerance: sg::float_t
            initialStepSize: sg::float_t

        Rprop(f, fGradient, maxItCount=DEFAULT_N, tolerance=DEFAULT_TOLERANCE) -> OptRprop

        Parameters:
            f: sg::optimization::ScalarFunction &
            fGradient: sg::optimization::ScalarFunctionGradient &
            maxItCount: size_t
            tolerance: sg::float_t

        Rprop(f, fGradient, maxItCount=DEFAULT_N) -> OptRprop

        Parameters:
            f: sg::optimization::ScalarFunction &
            fGradient: sg::optimization::ScalarFunctionGradient &
            maxItCount: size_t

        __init__(self, f, fGradient) -> OptRprop

        Parameters:
            f: sg::optimization::ScalarFunction &
            fGradient: sg::optimization::ScalarFunctionGradient &


        1
        """
        this = _pysgpp_swig.new_OptRprop(*args)
        try: self.this.append(this)
        except: self.this = this
    def getObjectiveGradient(self):
        """
        getObjectiveGradient(self) -> OptScalarFunctionGradient

        Parameters:
            self: sg::optimization::optimizer::Rprop const *


        1
        """
        return _pysgpp_swig.OptRprop_getObjectiveGradient(self)

    def getTolerance(self):
        """
        getTolerance(self) -> sg::float_t

        Parameters:
            self: sg::optimization::optimizer::Rprop const *


        1
        """
        return _pysgpp_swig.OptRprop_getTolerance(self)

    def setTolerance(self, *args):
        """
        setTolerance(self, tolerance)

        Parameters:
            tolerance: sg::float_t


        1
        """
        return _pysgpp_swig.OptRprop_setTolerance(self, *args)

    def getInitialStepSize(self):
        """
        getInitialStepSize(self) -> sg::float_t

        Parameters:
            self: sg::optimization::optimizer::Rprop const *


        1
        """
        return _pysgpp_swig.OptRprop_getInitialStepSize(self)

    def setInitialStepSize(self, *args):
        """
        setInitialStepSize(self, initialStepSize)

        Parameters:
            initialStepSize: sg::float_t


        1
        """
        return _pysgpp_swig.OptRprop_setInitialStepSize(self, *args)

    def getStepSizeIncreaseFactor(self):
        """
        getStepSizeIncreaseFactor(self) -> sg::float_t

        Parameters:
            self: sg::optimization::optimizer::Rprop const *


        1
        """
        return _pysgpp_swig.OptRprop_getStepSizeIncreaseFactor(self)

    def setStepSizeIncreaseFactor(self, *args):
        """
        setStepSizeIncreaseFactor(self, stepSizeIncreaseFactor)

        Parameters:
            stepSizeIncreaseFactor: sg::float_t


        1
        """
        return _pysgpp_swig.OptRprop_setStepSizeIncreaseFactor(self, *args)

    def getStepSizeDecreaseFactor(self):
        """
        getStepSizeDecreaseFactor(self) -> sg::float_t

        Parameters:
            self: sg::optimization::optimizer::Rprop const *


        1
        """
        return _pysgpp_swig.OptRprop_getStepSizeDecreaseFactor(self)

    def setStepSizeDecreaseFactor(self, *args):
        """
        setStepSizeDecreaseFactor(self, stepSizeDecreaseFactor)

        Parameters:
            stepSizeDecreaseFactor: sg::float_t


        1
        """
        return _pysgpp_swig.OptRprop_setStepSizeDecreaseFactor(self, *args)

    __swig_destroy__ = _pysgpp_swig.delete_OptRprop
    __del__ = lambda self : None;
OptRprop_swigregister = _pysgpp_swig.OptRprop_swigregister
OptRprop_swigregister(OptRprop)

class OptLeastSquaresOptimizer(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptLeastSquaresOptimizer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptLeastSquaresOptimizer, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    DEFAULT_N = _pysgpp_swig.OptLeastSquaresOptimizer_DEFAULT_N
    __swig_destroy__ = _pysgpp_swig.delete_OptLeastSquaresOptimizer
    __del__ = lambda self : None;
    def optimize(self):
        """
        optimize(self)

        Parameters:
            self: sg::optimization::optimizer::LeastSquaresOptimizer *


        1
        """
        return _pysgpp_swig.OptLeastSquaresOptimizer_optimize(self)

    def getPhiFunction(self):
        """
        getPhiFunction(self) -> OptVectorFunction

        Parameters:
            self: sg::optimization::optimizer::LeastSquaresOptimizer const *


        1
        """
        return _pysgpp_swig.OptLeastSquaresOptimizer_getPhiFunction(self)

    def getN(self):
        """
        getN(self) -> size_t

        Parameters:
            self: sg::optimization::optimizer::LeastSquaresOptimizer const *


        1
        """
        return _pysgpp_swig.OptLeastSquaresOptimizer_getN(self)

    def setN(self, *args):
        """
        setN(self, N)

        Parameters:
            N: size_t


        1
        """
        return _pysgpp_swig.OptLeastSquaresOptimizer_setN(self, *args)

    def getStartingPoint(self):
        """
        getStartingPoint(self) -> DataVector

        Parameters:
            self: sg::optimization::optimizer::LeastSquaresOptimizer const *


        1
        """
        return _pysgpp_swig.OptLeastSquaresOptimizer_getStartingPoint(self)

    def setStartingPoint(self, *args):
        """
        setStartingPoint(self, startingPoint)

        Parameters:
            startingPoint: sg::base::DataVector const &


        1
        """
        return _pysgpp_swig.OptLeastSquaresOptimizer_setStartingPoint(self, *args)

    def getOptimalPoint(self):
        """
        getOptimalPoint(self) -> DataVector

        Parameters:
            self: sg::optimization::optimizer::LeastSquaresOptimizer const *


        1
        """
        return _pysgpp_swig.OptLeastSquaresOptimizer_getOptimalPoint(self)

    def getOptimalValue(self):
        """
        getOptimalValue(self) -> sg::float_t

        Parameters:
            self: sg::optimization::optimizer::LeastSquaresOptimizer const *


        1
        """
        return _pysgpp_swig.OptLeastSquaresOptimizer_getOptimalValue(self)

    def getHistoryOfOptimalPoints(self):
        """
        getHistoryOfOptimalPoints(self) -> DataMatrix

        Parameters:
            self: sg::optimization::optimizer::LeastSquaresOptimizer const *


        1
        """
        return _pysgpp_swig.OptLeastSquaresOptimizer_getHistoryOfOptimalPoints(self)

    def getHistoryOfOptimalValues(self):
        """
        getHistoryOfOptimalValues(self) -> DataVector

        Parameters:
            self: sg::optimization::optimizer::LeastSquaresOptimizer const *


        1
        """
        return _pysgpp_swig.OptLeastSquaresOptimizer_getHistoryOfOptimalValues(self)

    def clone(self, *args):
        """
        clone(self, clone)

        Parameters:
            clone: std::unique_ptr< sg::optimization::optimizer::LeastSquaresOptimizer > &


        1
        """
        return _pysgpp_swig.OptLeastSquaresOptimizer_clone(self, *args)

OptLeastSquaresOptimizer_swigregister = _pysgpp_swig.OptLeastSquaresOptimizer_swigregister
OptLeastSquaresOptimizer_swigregister(OptLeastSquaresOptimizer)

class OptLevenbergMarquardt(OptLeastSquaresOptimizer):
    """1"""
    __swig_setmethods__ = {}
    for _s in [OptLeastSquaresOptimizer]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptLevenbergMarquardt, name, value)
    __swig_getmethods__ = {}
    for _s in [OptLeastSquaresOptimizer]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptLevenbergMarquardt, name)
    __repr__ = _swig_repr
    DEFAULT_TOLERANCE = _pysgpp_swig.OptLevenbergMarquardt_DEFAULT_TOLERANCE
    DEFAULT_INITIAL_DAMPING = _pysgpp_swig.OptLevenbergMarquardt_DEFAULT_INITIAL_DAMPING
    DEFAULT_ACCEPTANCE_THRESHOLD = _pysgpp_swig.OptLevenbergMarquardt_DEFAULT_ACCEPTANCE_THRESHOLD
    DEFAULT_EFFECTIVENESS_THRESHOLD = _pysgpp_swig.OptLevenbergMarquardt_DEFAULT_EFFECTIVENESS_THRESHOLD
    def __init__(self, *args): 
        """
        LevenbergMarquardt(phi, phiGradient, maxItCount=DEFAULT_N, tolerance=DEFAULT_TOLERANCE, initialDamping=DEFAULT_INITIAL_DAMPING, 
            acceptanceThreshold=DEFAULT_ACCEPTANCE_THRESHOLD, 
            effectivenessThreshold=DEFAULT_EFFECTIVENESS_THRESHOLD) -> OptLevenbergMarquardt

        Parameters:
            phi: sg::optimization::VectorFunction &
            phiGradient: sg::optimization::VectorFunctionGradient &
            maxItCount: size_t
            tolerance: sg::float_t
            initialDamping: sg::float_t
            acceptanceThreshold: sg::float_t
            effectivenessThreshold: sg::float_t

        LevenbergMarquardt(phi, phiGradient, maxItCount=DEFAULT_N, tolerance=DEFAULT_TOLERANCE, initialDamping=DEFAULT_INITIAL_DAMPING, 
            acceptanceThreshold=DEFAULT_ACCEPTANCE_THRESHOLD) -> OptLevenbergMarquardt

        Parameters:
            phi: sg::optimization::VectorFunction &
            phiGradient: sg::optimization::VectorFunctionGradient &
            maxItCount: size_t
            tolerance: sg::float_t
            initialDamping: sg::float_t
            acceptanceThreshold: sg::float_t

        LevenbergMarquardt(phi, phiGradient, maxItCount=DEFAULT_N, tolerance=DEFAULT_TOLERANCE, initialDamping=DEFAULT_INITIAL_DAMPING) -> OptLevenbergMarquardt

        Parameters:
            phi: sg::optimization::VectorFunction &
            phiGradient: sg::optimization::VectorFunctionGradient &
            maxItCount: size_t
            tolerance: sg::float_t
            initialDamping: sg::float_t

        LevenbergMarquardt(phi, phiGradient, maxItCount=DEFAULT_N, tolerance=DEFAULT_TOLERANCE) -> OptLevenbergMarquardt

        Parameters:
            phi: sg::optimization::VectorFunction &
            phiGradient: sg::optimization::VectorFunctionGradient &
            maxItCount: size_t
            tolerance: sg::float_t

        LevenbergMarquardt(phi, phiGradient, maxItCount=DEFAULT_N) -> OptLevenbergMarquardt

        Parameters:
            phi: sg::optimization::VectorFunction &
            phiGradient: sg::optimization::VectorFunctionGradient &
            maxItCount: size_t

        LevenbergMarquardt(phi, phiGradient) -> OptLevenbergMarquardt

        Parameters:
            phi: sg::optimization::VectorFunction &
            phiGradient: sg::optimization::VectorFunctionGradient &

        __init__(self, phi, phiGradient, maxItCount, tolerance, initialDamping, acceptanceThreshold, effectivenessThreshold, 
            sleSolver) -> OptLevenbergMarquardt

        Parameters:
            phi: sg::optimization::VectorFunction &
            phiGradient: sg::optimization::VectorFunctionGradient &
            maxItCount: size_t
            tolerance: sg::float_t
            initialDamping: sg::float_t
            acceptanceThreshold: sg::float_t
            effectivenessThreshold: sg::float_t
            sleSolver: sg::optimization::sle_solver::SLESolver const &


        1
        """
        this = _pysgpp_swig.new_OptLevenbergMarquardt(*args)
        try: self.this.append(this)
        except: self.this = this
    def getPhiGradient(self):
        """
        getPhiGradient(self) -> OptVectorFunctionGradient

        Parameters:
            self: sg::optimization::optimizer::LevenbergMarquardt const *


        1
        """
        return _pysgpp_swig.OptLevenbergMarquardt_getPhiGradient(self)

    def getTolerance(self):
        """
        getTolerance(self) -> sg::float_t

        Parameters:
            self: sg::optimization::optimizer::LevenbergMarquardt const *


        1
        """
        return _pysgpp_swig.OptLevenbergMarquardt_getTolerance(self)

    def setTolerance(self, *args):
        """
        setTolerance(self, tolerance)

        Parameters:
            tolerance: sg::float_t


        1
        """
        return _pysgpp_swig.OptLevenbergMarquardt_setTolerance(self, *args)

    def getInitialDamping(self):
        """
        getInitialDamping(self) -> sg::float_t

        Parameters:
            self: sg::optimization::optimizer::LevenbergMarquardt const *


        1
        """
        return _pysgpp_swig.OptLevenbergMarquardt_getInitialDamping(self)

    def setInitialDamping(self, *args):
        """
        setInitialDamping(self, initialDamping)

        Parameters:
            initialDamping: sg::float_t


        1
        """
        return _pysgpp_swig.OptLevenbergMarquardt_setInitialDamping(self, *args)

    def getAcceptanceThreshold(self):
        """
        getAcceptanceThreshold(self) -> sg::float_t

        Parameters:
            self: sg::optimization::optimizer::LevenbergMarquardt const *


        1
        """
        return _pysgpp_swig.OptLevenbergMarquardt_getAcceptanceThreshold(self)

    def setAcceptanceThreshold(self, *args):
        """
        setAcceptanceThreshold(self, acceptanceThreshold)

        Parameters:
            acceptanceThreshold: sg::float_t


        1
        """
        return _pysgpp_swig.OptLevenbergMarquardt_setAcceptanceThreshold(self, *args)

    def getEffectivenessThreshold(self):
        """
        getEffectivenessThreshold(self) -> sg::float_t

        Parameters:
            self: sg::optimization::optimizer::LevenbergMarquardt const *


        1
        """
        return _pysgpp_swig.OptLevenbergMarquardt_getEffectivenessThreshold(self)

    def setEffectivenessThreshold(self, *args):
        """
        setEffectivenessThreshold(self, effectivenessThreshold)

        Parameters:
            effectivenessThreshold: sg::float_t


        1
        """
        return _pysgpp_swig.OptLevenbergMarquardt_setEffectivenessThreshold(self, *args)

    __swig_destroy__ = _pysgpp_swig.delete_OptLevenbergMarquardt
    __del__ = lambda self : None;
OptLevenbergMarquardt_swigregister = _pysgpp_swig.OptLevenbergMarquardt_swigregister
OptLevenbergMarquardt_swigregister(OptLevenbergMarquardt)

class OptConstrainedOptimizer(OptUnconstrainedOptimizer):
    """1"""
    __swig_setmethods__ = {}
    for _s in [OptUnconstrainedOptimizer]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptConstrainedOptimizer, name, value)
    __swig_getmethods__ = {}
    for _s in [OptUnconstrainedOptimizer]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptConstrainedOptimizer, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pysgpp_swig.delete_OptConstrainedOptimizer
    __del__ = lambda self : None;
    def getInequalityConstraintFunction(self):
        """
        getInequalityConstraintFunction(self) -> OptVectorFunction

        Parameters:
            self: sg::optimization::optimizer::ConstrainedOptimizer const *


        1
        """
        return _pysgpp_swig.OptConstrainedOptimizer_getInequalityConstraintFunction(self)

    def getEqualityConstraintFunction(self):
        """
        getEqualityConstraintFunction(self) -> OptVectorFunction

        Parameters:
            self: sg::optimization::optimizer::ConstrainedOptimizer const *


        1
        """
        return _pysgpp_swig.OptConstrainedOptimizer_getEqualityConstraintFunction(self)

OptConstrainedOptimizer_swigregister = _pysgpp_swig.OptConstrainedOptimizer_swigregister
OptConstrainedOptimizer_swigregister(OptConstrainedOptimizer)

class OptAugmentedLagrangian(OptConstrainedOptimizer):
    """1"""
    __swig_setmethods__ = {}
    for _s in [OptConstrainedOptimizer]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptAugmentedLagrangian, name, value)
    __swig_getmethods__ = {}
    for _s in [OptConstrainedOptimizer]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptAugmentedLagrangian, name)
    __repr__ = _swig_repr
    DEFAULT_X_TOLERANCE = _pysgpp_swig.OptAugmentedLagrangian_DEFAULT_X_TOLERANCE
    DEFAULT_CONSTRAINT_TOLERANCE = _pysgpp_swig.OptAugmentedLagrangian_DEFAULT_CONSTRAINT_TOLERANCE
    DEFAULT_PENALTY_START_VALUE = _pysgpp_swig.OptAugmentedLagrangian_DEFAULT_PENALTY_START_VALUE
    DEFAULT_PENALTY_INCREASE_FACTOR = _pysgpp_swig.OptAugmentedLagrangian_DEFAULT_PENALTY_INCREASE_FACTOR
    def __init__(self, *args): 
        """
        AugmentedLagrangian(f, fGradient, g, gGradient, h, hGradient, maxItCount=DEFAULT_N, xTolerance=DEFAULT_X_TOLERANCE, 
            constraintTolerance=DEFAULT_CONSTRAINT_TOLERANCE, penaltyStartValue=DEFAULT_PENALTY_START_VALUE, 
            penaltyIncreaseFactor=DEFAULT_PENALTY_INCREASE_FACTOR) -> OptAugmentedLagrangian

        Parameters:
            f: sg::optimization::ScalarFunction &
            fGradient: sg::optimization::ScalarFunctionGradient &
            g: sg::optimization::VectorFunction &
            gGradient: sg::optimization::VectorFunctionGradient &
            h: sg::optimization::VectorFunction &
            hGradient: sg::optimization::VectorFunctionGradient &
            maxItCount: size_t
            xTolerance: sg::float_t
            constraintTolerance: sg::float_t
            penaltyStartValue: sg::float_t
            penaltyIncreaseFactor: sg::float_t

        AugmentedLagrangian(f, fGradient, g, gGradient, h, hGradient, maxItCount=DEFAULT_N, xTolerance=DEFAULT_X_TOLERANCE, 
            constraintTolerance=DEFAULT_CONSTRAINT_TOLERANCE, penaltyStartValue=DEFAULT_PENALTY_START_VALUE) -> OptAugmentedLagrangian

        Parameters:
            f: sg::optimization::ScalarFunction &
            fGradient: sg::optimization::ScalarFunctionGradient &
            g: sg::optimization::VectorFunction &
            gGradient: sg::optimization::VectorFunctionGradient &
            h: sg::optimization::VectorFunction &
            hGradient: sg::optimization::VectorFunctionGradient &
            maxItCount: size_t
            xTolerance: sg::float_t
            constraintTolerance: sg::float_t
            penaltyStartValue: sg::float_t

        AugmentedLagrangian(f, fGradient, g, gGradient, h, hGradient, maxItCount=DEFAULT_N, xTolerance=DEFAULT_X_TOLERANCE, 
            constraintTolerance=DEFAULT_CONSTRAINT_TOLERANCE) -> OptAugmentedLagrangian

        Parameters:
            f: sg::optimization::ScalarFunction &
            fGradient: sg::optimization::ScalarFunctionGradient &
            g: sg::optimization::VectorFunction &
            gGradient: sg::optimization::VectorFunctionGradient &
            h: sg::optimization::VectorFunction &
            hGradient: sg::optimization::VectorFunctionGradient &
            maxItCount: size_t
            xTolerance: sg::float_t
            constraintTolerance: sg::float_t

        AugmentedLagrangian(f, fGradient, g, gGradient, h, hGradient, maxItCount=DEFAULT_N, xTolerance=DEFAULT_X_TOLERANCE) -> OptAugmentedLagrangian

        Parameters:
            f: sg::optimization::ScalarFunction &
            fGradient: sg::optimization::ScalarFunctionGradient &
            g: sg::optimization::VectorFunction &
            gGradient: sg::optimization::VectorFunctionGradient &
            h: sg::optimization::VectorFunction &
            hGradient: sg::optimization::VectorFunctionGradient &
            maxItCount: size_t
            xTolerance: sg::float_t

        AugmentedLagrangian(f, fGradient, g, gGradient, h, hGradient, maxItCount=DEFAULT_N) -> OptAugmentedLagrangian

        Parameters:
            f: sg::optimization::ScalarFunction &
            fGradient: sg::optimization::ScalarFunctionGradient &
            g: sg::optimization::VectorFunction &
            gGradient: sg::optimization::VectorFunctionGradient &
            h: sg::optimization::VectorFunction &
            hGradient: sg::optimization::VectorFunctionGradient &
            maxItCount: size_t

        __init__(self, f, fGradient, g, gGradient, h, hGradient) -> OptAugmentedLagrangian

        Parameters:
            f: sg::optimization::ScalarFunction &
            fGradient: sg::optimization::ScalarFunctionGradient &
            g: sg::optimization::VectorFunction &
            gGradient: sg::optimization::VectorFunctionGradient &
            h: sg::optimization::VectorFunction &
            hGradient: sg::optimization::VectorFunctionGradient &


        1
        """
        this = _pysgpp_swig.new_OptAugmentedLagrangian(*args)
        try: self.this.append(this)
        except: self.this = this
    def findFeasiblePoint(self):
        """
        findFeasiblePoint(self) -> DataVector

        Parameters:
            self: sg::optimization::optimizer::AugmentedLagrangian const *


        1
        """
        return _pysgpp_swig.OptAugmentedLagrangian_findFeasiblePoint(self)

    def getObjectiveGradient(self):
        """
        getObjectiveGradient(self) -> OptScalarFunctionGradient

        Parameters:
            self: sg::optimization::optimizer::AugmentedLagrangian const *


        1
        """
        return _pysgpp_swig.OptAugmentedLagrangian_getObjectiveGradient(self)

    def getInequalityConstraintGradient(self):
        """
        getInequalityConstraintGradient(self) -> OptVectorFunctionGradient

        Parameters:
            self: sg::optimization::optimizer::AugmentedLagrangian const *


        1
        """
        return _pysgpp_swig.OptAugmentedLagrangian_getInequalityConstraintGradient(self)

    def getEqualityConstraintGradient(self):
        """
        getEqualityConstraintGradient(self) -> OptVectorFunctionGradient

        Parameters:
            self: sg::optimization::optimizer::AugmentedLagrangian const *


        1
        """
        return _pysgpp_swig.OptAugmentedLagrangian_getEqualityConstraintGradient(self)

    def getXTolerance(self):
        """
        getXTolerance(self) -> sg::float_t

        Parameters:
            self: sg::optimization::optimizer::AugmentedLagrangian const *


        1
        """
        return _pysgpp_swig.OptAugmentedLagrangian_getXTolerance(self)

    def setXTolerance(self, *args):
        """
        setXTolerance(self, xTolerance)

        Parameters:
            xTolerance: sg::float_t


        1
        """
        return _pysgpp_swig.OptAugmentedLagrangian_setXTolerance(self, *args)

    def getConstraintTolerance(self):
        """
        getConstraintTolerance(self) -> sg::float_t

        Parameters:
            self: sg::optimization::optimizer::AugmentedLagrangian const *


        1
        """
        return _pysgpp_swig.OptAugmentedLagrangian_getConstraintTolerance(self)

    def setConstraintTolerance(self, *args):
        """
        setConstraintTolerance(self, constraintTolerance)

        Parameters:
            constraintTolerance: sg::float_t


        1
        """
        return _pysgpp_swig.OptAugmentedLagrangian_setConstraintTolerance(self, *args)

    def getPenaltyStartValue(self):
        """
        getPenaltyStartValue(self) -> sg::float_t

        Parameters:
            self: sg::optimization::optimizer::AugmentedLagrangian const *


        1
        """
        return _pysgpp_swig.OptAugmentedLagrangian_getPenaltyStartValue(self)

    def setPenaltyStartValue(self, *args):
        """
        setPenaltyStartValue(self, penaltyStartValue)

        Parameters:
            penaltyStartValue: sg::float_t


        1
        """
        return _pysgpp_swig.OptAugmentedLagrangian_setPenaltyStartValue(self, *args)

    def getPenaltyIncreaseFactor(self):
        """
        getPenaltyIncreaseFactor(self) -> sg::float_t

        Parameters:
            self: sg::optimization::optimizer::AugmentedLagrangian const *


        1
        """
        return _pysgpp_swig.OptAugmentedLagrangian_getPenaltyIncreaseFactor(self)

    def setPenaltyIncreaseFactor(self, *args):
        """
        setPenaltyIncreaseFactor(self, penaltyIncreaseFactor)

        Parameters:
            penaltyIncreaseFactor: sg::float_t


        1
        """
        return _pysgpp_swig.OptAugmentedLagrangian_setPenaltyIncreaseFactor(self, *args)

    def getHistoryOfInnerIterations(self):
        """
        getHistoryOfInnerIterations(self) -> IndexVector

        Parameters:
            self: sg::optimization::optimizer::AugmentedLagrangian const *


        1
        """
        return _pysgpp_swig.OptAugmentedLagrangian_getHistoryOfInnerIterations(self)

    __swig_destroy__ = _pysgpp_swig.delete_OptAugmentedLagrangian
    __del__ = lambda self : None;
OptAugmentedLagrangian_swigregister = _pysgpp_swig.OptAugmentedLagrangian_swigregister
OptAugmentedLagrangian_swigregister(OptAugmentedLagrangian)

class OptLogBarrier(OptConstrainedOptimizer):
    """1"""
    __swig_setmethods__ = {}
    for _s in [OptConstrainedOptimizer]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptLogBarrier, name, value)
    __swig_getmethods__ = {}
    for _s in [OptConstrainedOptimizer]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptLogBarrier, name)
    __repr__ = _swig_repr
    DEFAULT_TOLERANCE = _pysgpp_swig.OptLogBarrier_DEFAULT_TOLERANCE
    DEFAULT_BARRIER_START_VALUE = _pysgpp_swig.OptLogBarrier_DEFAULT_BARRIER_START_VALUE
    DEFAULT_BARRIER_DECREASE_FACTOR = _pysgpp_swig.OptLogBarrier_DEFAULT_BARRIER_DECREASE_FACTOR
    def __init__(self, *args): 
        """
        LogBarrier(f, fGradient, g, gGradient, maxItCount=DEFAULT_N, tolerance=DEFAULT_TOLERANCE, barrierStartValue=DEFAULT_BARRIER_START_VALUE, 
            barrierDecreaseFactor=DEFAULT_BARRIER_DECREASE_FACTOR) -> OptLogBarrier

        Parameters:
            f: sg::optimization::ScalarFunction &
            fGradient: sg::optimization::ScalarFunctionGradient &
            g: sg::optimization::VectorFunction &
            gGradient: sg::optimization::VectorFunctionGradient &
            maxItCount: size_t
            tolerance: sg::float_t
            barrierStartValue: sg::float_t
            barrierDecreaseFactor: sg::float_t

        LogBarrier(f, fGradient, g, gGradient, maxItCount=DEFAULT_N, tolerance=DEFAULT_TOLERANCE, barrierStartValue=DEFAULT_BARRIER_START_VALUE) -> OptLogBarrier

        Parameters:
            f: sg::optimization::ScalarFunction &
            fGradient: sg::optimization::ScalarFunctionGradient &
            g: sg::optimization::VectorFunction &
            gGradient: sg::optimization::VectorFunctionGradient &
            maxItCount: size_t
            tolerance: sg::float_t
            barrierStartValue: sg::float_t

        LogBarrier(f, fGradient, g, gGradient, maxItCount=DEFAULT_N, tolerance=DEFAULT_TOLERANCE) -> OptLogBarrier

        Parameters:
            f: sg::optimization::ScalarFunction &
            fGradient: sg::optimization::ScalarFunctionGradient &
            g: sg::optimization::VectorFunction &
            gGradient: sg::optimization::VectorFunctionGradient &
            maxItCount: size_t
            tolerance: sg::float_t

        LogBarrier(f, fGradient, g, gGradient, maxItCount=DEFAULT_N) -> OptLogBarrier

        Parameters:
            f: sg::optimization::ScalarFunction &
            fGradient: sg::optimization::ScalarFunctionGradient &
            g: sg::optimization::VectorFunction &
            gGradient: sg::optimization::VectorFunctionGradient &
            maxItCount: size_t

        __init__(self, f, fGradient, g, gGradient) -> OptLogBarrier

        Parameters:
            f: sg::optimization::ScalarFunction &
            fGradient: sg::optimization::ScalarFunctionGradient &
            g: sg::optimization::VectorFunction &
            gGradient: sg::optimization::VectorFunctionGradient &


        1
        """
        this = _pysgpp_swig.new_OptLogBarrier(*args)
        try: self.this.append(this)
        except: self.this = this
    def getObjectiveGradient(self):
        """
        getObjectiveGradient(self) -> OptScalarFunctionGradient

        Parameters:
            self: sg::optimization::optimizer::LogBarrier const *


        1
        """
        return _pysgpp_swig.OptLogBarrier_getObjectiveGradient(self)

    def getInequalityConstraintGradient(self):
        """
        getInequalityConstraintGradient(self) -> OptVectorFunctionGradient

        Parameters:
            self: sg::optimization::optimizer::LogBarrier const *


        1
        """
        return _pysgpp_swig.OptLogBarrier_getInequalityConstraintGradient(self)

    def getTolerance(self):
        """
        getTolerance(self) -> sg::float_t

        Parameters:
            self: sg::optimization::optimizer::LogBarrier const *


        1
        """
        return _pysgpp_swig.OptLogBarrier_getTolerance(self)

    def setTolerance(self, *args):
        """
        setTolerance(self, tolerance)

        Parameters:
            tolerance: sg::float_t


        1
        """
        return _pysgpp_swig.OptLogBarrier_setTolerance(self, *args)

    def getBarrierStartValue(self):
        """
        getBarrierStartValue(self) -> sg::float_t

        Parameters:
            self: sg::optimization::optimizer::LogBarrier const *


        1
        """
        return _pysgpp_swig.OptLogBarrier_getBarrierStartValue(self)

    def setBarrierStartValue(self, *args):
        """
        setBarrierStartValue(self, barrierStartValue)

        Parameters:
            barrierStartValue: sg::float_t


        1
        """
        return _pysgpp_swig.OptLogBarrier_setBarrierStartValue(self, *args)

    def getBarrierDecreaseFactor(self):
        """
        getBarrierDecreaseFactor(self) -> sg::float_t

        Parameters:
            self: sg::optimization::optimizer::LogBarrier const *


        1
        """
        return _pysgpp_swig.OptLogBarrier_getBarrierDecreaseFactor(self)

    def setBarrierDecreaseFactor(self, *args):
        """
        setBarrierDecreaseFactor(self, barrierDecreaseFactor)

        Parameters:
            barrierDecreaseFactor: sg::float_t


        1
        """
        return _pysgpp_swig.OptLogBarrier_setBarrierDecreaseFactor(self, *args)

    def getHistoryOfInnerIterations(self):
        """
        getHistoryOfInnerIterations(self) -> IndexVector

        Parameters:
            self: sg::optimization::optimizer::LogBarrier const *


        1
        """
        return _pysgpp_swig.OptLogBarrier_getHistoryOfInnerIterations(self)

    __swig_destroy__ = _pysgpp_swig.delete_OptLogBarrier
    __del__ = lambda self : None;
OptLogBarrier_swigregister = _pysgpp_swig.OptLogBarrier_swigregister
OptLogBarrier_swigregister(OptLogBarrier)

class OptSquaredPenalty(OptConstrainedOptimizer):
    """1"""
    __swig_setmethods__ = {}
    for _s in [OptConstrainedOptimizer]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptSquaredPenalty, name, value)
    __swig_getmethods__ = {}
    for _s in [OptConstrainedOptimizer]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptSquaredPenalty, name)
    __repr__ = _swig_repr
    DEFAULT_X_TOLERANCE = _pysgpp_swig.OptSquaredPenalty_DEFAULT_X_TOLERANCE
    DEFAULT_CONSTRAINT_TOLERANCE = _pysgpp_swig.OptSquaredPenalty_DEFAULT_CONSTRAINT_TOLERANCE
    DEFAULT_PENALTY_START_VALUE = _pysgpp_swig.OptSquaredPenalty_DEFAULT_PENALTY_START_VALUE
    DEFAULT_PENALTY_INCREASE_FACTOR = _pysgpp_swig.OptSquaredPenalty_DEFAULT_PENALTY_INCREASE_FACTOR
    def __init__(self, *args): 
        """
        SquaredPenalty(f, fGradient, g, gGradient, h, hGradient, maxItCount=DEFAULT_N, xTolerance=DEFAULT_X_TOLERANCE, 
            constraintTolerance=DEFAULT_CONSTRAINT_TOLERANCE, penaltyStartValue=DEFAULT_PENALTY_START_VALUE, 
            penaltyIncreaseFactor=DEFAULT_PENALTY_INCREASE_FACTOR) -> OptSquaredPenalty

        Parameters:
            f: sg::optimization::ScalarFunction &
            fGradient: sg::optimization::ScalarFunctionGradient &
            g: sg::optimization::VectorFunction &
            gGradient: sg::optimization::VectorFunctionGradient &
            h: sg::optimization::VectorFunction &
            hGradient: sg::optimization::VectorFunctionGradient &
            maxItCount: size_t
            xTolerance: sg::float_t
            constraintTolerance: sg::float_t
            penaltyStartValue: sg::float_t
            penaltyIncreaseFactor: sg::float_t

        SquaredPenalty(f, fGradient, g, gGradient, h, hGradient, maxItCount=DEFAULT_N, xTolerance=DEFAULT_X_TOLERANCE, 
            constraintTolerance=DEFAULT_CONSTRAINT_TOLERANCE, penaltyStartValue=DEFAULT_PENALTY_START_VALUE) -> OptSquaredPenalty

        Parameters:
            f: sg::optimization::ScalarFunction &
            fGradient: sg::optimization::ScalarFunctionGradient &
            g: sg::optimization::VectorFunction &
            gGradient: sg::optimization::VectorFunctionGradient &
            h: sg::optimization::VectorFunction &
            hGradient: sg::optimization::VectorFunctionGradient &
            maxItCount: size_t
            xTolerance: sg::float_t
            constraintTolerance: sg::float_t
            penaltyStartValue: sg::float_t

        SquaredPenalty(f, fGradient, g, gGradient, h, hGradient, maxItCount=DEFAULT_N, xTolerance=DEFAULT_X_TOLERANCE, 
            constraintTolerance=DEFAULT_CONSTRAINT_TOLERANCE) -> OptSquaredPenalty

        Parameters:
            f: sg::optimization::ScalarFunction &
            fGradient: sg::optimization::ScalarFunctionGradient &
            g: sg::optimization::VectorFunction &
            gGradient: sg::optimization::VectorFunctionGradient &
            h: sg::optimization::VectorFunction &
            hGradient: sg::optimization::VectorFunctionGradient &
            maxItCount: size_t
            xTolerance: sg::float_t
            constraintTolerance: sg::float_t

        SquaredPenalty(f, fGradient, g, gGradient, h, hGradient, maxItCount=DEFAULT_N, xTolerance=DEFAULT_X_TOLERANCE) -> OptSquaredPenalty

        Parameters:
            f: sg::optimization::ScalarFunction &
            fGradient: sg::optimization::ScalarFunctionGradient &
            g: sg::optimization::VectorFunction &
            gGradient: sg::optimization::VectorFunctionGradient &
            h: sg::optimization::VectorFunction &
            hGradient: sg::optimization::VectorFunctionGradient &
            maxItCount: size_t
            xTolerance: sg::float_t

        SquaredPenalty(f, fGradient, g, gGradient, h, hGradient, maxItCount=DEFAULT_N) -> OptSquaredPenalty

        Parameters:
            f: sg::optimization::ScalarFunction &
            fGradient: sg::optimization::ScalarFunctionGradient &
            g: sg::optimization::VectorFunction &
            gGradient: sg::optimization::VectorFunctionGradient &
            h: sg::optimization::VectorFunction &
            hGradient: sg::optimization::VectorFunctionGradient &
            maxItCount: size_t

        __init__(self, f, fGradient, g, gGradient, h, hGradient) -> OptSquaredPenalty

        Parameters:
            f: sg::optimization::ScalarFunction &
            fGradient: sg::optimization::ScalarFunctionGradient &
            g: sg::optimization::VectorFunction &
            gGradient: sg::optimization::VectorFunctionGradient &
            h: sg::optimization::VectorFunction &
            hGradient: sg::optimization::VectorFunctionGradient &


        1
        """
        this = _pysgpp_swig.new_OptSquaredPenalty(*args)
        try: self.this.append(this)
        except: self.this = this
    def getObjectiveGradient(self):
        """
        getObjectiveGradient(self) -> OptScalarFunctionGradient

        Parameters:
            self: sg::optimization::optimizer::SquaredPenalty const *


        1
        """
        return _pysgpp_swig.OptSquaredPenalty_getObjectiveGradient(self)

    def getInequalityConstraintGradient(self):
        """
        getInequalityConstraintGradient(self) -> OptVectorFunctionGradient

        Parameters:
            self: sg::optimization::optimizer::SquaredPenalty const *


        1
        """
        return _pysgpp_swig.OptSquaredPenalty_getInequalityConstraintGradient(self)

    def getEqualityConstraintGradient(self):
        """
        getEqualityConstraintGradient(self) -> OptVectorFunctionGradient

        Parameters:
            self: sg::optimization::optimizer::SquaredPenalty const *


        1
        """
        return _pysgpp_swig.OptSquaredPenalty_getEqualityConstraintGradient(self)

    def getXTolerance(self):
        """
        getXTolerance(self) -> sg::float_t

        Parameters:
            self: sg::optimization::optimizer::SquaredPenalty const *


        1
        """
        return _pysgpp_swig.OptSquaredPenalty_getXTolerance(self)

    def setXTolerance(self, *args):
        """
        setXTolerance(self, xTolerance)

        Parameters:
            xTolerance: sg::float_t


        1
        """
        return _pysgpp_swig.OptSquaredPenalty_setXTolerance(self, *args)

    def getConstraintTolerance(self):
        """
        getConstraintTolerance(self) -> sg::float_t

        Parameters:
            self: sg::optimization::optimizer::SquaredPenalty const *


        1
        """
        return _pysgpp_swig.OptSquaredPenalty_getConstraintTolerance(self)

    def setConstraintTolerance(self, *args):
        """
        setConstraintTolerance(self, constraintTolerance)

        Parameters:
            constraintTolerance: sg::float_t


        1
        """
        return _pysgpp_swig.OptSquaredPenalty_setConstraintTolerance(self, *args)

    def getPenaltyStartValue(self):
        """
        getPenaltyStartValue(self) -> sg::float_t

        Parameters:
            self: sg::optimization::optimizer::SquaredPenalty const *


        1
        """
        return _pysgpp_swig.OptSquaredPenalty_getPenaltyStartValue(self)

    def setPenaltyStartValue(self, *args):
        """
        setPenaltyStartValue(self, penaltyStartValue)

        Parameters:
            penaltyStartValue: sg::float_t


        1
        """
        return _pysgpp_swig.OptSquaredPenalty_setPenaltyStartValue(self, *args)

    def getPenaltyIncreaseFactor(self):
        """
        getPenaltyIncreaseFactor(self) -> sg::float_t

        Parameters:
            self: sg::optimization::optimizer::SquaredPenalty const *


        1
        """
        return _pysgpp_swig.OptSquaredPenalty_getPenaltyIncreaseFactor(self)

    def setPenaltyIncreaseFactor(self, *args):
        """
        setPenaltyIncreaseFactor(self, penaltyIncreaseFactor)

        Parameters:
            penaltyIncreaseFactor: sg::float_t


        1
        """
        return _pysgpp_swig.OptSquaredPenalty_setPenaltyIncreaseFactor(self, *args)

    def getHistoryOfInnerIterations(self):
        """
        getHistoryOfInnerIterations(self) -> IndexVector

        Parameters:
            self: sg::optimization::optimizer::SquaredPenalty const *


        1
        """
        return _pysgpp_swig.OptSquaredPenalty_getHistoryOfInnerIterations(self)

    __swig_destroy__ = _pysgpp_swig.delete_OptSquaredPenalty
    __del__ = lambda self : None;
OptSquaredPenalty_swigregister = _pysgpp_swig.OptSquaredPenalty_swigregister
OptSquaredPenalty_swigregister(OptSquaredPenalty)


def OptFileIOWriteGrid(*args):
  """
    OptFileIOWriteGrid(filename, gridStorage)

    Parameters:
        filename: std::string const &
        gridStorage: sg::base::GridStorage const &

    OptFileIOWriteGrid(filename, gridStorage, functionValues)

    Parameters:
        filename: std::string const &
        gridStorage: sg::base::GridStorage const &
        functionValues: sg::base::DataVector const &


    1
    """
  return _pysgpp_swig.OptFileIOWriteGrid(*args)

def OptFileIOReadGrid(*args):
  """
    OptFileIOReadGrid(filename, gridStorage)

    Parameters:
        filename: std::string const &
        gridStorage: sg::base::GridStorage &

    OptFileIOReadGrid(filename, gridStorage, functionValues)

    Parameters:
        filename: std::string const &
        gridStorage: sg::base::GridStorage &
        functionValues: sg::base::DataVector &


    1
    """
  return _pysgpp_swig.OptFileIOReadGrid(*args)

def OptMathSchurDecomposition(*args):
  """
    OptMathSchurDecomposition(A, V)

    Parameters:
        A: sg::base::DataMatrix &
        V: sg::base::DataMatrix &


    1
    """
  return _pysgpp_swig.OptMathSchurDecomposition(*args)

def OptMathQRDecomposition(*args):
  """
    OptMathQRDecomposition(A, Q)

    Parameters:
        A: sg::base::DataMatrix &
        Q: sg::base::DataMatrix &


    1
    """
  return _pysgpp_swig.OptMathQRDecomposition(*args)

def OptMathHessenbergForm(*args):
  """
    OptMathHessenbergForm(A, V)

    Parameters:
        A: sg::base::DataMatrix &
        V: sg::base::DataMatrix &


    1
    """
  return _pysgpp_swig.OptMathHessenbergForm(*args)

def OptMathHouseholderTransformation(*args):
  """
    OptMathHouseholderTransformation(A, i, j, Q)

    Parameters:
        A: sg::base::DataMatrix const &
        i: size_t
        j: size_t
        Q: sg::base::DataMatrix &


    1
    """
  return _pysgpp_swig.OptMathHouseholderTransformation(*args)
class OptMutexType(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptMutexType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptMutexType, name)
    __repr__ = _swig_repr
    def lock(self):
        """
        lock(self)

        Parameters:
            self: sg::optimization::MutexType *


        1
        """
        return _pysgpp_swig.OptMutexType_lock(self)

    def unlock(self):
        """
        unlock(self)

        Parameters:
            self: sg::optimization::MutexType *


        1
        """
        return _pysgpp_swig.OptMutexType_unlock(self)

    def __init__(self): 
        """
        __init__(self) -> OptMutexType

        1
        """
        this = _pysgpp_swig.new_OptMutexType()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptMutexType
    __del__ = lambda self : None;
OptMutexType_swigregister = _pysgpp_swig.OptMutexType_swigregister
OptMutexType_swigregister(OptMutexType)


def __lshift__(*args):
  """
    __lshift__(stream, x) -> std::ostream

    Parameters:
        stream: std::ostream &
        x: sg::base::DataVector const &

    __lshift__(stream, x) -> std::ostream &

    Parameters:
        stream: std::ostream &
        x: sg::base::GridIndex const &


    1
    """
  return _pysgpp_swig.__lshift__(*args)
class OptPrinter(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptPrinter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptPrinter, name)
    __repr__ = _swig_repr
    DEFAULT_VERBOSITY = _pysgpp_swig.OptPrinter_DEFAULT_VERBOSITY
    def __init__(self): 
        """
        __init__(self) -> OptPrinter

        1
        """
        this = _pysgpp_swig.new_OptPrinter()
        try: self.this.append(this)
        except: self.this = this
    def printStatusBegin(self, *args):
        """
        printStatusBegin(self, msg)

        Parameters:
            msg: std::string const &


        1
        """
        return _pysgpp_swig.OptPrinter_printStatusBegin(self, *args)

    def printStatusUpdate(self, *args):
        """
        printStatusUpdate(self, msg)

        Parameters:
            msg: std::string const &


        1
        """
        return _pysgpp_swig.OptPrinter_printStatusUpdate(self, *args)

    def printStatusNewLine(self):
        """
        printStatusNewLine(self)

        Parameters:
            self: sg::optimization::Printer *


        1
        """
        return _pysgpp_swig.OptPrinter_printStatusNewLine(self)

    def printStatusIdentation(self):
        """
        printStatusIdentation(self)

        Parameters:
            self: sg::optimization::Printer *


        1
        """
        return _pysgpp_swig.OptPrinter_printStatusIdentation(self)

    def printStatusEnd(self, msg=""):
        """
        printStatusEnd(self, msg="")

        Parameters:
            msg: std::string const &

        printStatusEnd(self)

        Parameters:
            self: sg::optimization::Printer *


        1
        """
        return _pysgpp_swig.OptPrinter_printStatusEnd(self, msg)

    def enableStatusPrinting(self):
        """
        enableStatusPrinting(self)

        Parameters:
            self: sg::optimization::Printer *


        1
        """
        return _pysgpp_swig.OptPrinter_enableStatusPrinting(self)

    def disableStatusPrinting(self):
        """
        disableStatusPrinting(self)

        Parameters:
            self: sg::optimization::Printer *


        1
        """
        return _pysgpp_swig.OptPrinter_disableStatusPrinting(self)

    def isStatusPrintingEnabled(self):
        """
        isStatusPrintingEnabled(self) -> bool

        Parameters:
            self: sg::optimization::Printer *


        1
        """
        return _pysgpp_swig.OptPrinter_isStatusPrintingEnabled(self)

    def getVerbosity(self):
        """
        getVerbosity(self) -> int

        Parameters:
            self: sg::optimization::Printer const *


        1
        """
        return _pysgpp_swig.OptPrinter_getVerbosity(self)

    def setVerbosity(self, *args):
        """
        setVerbosity(self, level)

        Parameters:
            level: int


        1
        """
        return _pysgpp_swig.OptPrinter_setVerbosity(self, *args)

    def getLastDurationSecs(self):
        """
        getLastDurationSecs(self) -> sg::float_t

        Parameters:
            self: sg::optimization::Printer const *


        1
        """
        return _pysgpp_swig.OptPrinter_getLastDurationSecs(self)

    def getMutex(self):
        """
        getMutex(self) -> OptMutexType

        Parameters:
            self: sg::optimization::Printer *


        1
        """
        return _pysgpp_swig.OptPrinter_getMutex(self)

    def getStream(self):
        """
        getStream(self) -> std::ostream *

        Parameters:
            self: sg::optimization::Printer const *


        1
        """
        return _pysgpp_swig.OptPrinter_getStream(self)

    def setStream(self, *args):
        """
        setStream(self, stream)

        Parameters:
            stream: std::ostream *


        1
        """
        return _pysgpp_swig.OptPrinter_setStream(self, *args)

    def getLineLengthLimit(self):
        """
        getLineLengthLimit(self) -> size_t

        Parameters:
            self: sg::optimization::Printer *


        1
        """
        return _pysgpp_swig.OptPrinter_getLineLengthLimit(self)

    def setLineLengthLimit(self, *args):
        """
        setLineLengthLimit(self, lineLengthLimit)

        Parameters:
            lineLengthLimit: size_t


        1
        """
        return _pysgpp_swig.OptPrinter_setLineLengthLimit(self, *args)

    def printIterativeGridGenerator(self, *args):
        """
        printIterativeGridGenerator(self, gridGen)

        Parameters:
            gridGen: sg::optimization::IterativeGridGenerator const &


        1
        """
        return _pysgpp_swig.OptPrinter_printIterativeGridGenerator(self, *args)

    def printSLE(self, *args):
        """
        printSLE(self, system)

        Parameters:
            system: sg::optimization::SLE &


        1
        """
        return _pysgpp_swig.OptPrinter_printSLE(self, *args)

    __swig_destroy__ = _pysgpp_swig.delete_OptPrinter
    __del__ = lambda self : None;
OptPrinter_swigregister = _pysgpp_swig.OptPrinter_swigregister
OptPrinter_swigregister(OptPrinter)


def OptFileIOWriteMatrix(*args):
  """
    OptFileIOWriteMatrix(filename, A)

    Parameters:
        filename: std::string const &
        A: sg::base::DataMatrix &

    OptFileIOWriteMatrix(filename, A, m, n)

    Parameters:
        filename: std::string const &
        A: std::vector< double,std::allocator< double > > const &
        m: size_t
        n: size_t


    1
    """
  return _pysgpp_swig.OptFileIOWriteMatrix(*args)

def OptFileIOReadMatrix(*args):
  """
    OptFileIOReadMatrix(filename, A)

    Parameters:
        filename: std::string const &
        A: sg::base::DataMatrix &

    OptFileIOReadMatrix(filename, A)

    Parameters:
        filename: std::string const &
        A: std::vector< double,std::allocator< double > > &


    1
    """
  return _pysgpp_swig.OptFileIOReadMatrix(*args)

def OptFileIOWriteVector(*args):
  """
    OptFileIOWriteVector(filename, x)

    Parameters:
        filename: std::string const &
        x: sg::base::DataVector &

    OptFileIOWriteVector(filename, x)

    Parameters:
        filename: std::string const &
        x: std::vector< double,std::allocator< double > > const &


    1
    """
  return _pysgpp_swig.OptFileIOWriteVector(*args)

def OptFileIOReadVector(*args):
  """
    OptFileIOReadVector(filename, x)

    Parameters:
        filename: std::string const &
        x: sg::base::DataVector &

    OptFileIOReadVector(filename, x)

    Parameters:
        filename: std::string const &
        x: std::vector< double,std::allocator< double > > &


    1
    """
  return _pysgpp_swig.OptFileIOReadVector(*args)
# This file is compatible with both classic and new-style classes.


