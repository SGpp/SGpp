# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.31
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

import _pysgpp
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x


class PySwigIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PySwigIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PySwigIterator, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _pysgpp.delete_PySwigIterator
    __del__ = lambda self : None;
    def value(*args): return _pysgpp.PySwigIterator_value(*args)
    def incr(*args): return _pysgpp.PySwigIterator_incr(*args)
    def decr(*args): return _pysgpp.PySwigIterator_decr(*args)
    def distance(*args): return _pysgpp.PySwigIterator_distance(*args)
    def equal(*args): return _pysgpp.PySwigIterator_equal(*args)
    def copy(*args): return _pysgpp.PySwigIterator_copy(*args)
    def next(*args): return _pysgpp.PySwigIterator_next(*args)
    def previous(*args): return _pysgpp.PySwigIterator_previous(*args)
    def advance(*args): return _pysgpp.PySwigIterator_advance(*args)
    def __eq__(*args): return _pysgpp.PySwigIterator___eq__(*args)
    def __ne__(*args): return _pysgpp.PySwigIterator___ne__(*args)
    def __iadd__(*args): return _pysgpp.PySwigIterator___iadd__(*args)
    def __isub__(*args): return _pysgpp.PySwigIterator___isub__(*args)
    def __add__(*args): return _pysgpp.PySwigIterator___add__(*args)
    def __sub__(*args): return _pysgpp.PySwigIterator___sub__(*args)
    def __iter__(self): return self
PySwigIterator_swigregister = _pysgpp.PySwigIterator_swigregister
PySwigIterator_swigregister(PySwigIterator)

class unsignedIntArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, unsignedIntArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, unsignedIntArray, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pysgpp.new_unsignedIntArray(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp.delete_unsignedIntArray
    __del__ = lambda self : None;
    def __getitem__(*args): return _pysgpp.unsignedIntArray___getitem__(*args)
    def __setitem__(*args): return _pysgpp.unsignedIntArray___setitem__(*args)
    def cast(*args): return _pysgpp.unsignedIntArray_cast(*args)
    __swig_getmethods__["frompointer"] = lambda x: _pysgpp.unsignedIntArray_frompointer
    if _newclass:frompointer = staticmethod(_pysgpp.unsignedIntArray_frompointer)
unsignedIntArray_swigregister = _pysgpp.unsignedIntArray_swigregister
unsignedIntArray_swigregister(unsignedIntArray)
unsignedIntArray_frompointer = _pysgpp.unsignedIntArray_frompointer

class DoubleVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleVector, name)
    __repr__ = _swig_repr
    def iterator(*args): return _pysgpp.DoubleVector_iterator(*args)
    def __iter__(self): return self.iterator()
    def __nonzero__(*args): return _pysgpp.DoubleVector___nonzero__(*args)
    def __len__(*args): return _pysgpp.DoubleVector___len__(*args)
    def pop(*args): return _pysgpp.DoubleVector_pop(*args)
    def __getslice__(*args): return _pysgpp.DoubleVector___getslice__(*args)
    def __setslice__(*args): return _pysgpp.DoubleVector___setslice__(*args)
    def __delslice__(*args): return _pysgpp.DoubleVector___delslice__(*args)
    def __delitem__(*args): return _pysgpp.DoubleVector___delitem__(*args)
    def __getitem__(*args): return _pysgpp.DoubleVector___getitem__(*args)
    def __setitem__(*args): return _pysgpp.DoubleVector___setitem__(*args)
    def append(*args): return _pysgpp.DoubleVector_append(*args)
    def empty(*args): return _pysgpp.DoubleVector_empty(*args)
    def size(*args): return _pysgpp.DoubleVector_size(*args)
    def clear(*args): return _pysgpp.DoubleVector_clear(*args)
    def swap(*args): return _pysgpp.DoubleVector_swap(*args)
    def get_allocator(*args): return _pysgpp.DoubleVector_get_allocator(*args)
    def begin(*args): return _pysgpp.DoubleVector_begin(*args)
    def end(*args): return _pysgpp.DoubleVector_end(*args)
    def rbegin(*args): return _pysgpp.DoubleVector_rbegin(*args)
    def rend(*args): return _pysgpp.DoubleVector_rend(*args)
    def pop_back(*args): return _pysgpp.DoubleVector_pop_back(*args)
    def erase(*args): return _pysgpp.DoubleVector_erase(*args)
    def __init__(self, *args): 
        this = _pysgpp.new_DoubleVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args): return _pysgpp.DoubleVector_push_back(*args)
    def front(*args): return _pysgpp.DoubleVector_front(*args)
    def back(*args): return _pysgpp.DoubleVector_back(*args)
    def assign(*args): return _pysgpp.DoubleVector_assign(*args)
    def resize(*args): return _pysgpp.DoubleVector_resize(*args)
    def insert(*args): return _pysgpp.DoubleVector_insert(*args)
    def reserve(*args): return _pysgpp.DoubleVector_reserve(*args)
    def capacity(*args): return _pysgpp.DoubleVector_capacity(*args)
    __swig_destroy__ = _pysgpp.delete_DoubleVector
    __del__ = lambda self : None;
DoubleVector_swigregister = _pysgpp.DoubleVector_swigregister
DoubleVector_swigregister(DoubleVector)

class IndexValPair(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IndexValPair, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IndexValPair, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pysgpp.new_IndexValPair(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["first"] = _pysgpp.IndexValPair_first_set
    __swig_getmethods__["first"] = _pysgpp.IndexValPair_first_get
    if _newclass:first = _swig_property(_pysgpp.IndexValPair_first_get, _pysgpp.IndexValPair_first_set)
    __swig_setmethods__["second"] = _pysgpp.IndexValPair_second_set
    __swig_getmethods__["second"] = _pysgpp.IndexValPair_second_get
    if _newclass:second = _swig_property(_pysgpp.IndexValPair_second_get, _pysgpp.IndexValPair_second_set)
    def __len__(self): return 2
    def __repr__(self): return str((self.first, self.second))
    def __getitem__(self, index): 
      if not (index % 2): 
        return self.first
      else:
        return self.second
    def __setitem__(self, index, val):
      if not (index % 2): 
        self.first = val
      else:
        self.second = val
    __swig_destroy__ = _pysgpp.delete_IndexValPair
    __del__ = lambda self : None;
IndexValPair_swigregister = _pysgpp.IndexValPair_swigregister
IndexValPair_swigregister(IndexValPair)

class IndexValVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IndexValVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IndexValVector, name)
    __repr__ = _swig_repr
    def iterator(*args): return _pysgpp.IndexValVector_iterator(*args)
    def __iter__(self): return self.iterator()
    def __nonzero__(*args): return _pysgpp.IndexValVector___nonzero__(*args)
    def __len__(*args): return _pysgpp.IndexValVector___len__(*args)
    def pop(*args): return _pysgpp.IndexValVector_pop(*args)
    def __getslice__(*args): return _pysgpp.IndexValVector___getslice__(*args)
    def __setslice__(*args): return _pysgpp.IndexValVector___setslice__(*args)
    def __delslice__(*args): return _pysgpp.IndexValVector___delslice__(*args)
    def __delitem__(*args): return _pysgpp.IndexValVector___delitem__(*args)
    def __getitem__(*args): return _pysgpp.IndexValVector___getitem__(*args)
    def __setitem__(*args): return _pysgpp.IndexValVector___setitem__(*args)
    def append(*args): return _pysgpp.IndexValVector_append(*args)
    def empty(*args): return _pysgpp.IndexValVector_empty(*args)
    def size(*args): return _pysgpp.IndexValVector_size(*args)
    def clear(*args): return _pysgpp.IndexValVector_clear(*args)
    def swap(*args): return _pysgpp.IndexValVector_swap(*args)
    def get_allocator(*args): return _pysgpp.IndexValVector_get_allocator(*args)
    def begin(*args): return _pysgpp.IndexValVector_begin(*args)
    def end(*args): return _pysgpp.IndexValVector_end(*args)
    def rbegin(*args): return _pysgpp.IndexValVector_rbegin(*args)
    def rend(*args): return _pysgpp.IndexValVector_rend(*args)
    def pop_back(*args): return _pysgpp.IndexValVector_pop_back(*args)
    def erase(*args): return _pysgpp.IndexValVector_erase(*args)
    def __init__(self, *args): 
        this = _pysgpp.new_IndexValVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args): return _pysgpp.IndexValVector_push_back(*args)
    def front(*args): return _pysgpp.IndexValVector_front(*args)
    def back(*args): return _pysgpp.IndexValVector_back(*args)
    def assign(*args): return _pysgpp.IndexValVector_assign(*args)
    def resize(*args): return _pysgpp.IndexValVector_resize(*args)
    def insert(*args): return _pysgpp.IndexValVector_insert(*args)
    def reserve(*args): return _pysgpp.IndexValVector_reserve(*args)
    def capacity(*args): return _pysgpp.IndexValVector_capacity(*args)
    __swig_destroy__ = _pysgpp.delete_IndexValVector
    __del__ = lambda self : None;
IndexValVector_swigregister = _pysgpp.IndexValVector_swigregister
IndexValVector_swigregister(IndexValVector)

SERIALIZATION_VERSION = _pysgpp.SERIALIZATION_VERSION
class DimensionBoundary(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DimensionBoundary, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DimensionBoundary, name)
    __repr__ = _swig_repr
    __swig_setmethods__["leftBoundary"] = _pysgpp.DimensionBoundary_leftBoundary_set
    __swig_getmethods__["leftBoundary"] = _pysgpp.DimensionBoundary_leftBoundary_get
    if _newclass:leftBoundary = _swig_property(_pysgpp.DimensionBoundary_leftBoundary_get, _pysgpp.DimensionBoundary_leftBoundary_set)
    __swig_setmethods__["rightBoundary"] = _pysgpp.DimensionBoundary_rightBoundary_set
    __swig_getmethods__["rightBoundary"] = _pysgpp.DimensionBoundary_rightBoundary_get
    if _newclass:rightBoundary = _swig_property(_pysgpp.DimensionBoundary_rightBoundary_get, _pysgpp.DimensionBoundary_rightBoundary_set)
    __swig_setmethods__["bDirichletLeft"] = _pysgpp.DimensionBoundary_bDirichletLeft_set
    __swig_getmethods__["bDirichletLeft"] = _pysgpp.DimensionBoundary_bDirichletLeft_get
    if _newclass:bDirichletLeft = _swig_property(_pysgpp.DimensionBoundary_bDirichletLeft_get, _pysgpp.DimensionBoundary_bDirichletLeft_set)
    __swig_setmethods__["bDirichletRight"] = _pysgpp.DimensionBoundary_bDirichletRight_set
    __swig_getmethods__["bDirichletRight"] = _pysgpp.DimensionBoundary_bDirichletRight_get
    if _newclass:bDirichletRight = _swig_property(_pysgpp.DimensionBoundary_bDirichletRight_get, _pysgpp.DimensionBoundary_bDirichletRight_set)
    def __init__(self, *args): 
        this = _pysgpp.new_DimensionBoundary(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp.delete_DimensionBoundary
    __del__ = lambda self : None;
DimensionBoundary_swigregister = _pysgpp.DimensionBoundary_swigregister
DimensionBoundary_swigregister(DimensionBoundary)

class BoundingBox(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BoundingBox, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BoundingBox, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pysgpp.new_BoundingBox(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp.delete_BoundingBox
    __del__ = lambda self : None;
    def setBoundary(*args): return _pysgpp.BoundingBox_setBoundary(*args)
    def getBoundary(*args): return _pysgpp.BoundingBox_getBoundary(*args)
    def getDimensions(*args): return _pysgpp.BoundingBox_getDimensions(*args)
    def getIntervalWidth(*args): return _pysgpp.BoundingBox_getIntervalWidth(*args)
    def getIntervalOffset(*args): return _pysgpp.BoundingBox_getIntervalOffset(*args)
    def isTrivialCube(*args): return _pysgpp.BoundingBox_isTrivialCube(*args)
    def hasDirichletBoundaryLeft(*args): return _pysgpp.BoundingBox_hasDirichletBoundaryLeft(*args)
    def hasDirichletBoundaryRight(*args): return _pysgpp.BoundingBox_hasDirichletBoundaryRight(*args)
BoundingBox_swigregister = _pysgpp.BoundingBox_swigregister
BoundingBox_swigregister(BoundingBox)

class DirichletUpdateVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DirichletUpdateVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DirichletUpdateVector, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pysgpp.new_DirichletUpdateVector(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp.delete_DirichletUpdateVector
    __del__ = lambda self : None;
    def applyDirichletConditions(*args): return _pysgpp.DirichletUpdateVector_applyDirichletConditions(*args)
    def setBoundariesToZero(*args): return _pysgpp.DirichletUpdateVector_setBoundariesToZero(*args)
    def multiplyBoundary(*args): return _pysgpp.DirichletUpdateVector_multiplyBoundary(*args)
DirichletUpdateVector_swigregister = _pysgpp.DirichletUpdateVector_swigregister
DirichletUpdateVector_swigregister(DirichletUpdateVector)

class RefinementFunctor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RefinementFunctor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RefinementFunctor, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def __call__(*args): return _pysgpp.RefinementFunctor___call__(*args)
    def start(*args): return _pysgpp.RefinementFunctor_start(*args)
    __swig_destroy__ = _pysgpp.delete_RefinementFunctor
    __del__ = lambda self : None;
RefinementFunctor_swigregister = _pysgpp.RefinementFunctor_swigregister
RefinementFunctor_swigregister(RefinementFunctor)

class GridGenerator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GridGenerator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GridGenerator, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def regular(*args): return _pysgpp.GridGenerator_regular(*args)
    def refine(*args): return _pysgpp.GridGenerator_refine(*args)
    def getNumberOfRefinablePoints(*args): return _pysgpp.GridGenerator_getNumberOfRefinablePoints(*args)
    __swig_destroy__ = _pysgpp.delete_GridGenerator
    __del__ = lambda self : None;
GridGenerator_swigregister = _pysgpp.GridGenerator_swigregister
GridGenerator_swigregister(GridGenerator)

class OperationB(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OperationB, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OperationB, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def mult(*args): return _pysgpp.OperationB_mult(*args)
    def multTranspose(*args): return _pysgpp.OperationB_multTranspose(*args)
    __swig_destroy__ = _pysgpp.delete_OperationB
    __del__ = lambda self : None;
OperationB_swigregister = _pysgpp.OperationB_swigregister
OperationB_swigregister(OperationB)

class OperationMatrix(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OperationMatrix, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OperationMatrix, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def mult(*args): return _pysgpp.OperationMatrix_mult(*args)
    __swig_destroy__ = _pysgpp.delete_OperationMatrix
    __del__ = lambda self : None;
OperationMatrix_swigregister = _pysgpp.OperationMatrix_swigregister
OperationMatrix_swigregister(OperationMatrix)

class OperationODESolverMatrix(OperationMatrix):
    __swig_setmethods__ = {}
    for _s in [OperationMatrix]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OperationODESolverMatrix, name, value)
    __swig_getmethods__ = {}
    for _s in [OperationMatrix]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OperationODESolverMatrix, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def mult(*args): return _pysgpp.OperationODESolverMatrix_mult(*args)
    def generateRHS(*args): return _pysgpp.OperationODESolverMatrix_generateRHS(*args)
    def finishTimestep(*args): return _pysgpp.OperationODESolverMatrix_finishTimestep(*args)
    __swig_destroy__ = _pysgpp.delete_OperationODESolverMatrix
    __del__ = lambda self : None;
OperationODESolverMatrix_swigregister = _pysgpp.OperationODESolverMatrix_swigregister
OperationODESolverMatrix_swigregister(OperationODESolverMatrix)

class OperationEval(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OperationEval, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OperationEval, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def eval(*args): return _pysgpp.OperationEval_eval(*args)
    def test(*args): return _pysgpp.OperationEval_test(*args)
    __swig_destroy__ = _pysgpp.delete_OperationEval
    __del__ = lambda self : None;
OperationEval_swigregister = _pysgpp.OperationEval_swigregister
OperationEval_swigregister(OperationEval)

class OperationHierarchisation(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OperationHierarchisation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OperationHierarchisation, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def doHierarchisation(*args): return _pysgpp.OperationHierarchisation_doHierarchisation(*args)
    def doDehierarchisation(*args): return _pysgpp.OperationHierarchisation_doDehierarchisation(*args)
    __swig_destroy__ = _pysgpp.delete_OperationHierarchisation
    __del__ = lambda self : None;
OperationHierarchisation_swigregister = _pysgpp.OperationHierarchisation_swigregister
OperationHierarchisation_swigregister(OperationHierarchisation)

class HashGenerator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HashGenerator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HashGenerator, name)
    __repr__ = _swig_repr
    def regular(*args): return _pysgpp.HashGenerator_regular(*args)
    def regularWithBoundaries(*args): return _pysgpp.HashGenerator_regularWithBoundaries(*args)
    def __init__(self, *args): 
        this = _pysgpp.new_HashGenerator(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp.delete_HashGenerator
    __del__ = lambda self : None;
HashGenerator_swigregister = _pysgpp.HashGenerator_swigregister
HashGenerator_swigregister(HashGenerator)

class HashRefinement(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HashRefinement, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HashRefinement, name)
    __repr__ = _swig_repr
    def free_refine(*args): return _pysgpp.HashRefinement_free_refine(*args)
    def getNumberOfRefinablePoints(*args): return _pysgpp.HashRefinement_getNumberOfRefinablePoints(*args)
    def __init__(self, *args): 
        this = _pysgpp.new_HashRefinement(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp.delete_HashRefinement
    __del__ = lambda self : None;
HashRefinement_swigregister = _pysgpp.HashRefinement_swigregister
HashRefinement_swigregister(HashRefinement)

class HashRefinementBoundaries(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HashRefinementBoundaries, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HashRefinementBoundaries, name)
    __repr__ = _swig_repr
    def free_refine(*args): return _pysgpp.HashRefinementBoundaries_free_refine(*args)
    def getNumberOfRefinablePoints(*args): return _pysgpp.HashRefinementBoundaries_getNumberOfRefinablePoints(*args)
    def __init__(self, *args): 
        this = _pysgpp.new_HashRefinementBoundaries(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp.delete_HashRefinementBoundaries
    __del__ = lambda self : None;
HashRefinementBoundaries_swigregister = _pysgpp.HashRefinementBoundaries_swigregister
HashRefinementBoundaries_swigregister(HashRefinementBoundaries)

class StandardGridGenerator(GridGenerator):
    __swig_setmethods__ = {}
    for _s in [GridGenerator]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StandardGridGenerator, name, value)
    __swig_getmethods__ = {}
    for _s in [GridGenerator]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, StandardGridGenerator, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pysgpp.new_StandardGridGenerator(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp.delete_StandardGridGenerator
    __del__ = lambda self : None;
    def regular(*args): return _pysgpp.StandardGridGenerator_regular(*args)
    def refine(*args): return _pysgpp.StandardGridGenerator_refine(*args)
    def getNumberOfRefinablePoints(*args): return _pysgpp.StandardGridGenerator_getNumberOfRefinablePoints(*args)
StandardGridGenerator_swigregister = _pysgpp.StandardGridGenerator_swigregister
StandardGridGenerator_swigregister(StandardGridGenerator)

class BoundaryGridGenerator(GridGenerator):
    __swig_setmethods__ = {}
    for _s in [GridGenerator]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BoundaryGridGenerator, name, value)
    __swig_getmethods__ = {}
    for _s in [GridGenerator]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, BoundaryGridGenerator, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pysgpp.new_BoundaryGridGenerator(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp.delete_BoundaryGridGenerator
    __del__ = lambda self : None;
    def regular(*args): return _pysgpp.BoundaryGridGenerator_regular(*args)
    def refine(*args): return _pysgpp.BoundaryGridGenerator_refine(*args)
    def getNumberOfRefinablePoints(*args): return _pysgpp.BoundaryGridGenerator_getNumberOfRefinablePoints(*args)
BoundaryGridGenerator_swigregister = _pysgpp.BoundaryGridGenerator_swigregister
BoundaryGridGenerator_swigregister(BoundaryGridGenerator)

class SurplusRefinementFunctor(RefinementFunctor):
    __swig_setmethods__ = {}
    for _s in [RefinementFunctor]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SurplusRefinementFunctor, name, value)
    __swig_getmethods__ = {}
    for _s in [RefinementFunctor]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SurplusRefinementFunctor, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pysgpp.new_SurplusRefinementFunctor(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp.delete_SurplusRefinementFunctor
    __del__ = lambda self : None;
    def __call__(*args): return _pysgpp.SurplusRefinementFunctor___call__(*args)
    def start(*args): return _pysgpp.SurplusRefinementFunctor_start(*args)
    def getRefinementsNum(*args): return _pysgpp.SurplusRefinementFunctor_getRefinementsNum(*args)
    def getRefinementThreshold(*args): return _pysgpp.SurplusRefinementFunctor_getRefinementThreshold(*args)
SurplusRefinementFunctor_swigregister = _pysgpp.SurplusRefinementFunctor_swigregister
SurplusRefinementFunctor_swigregister(SurplusRefinementFunctor)

class Grid(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Grid, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Grid, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_getmethods__["createLinearGrid"] = lambda x: _pysgpp.Grid_createLinearGrid
    if _newclass:createLinearGrid = staticmethod(_pysgpp.Grid_createLinearGrid)
    __swig_getmethods__["createLinearBoundaryGrid"] = lambda x: _pysgpp.Grid_createLinearBoundaryGrid
    if _newclass:createLinearBoundaryGrid = staticmethod(_pysgpp.Grid_createLinearBoundaryGrid)
    __swig_getmethods__["createLinearTrapezoidBoundaryGrid"] = lambda x: _pysgpp.Grid_createLinearTrapezoidBoundaryGrid
    if _newclass:createLinearTrapezoidBoundaryGrid = staticmethod(_pysgpp.Grid_createLinearTrapezoidBoundaryGrid)
    __swig_getmethods__["createModLinearGrid"] = lambda x: _pysgpp.Grid_createModLinearGrid
    if _newclass:createModLinearGrid = staticmethod(_pysgpp.Grid_createModLinearGrid)
    __swig_getmethods__["createPolyGrid"] = lambda x: _pysgpp.Grid_createPolyGrid
    if _newclass:createPolyGrid = staticmethod(_pysgpp.Grid_createPolyGrid)
    __swig_getmethods__["createModPolyGrid"] = lambda x: _pysgpp.Grid_createModPolyGrid
    if _newclass:createModPolyGrid = staticmethod(_pysgpp.Grid_createModPolyGrid)
    __swig_getmethods__["unserialize"] = lambda x: _pysgpp.Grid_unserialize
    if _newclass:unserialize = staticmethod(_pysgpp.Grid_unserialize)
    __swig_destroy__ = _pysgpp.delete_Grid
    __del__ = lambda self : None;
    def createGridGenerator(*args): return _pysgpp.Grid_createGridGenerator(*args)
    def createOperationB(*args): return _pysgpp.Grid_createOperationB(*args)
    def createOperationEval(*args): return _pysgpp.Grid_createOperationEval(*args)
    def createOperationLaplace(*args): return _pysgpp.Grid_createOperationLaplace(*args)
    def createOperationIdentity(*args): return _pysgpp.Grid_createOperationIdentity(*args)
    def createOperationHierarchisation(*args): return _pysgpp.Grid_createOperationHierarchisation(*args)
    def createOperationUpDownTest(*args): return _pysgpp.Grid_createOperationUpDownTest(*args)
    def createOperationDelta(*args): return _pysgpp.Grid_createOperationDelta(*args)
    def createOperationGamma(*args): return _pysgpp.Grid_createOperationGamma(*args)
    def getStorage(*args): return _pysgpp.Grid_getStorage(*args)
    def getBoundingBox(*args): return _pysgpp.Grid_getBoundingBox(*args)
    def getType(*args): return _pysgpp.Grid_getType(*args)
    def serialize(*args): return _pysgpp.Grid_serialize(*args)
    def refine(*args): return _pysgpp.Grid_refine(*args)
    def eval(*args): return _pysgpp.Grid_eval(*args)
    def insertPoint(*args): return _pysgpp.Grid_insertPoint(*args)
    def getSize(*args): return _pysgpp.Grid_getSize(*args)
    def createMemento(*args): return _pysgpp.Grid_createMemento(*args)
    __swig_getmethods__["setMemento"] = lambda x: _pysgpp.Grid_setMemento
    if _newclass:setMemento = staticmethod(_pysgpp.Grid_setMemento)
Grid_swigregister = _pysgpp.Grid_swigregister
Grid_swigregister(Grid)
Grid_createLinearGrid = _pysgpp.Grid_createLinearGrid
Grid_createLinearBoundaryGrid = _pysgpp.Grid_createLinearBoundaryGrid
Grid_createLinearTrapezoidBoundaryGrid = _pysgpp.Grid_createLinearTrapezoidBoundaryGrid
Grid_createModLinearGrid = _pysgpp.Grid_createModLinearGrid
Grid_createPolyGrid = _pysgpp.Grid_createPolyGrid
Grid_createModPolyGrid = _pysgpp.Grid_createModPolyGrid
Grid_unserialize = _pysgpp.Grid_unserialize
Grid_setMemento = _pysgpp.Grid_setMemento

class DataVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DataVector, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pysgpp.new_DataVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def resize(*args): return _pysgpp.DataVector_resize(*args)
    def addSize(*args): return _pysgpp.DataVector_addSize(*args)
    def addValue(*args): return _pysgpp.DataVector_addValue(*args)
    def setAll(*args): return _pysgpp.DataVector_setAll(*args)
    def copyFrom(*args): return _pysgpp.DataVector_copyFrom(*args)
    def copySmall(*args): return _pysgpp.DataVector_copySmall(*args)
    def assign(*args): return _pysgpp.DataVector_assign(*args)
    def __getitem__(*args): return _pysgpp.DataVector___getitem__(*args)
    def __setitem__(*args): return _pysgpp.DataVector___setitem__(*args)
    def add(*args): return _pysgpp.DataVector_add(*args)
    def sub(*args): return _pysgpp.DataVector_sub(*args)
    def mult(*args): return _pysgpp.DataVector_mult(*args)
    def sqr(*args): return _pysgpp.DataVector_sqr(*args)
    def abs(*args): return _pysgpp.DataVector_abs(*args)
    def sum(*args): return _pysgpp.DataVector_sum(*args)
    def axpy(*args): return _pysgpp.DataVector_axpy(*args)
    def getRow(*args): return _pysgpp.DataVector_getRow(*args)
    def setRow(*args): return _pysgpp.DataVector_setRow(*args)
    def getColumn(*args): return _pysgpp.DataVector_getColumn(*args)
    def setColumn(*args): return _pysgpp.DataVector_setColumn(*args)
    def dotProduct(*args): return _pysgpp.DataVector_dotProduct(*args)
    def getSize(*args): return _pysgpp.DataVector_getSize(*args)
    def getDim(*args): return _pysgpp.DataVector_getDim(*args)
    def __len__(*args): return _pysgpp.DataVector___len__(*args)
    def getUnused(*args): return _pysgpp.DataVector_getUnused(*args)
    def partitionClasses(*args): return _pysgpp.DataVector_partitionClasses(*args)
    def normalizeDimension(*args): return _pysgpp.DataVector_normalizeDimension(*args)
    def min(*args): return _pysgpp.DataVector_min(*args)
    def max(*args): return _pysgpp.DataVector_max(*args)
    def minmax(*args): return _pysgpp.DataVector_minmax(*args)
    def __str__(*args): return _pysgpp.DataVector___str__(*args)
    __swig_destroy__ = _pysgpp.delete_DataVector
    __del__ = lambda self : None;
DataVector_swigregister = _pysgpp.DataVector_swigregister
DataVector_swigregister(DataVector)

class UnidirGradient(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnidirGradient, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UnidirGradient, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _pysgpp.delete_UnidirGradient
    __del__ = lambda self : None;
    def updown(*args): return _pysgpp.UnidirGradient_updown(*args)
UnidirGradient_swigregister = _pysgpp.UnidirGradient_swigregister
UnidirGradient_swigregister(UnidirGradient)

class DMSystemMatrix(OperationMatrix):
    __swig_setmethods__ = {}
    for _s in [OperationMatrix]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DMSystemMatrix, name, value)
    __swig_getmethods__ = {}
    for _s in [OperationMatrix]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DMSystemMatrix, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pysgpp.new_DMSystemMatrix(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp.delete_DMSystemMatrix
    __del__ = lambda self : None;
    def mult(*args): return _pysgpp.DMSystemMatrix_mult(*args)
    def generateb(*args): return _pysgpp.DMSystemMatrix_generateb(*args)
DMSystemMatrix_swigregister = _pysgpp.DMSystemMatrix_swigregister
DMSystemMatrix_swigregister(DMSystemMatrix)

class BlackScholesTimestepMatrix(OperationODESolverMatrix):
    __swig_setmethods__ = {}
    for _s in [OperationODESolverMatrix]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BlackScholesTimestepMatrix, name, value)
    __swig_getmethods__ = {}
    for _s in [OperationODESolverMatrix]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, BlackScholesTimestepMatrix, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pysgpp.new_BlackScholesTimestepMatrix(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp.delete_BlackScholesTimestepMatrix
    __del__ = lambda self : None;
    def mult(*args): return _pysgpp.BlackScholesTimestepMatrix_mult(*args)
    def generateRHS(*args): return _pysgpp.BlackScholesTimestepMatrix_generateRHS(*args)
    def finishTimestep(*args): return _pysgpp.BlackScholesTimestepMatrix_finishTimestep(*args)
    def startTimestep(*args): return _pysgpp.BlackScholesTimestepMatrix_startTimestep(*args)
    def getGrid(*args): return _pysgpp.BlackScholesTimestepMatrix_getGrid(*args)
BlackScholesTimestepMatrix_swigregister = _pysgpp.BlackScholesTimestepMatrix_swigregister
BlackScholesTimestepMatrix_swigregister(BlackScholesTimestepMatrix)

class HeatEquationTimestepMatrix(OperationODESolverMatrix):
    __swig_setmethods__ = {}
    for _s in [OperationODESolverMatrix]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HeatEquationTimestepMatrix, name, value)
    __swig_getmethods__ = {}
    for _s in [OperationODESolverMatrix]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, HeatEquationTimestepMatrix, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pysgpp.new_HeatEquationTimestepMatrix(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp.delete_HeatEquationTimestepMatrix
    __del__ = lambda self : None;
    def mult(*args): return _pysgpp.HeatEquationTimestepMatrix_mult(*args)
    def generateRHS(*args): return _pysgpp.HeatEquationTimestepMatrix_generateRHS(*args)
    def finishTimestep(*args): return _pysgpp.HeatEquationTimestepMatrix_finishTimestep(*args)
    def startTimestep(*args): return _pysgpp.HeatEquationTimestepMatrix_startTimestep(*args)
    def getGrid(*args): return _pysgpp.HeatEquationTimestepMatrix_getGrid(*args)
HeatEquationTimestepMatrix_swigregister = _pysgpp.HeatEquationTimestepMatrix_swigregister
HeatEquationTimestepMatrix_swigregister(HeatEquationTimestepMatrix)

class ScreenOutput(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScreenOutput, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScreenOutput, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pysgpp.new_ScreenOutput(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp.delete_ScreenOutput
    __del__ = lambda self : None;
    def update(*args): return _pysgpp.ScreenOutput_update(*args)
    def writeTitle(*args): return _pysgpp.ScreenOutput_writeTitle(*args)
    def writeHelp(*args): return _pysgpp.ScreenOutput_writeHelp(*args)
    def writeStartSolve(*args): return _pysgpp.ScreenOutput_writeStartSolve(*args)
    def writeEmptyLines(*args): return _pysgpp.ScreenOutput_writeEmptyLines(*args)
ScreenOutput_swigregister = _pysgpp.ScreenOutput_swigregister
ScreenOutput_swigregister(ScreenOutput)

class SGSolver(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SGSolver, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SGSolver, name)
    __repr__ = _swig_repr
    __swig_setmethods__["nIterations"] = _pysgpp.SGSolver_nIterations_set
    __swig_getmethods__["nIterations"] = _pysgpp.SGSolver_nIterations_get
    if _newclass:nIterations = _swig_property(_pysgpp.SGSolver_nIterations_get, _pysgpp.SGSolver_nIterations_set)
    __swig_setmethods__["nMaxIterations"] = _pysgpp.SGSolver_nMaxIterations_set
    __swig_getmethods__["nMaxIterations"] = _pysgpp.SGSolver_nMaxIterations_get
    if _newclass:nMaxIterations = _swig_property(_pysgpp.SGSolver_nMaxIterations_get, _pysgpp.SGSolver_nMaxIterations_set)
    __swig_setmethods__["residuum"] = _pysgpp.SGSolver_residuum_set
    __swig_getmethods__["residuum"] = _pysgpp.SGSolver_residuum_get
    if _newclass:residuum = _swig_property(_pysgpp.SGSolver_residuum_get, _pysgpp.SGSolver_residuum_set)
    __swig_setmethods__["myEpsilon"] = _pysgpp.SGSolver_myEpsilon_set
    __swig_getmethods__["myEpsilon"] = _pysgpp.SGSolver_myEpsilon_get
    if _newclass:myEpsilon = _swig_property(_pysgpp.SGSolver_myEpsilon_get, _pysgpp.SGSolver_myEpsilon_set)
    def __init__(self, *args): 
        this = _pysgpp.new_SGSolver(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp.delete_SGSolver
    __del__ = lambda self : None;
    def getNumberIterations(*args): return _pysgpp.SGSolver_getNumberIterations(*args)
    def getResiduum(*args): return _pysgpp.SGSolver_getResiduum(*args)
    def setMaxIterations(*args): return _pysgpp.SGSolver_setMaxIterations(*args)
    def setEpsilon(*args): return _pysgpp.SGSolver_setEpsilon(*args)
    def getEpsilon(*args): return _pysgpp.SGSolver_getEpsilon(*args)
SGSolver_swigregister = _pysgpp.SGSolver_swigregister
SGSolver_swigregister(SGSolver)

class SLESolver(SGSolver):
    __swig_setmethods__ = {}
    for _s in [SGSolver]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SLESolver, name, value)
    __swig_getmethods__ = {}
    for _s in [SGSolver]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SLESolver, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _pysgpp.delete_SLESolver
    __del__ = lambda self : None;
    def solve(*args): return _pysgpp.SLESolver_solve(*args)
SLESolver_swigregister = _pysgpp.SLESolver_swigregister
SLESolver_swigregister(SLESolver)

class ODESolver(SGSolver):
    __swig_setmethods__ = {}
    for _s in [SGSolver]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ODESolver, name, value)
    __swig_getmethods__ = {}
    for _s in [SGSolver]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ODESolver, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _pysgpp.delete_ODESolver
    __del__ = lambda self : None;
    def solve(*args): return _pysgpp.ODESolver_solve(*args)
ODESolver_swigregister = _pysgpp.ODESolver_swigregister
ODESolver_swigregister(ODESolver)

class ConjugateGradients(SLESolver):
    __swig_setmethods__ = {}
    for _s in [SLESolver]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConjugateGradients, name, value)
    __swig_getmethods__ = {}
    for _s in [SLESolver]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ConjugateGradients, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        if self.__class__ == ConjugateGradients:
            args = (None,) + args
        else:
            args = (self,) + args
        this = _pysgpp.new_ConjugateGradients(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp.delete_ConjugateGradients
    __del__ = lambda self : None;
    def solve(*args): return _pysgpp.ConjugateGradients_solve(*args)
    def starting(*args): return _pysgpp.ConjugateGradients_starting(*args)
    def calcStarting(*args): return _pysgpp.ConjugateGradients_calcStarting(*args)
    def iterationComplete(*args): return _pysgpp.ConjugateGradients_iterationComplete(*args)
    def complete(*args): return _pysgpp.ConjugateGradients_complete(*args)
    def __disown__(self):
        self.this.disown()
        _pysgpp.disown_ConjugateGradients(self)
        return weakref_proxy(self)
ConjugateGradients_swigregister = _pysgpp.ConjugateGradients_swigregister
ConjugateGradients_swigregister(ConjugateGradients)

class BiCGStab(SLESolver):
    __swig_setmethods__ = {}
    for _s in [SLESolver]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BiCGStab, name, value)
    __swig_getmethods__ = {}
    for _s in [SLESolver]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, BiCGStab, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pysgpp.new_BiCGStab(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp.delete_BiCGStab
    __del__ = lambda self : None;
    def solve(*args): return _pysgpp.BiCGStab_solve(*args)
BiCGStab_swigregister = _pysgpp.BiCGStab_swigregister
BiCGStab_swigregister(BiCGStab)

class Euler(ODESolver):
    __swig_setmethods__ = {}
    for _s in [ODESolver]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Euler, name, value)
    __swig_getmethods__ = {}
    for _s in [ODESolver]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Euler, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pysgpp.new_Euler(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp.delete_Euler
    __del__ = lambda self : None;
    def solve(*args): return _pysgpp.Euler_solve(*args)
Euler_swigregister = _pysgpp.Euler_swigregister
Euler_swigregister(Euler)

class CrankNicolson(ODESolver):
    __swig_setmethods__ = {}
    for _s in [ODESolver]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CrankNicolson, name, value)
    __swig_getmethods__ = {}
    for _s in [ODESolver]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CrankNicolson, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pysgpp.new_CrankNicolson(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp.delete_CrankNicolson
    __del__ = lambda self : None;
    def solve(*args): return _pysgpp.CrankNicolson_solve(*args)
CrankNicolson_swigregister = _pysgpp.CrankNicolson_swigregister
CrankNicolson_swigregister(CrankNicolson)

class GridIndex(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GridIndex, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GridIndex, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pysgpp.new_GridIndex(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp.delete_GridIndex
    __del__ = lambda self : None;
    def serialize(*args): return _pysgpp.GridIndex_serialize(*args)
    def dim(*args): return _pysgpp.GridIndex_dim(*args)
    def set(*args): return _pysgpp.GridIndex_set(*args)
    def push(*args): return _pysgpp.GridIndex_push(*args)
    def get(*args): return _pysgpp.GridIndex_get(*args)
    def setLeaf(*args): return _pysgpp.GridIndex_setLeaf(*args)
    def isLeaf(*args): return _pysgpp.GridIndex_isLeaf(*args)
    def abs(*args): return _pysgpp.GridIndex_abs(*args)
    def getCoordBB(*args): return _pysgpp.GridIndex_getCoordBB(*args)
    def getPointer(*args): return _pysgpp.GridIndex_getPointer(*args)
    def rehash(*args): return _pysgpp.GridIndex_rehash(*args)
    def hash(*args): return _pysgpp.GridIndex_hash(*args)
    def equals(*args): return _pysgpp.GridIndex_equals(*args)
    def assign(*args): return _pysgpp.GridIndex_assign(*args)
    def toString(*args): return _pysgpp.GridIndex_toString(*args)
    def getCoords(*args): return _pysgpp.GridIndex_getCoords(*args)
    def getCoordsBB(*args): return _pysgpp.GridIndex_getCoordsBB(*args)
    def getCoordsString(*args): return _pysgpp.GridIndex_getCoordsString(*args)
    def getCoordsStringBB(*args): return _pysgpp.GridIndex_getCoordsStringBB(*args)
    def getLevelSum(*args): return _pysgpp.GridIndex_getLevelSum(*args)
    def getLevelMax(*args): return _pysgpp.GridIndex_getLevelMax(*args)
GridIndex_swigregister = _pysgpp.GridIndex_swigregister
GridIndex_swigregister(GridIndex)

class GridStorage(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GridStorage, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GridStorage, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pysgpp.new_GridStorage(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp.delete_GridStorage
    __del__ = lambda self : None;
    def serialize(*args): return _pysgpp.GridStorage_serialize(*args)
    def toString(*args): return _pysgpp.GridStorage_toString(*args)
    def size(*args): return _pysgpp.GridStorage_size(*args)
    def dim(*args): return _pysgpp.GridStorage_dim(*args)
    def get(*args): return _pysgpp.GridStorage_get(*args)
    def insert(*args): return _pysgpp.GridStorage_insert(*args)
    def create(*args): return _pysgpp.GridStorage_create(*args)
    def destroy(*args): return _pysgpp.GridStorage_destroy(*args)
    def store(*args): return _pysgpp.GridStorage_store(*args)
    def find(*args): return _pysgpp.GridStorage_find(*args)
    def begin(*args): return _pysgpp.GridStorage_begin(*args)
    def has_key(*args): return _pysgpp.GridStorage_has_key(*args)
    def left_levelzero(*args): return _pysgpp.GridStorage_left_levelzero(*args)
    def right_levelzero(*args): return _pysgpp.GridStorage_right_levelzero(*args)
    def left_child(*args): return _pysgpp.GridStorage_left_child(*args)
    def right_child(*args): return _pysgpp.GridStorage_right_child(*args)
    def top(*args): return _pysgpp.GridStorage_top(*args)
    def seq(*args): return _pysgpp.GridStorage_seq(*args)
    def end(*args): return _pysgpp.GridStorage_end(*args)
    def recalcLeafProperty(*args): return _pysgpp.GridStorage_recalcLeafProperty(*args)
    def getBoundingBox(*args): return _pysgpp.GridStorage_getBoundingBox(*args)
GridStorage_swigregister = _pysgpp.GridStorage_swigregister
GridStorage_swigregister(GridStorage)

class SLinearBase(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SLinearBase, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SLinearBase, name)
    __repr__ = _swig_repr
    def eval(*args): return _pysgpp.SLinearBase_eval(*args)
    def __init__(self, *args): 
        this = _pysgpp.new_SLinearBase(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp.delete_SLinearBase
    __del__ = lambda self : None;
SLinearBase_swigregister = _pysgpp.SLinearBase_swigregister
SLinearBase_swigregister(SLinearBase)

class SLinearBoundaryBase(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SLinearBoundaryBase, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SLinearBoundaryBase, name)
    __repr__ = _swig_repr
    def eval(*args): return _pysgpp.SLinearBoundaryBase_eval(*args)
    def __init__(self, *args): 
        this = _pysgpp.new_SLinearBoundaryBase(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp.delete_SLinearBoundaryBase
    __del__ = lambda self : None;
SLinearBoundaryBase_swigregister = _pysgpp.SLinearBoundaryBase_swigregister
SLinearBoundaryBase_swigregister(SLinearBoundaryBase)

class SLinearTrapezoidBoundaryBase(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SLinearTrapezoidBoundaryBase, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SLinearTrapezoidBoundaryBase, name)
    __repr__ = _swig_repr
    def eval(*args): return _pysgpp.SLinearTrapezoidBoundaryBase_eval(*args)
    def __init__(self, *args): 
        this = _pysgpp.new_SLinearTrapezoidBoundaryBase(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp.delete_SLinearTrapezoidBoundaryBase
    __del__ = lambda self : None;
SLinearTrapezoidBoundaryBase_swigregister = _pysgpp.SLinearTrapezoidBoundaryBase_swigregister
SLinearTrapezoidBoundaryBase_swigregister(SLinearTrapezoidBoundaryBase)

class SModLinearBase(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SModLinearBase, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SModLinearBase, name)
    __repr__ = _swig_repr
    def eval(*args): return _pysgpp.SModLinearBase_eval(*args)
    def __init__(self, *args): 
        this = _pysgpp.new_SModLinearBase(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp.delete_SModLinearBase
    __del__ = lambda self : None;
SModLinearBase_swigregister = _pysgpp.SModLinearBase_swigregister
SModLinearBase_swigregister(SModLinearBase)

class SPolyBase(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SPolyBase, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SPolyBase, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pysgpp.new_SPolyBase(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp.delete_SPolyBase
    __del__ = lambda self : None;
    def eval(*args): return _pysgpp.SPolyBase_eval(*args)
SPolyBase_swigregister = _pysgpp.SPolyBase_swigregister
SPolyBase_swigregister(SPolyBase)

class SModPolyBase(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SModPolyBase, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SModPolyBase, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pysgpp.new_SModPolyBase(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp.delete_SModPolyBase
    __del__ = lambda self : None;
    def eval(*args): return _pysgpp.SModPolyBase_eval(*args)
SModPolyBase_swigregister = _pysgpp.SModPolyBase_swigregister
SModPolyBase_swigregister(SModPolyBase)

class SGetAffectedBasisFunctions(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SGetAffectedBasisFunctions, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SGetAffectedBasisFunctions, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pysgpp.new_SGetAffectedBasisFunctions(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp.delete_SGetAffectedBasisFunctions
    __del__ = lambda self : None;
    def __call__(*args): return _pysgpp.SGetAffectedBasisFunctions___call__(*args)
SGetAffectedBasisFunctions_swigregister = _pysgpp.SGetAffectedBasisFunctions_swigregister
SGetAffectedBasisFunctions_swigregister(SGetAffectedBasisFunctions)

class SGetAffectedBasisFunctionsBoundaries(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SGetAffectedBasisFunctionsBoundaries, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SGetAffectedBasisFunctionsBoundaries, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pysgpp.new_SGetAffectedBasisFunctionsBoundaries(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp.delete_SGetAffectedBasisFunctionsBoundaries
    __del__ = lambda self : None;
    def __call__(*args): return _pysgpp.SGetAffectedBasisFunctionsBoundaries___call__(*args)
SGetAffectedBasisFunctionsBoundaries_swigregister = _pysgpp.SGetAffectedBasisFunctionsBoundaries_swigregister
SGetAffectedBasisFunctionsBoundaries_swigregister(SGetAffectedBasisFunctionsBoundaries)

class SGetAffectedBasisFunctionsTrapezoidBoundaries(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SGetAffectedBasisFunctionsTrapezoidBoundaries, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SGetAffectedBasisFunctionsTrapezoidBoundaries, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pysgpp.new_SGetAffectedBasisFunctionsTrapezoidBoundaries(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp.delete_SGetAffectedBasisFunctionsTrapezoidBoundaries
    __del__ = lambda self : None;
    def __call__(*args): return _pysgpp.SGetAffectedBasisFunctionsTrapezoidBoundaries___call__(*args)
SGetAffectedBasisFunctionsTrapezoidBoundaries_swigregister = _pysgpp.SGetAffectedBasisFunctionsTrapezoidBoundaries_swigregister
SGetAffectedBasisFunctionsTrapezoidBoundaries_swigregister(SGetAffectedBasisFunctionsTrapezoidBoundaries)

class SGetAffectedBasisFunctionsBBTrapezoidBoundaries(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SGetAffectedBasisFunctionsBBTrapezoidBoundaries, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SGetAffectedBasisFunctionsBBTrapezoidBoundaries, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pysgpp.new_SGetAffectedBasisFunctionsBBTrapezoidBoundaries(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysgpp.delete_SGetAffectedBasisFunctionsBBTrapezoidBoundaries
    __del__ = lambda self : None;
    def __call__(*args): return _pysgpp.SGetAffectedBasisFunctionsBBTrapezoidBoundaries___call__(*args)
SGetAffectedBasisFunctionsBBTrapezoidBoundaries_swigregister = _pysgpp.SGetAffectedBasisFunctionsBBTrapezoidBoundaries_swigregister
SGetAffectedBasisFunctionsBBTrapezoidBoundaries_swigregister(SGetAffectedBasisFunctionsBBTrapezoidBoundaries)

test_dataset_linear = _pysgpp.test_dataset_linear
test_dataset_linearboundary = _pysgpp.test_dataset_linearboundary
test_dataset_lineartrapezoidboundary = _pysgpp.test_dataset_lineartrapezoidboundary
test_dataset_modlin = _pysgpp.test_dataset_modlin


