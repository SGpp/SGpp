/* ****************************************************************************
 * Copyright (C) 2014 Universitaet Stuttgart                                   *
 * This file is part of the SG++ project. For conditions of distribution and   *
 * use, please see the copyright notice at http://www5.in.tum.de/SGpp          *
 **************************************************************************** */
// @author Andreas Doerr, Marcel Schneider, Matthias Moegerle
#ifndef SAMPLEGENERATOR_HPP
#define SAMPLEGENERATOR_HPP

#include <sgpp/base/datatypes/DataVector.hpp>
#include <sgpp/base/datatypes/DataMatrix.hpp>

namespace sg {
namespace mcm {

/**
 * Base class for all types of MonteCarlo sample generators
 * used in SGPP. A sample generator is used to generate one or
 * multiple n-dimensional sample vectors inside the n-dimensional
 * unit cube.
 */

class SampleGenerator {
public:

	/**
	 * Standard constructor
	 *
	 * @param dimensions number of dimensions used for sample generation
	 */

	SampleGenerator(size_t dimensions) :
			dimensions(dimensions) {
	}
	;

	/**
	 * Abstract Method which has to be implemented by each sample generator
	 * One single sample is generated by this method. The dimensionality of
	 * the parameter has to fit the number of dimensions used in this sample
	 * generator.
	 *
	 * @param sample provide a DataVector to store the generated sample.
	 */

	virtual void getSample(sg::base::DataVector& sample) {
	}
	;

	/**
	 * This method generates a given number of samples. The resulting
	 * samples are written to the parameter DataMatrix. Therefore the
	 * number of cols has to fit the number of dimensions whereas the
	 * number of rows defines the number of generated samples.
	 *
	 * @param samples provide a DataMatrix to hold the generated samples
	 */

	void getSamples(sg::base::DataMatrix& samples);

	/**
	 *
	 * @return current number of dimensions used for sample generation
	 */

	size_t getDimensions();

	/**
	 * Sets the number of dimensions for sample generation to the given value
	 *
	 * @param dimensions new number of dimensions
	 */

	void setDimensions(size_t dimensions);

protected:
	// number of dimensions for sample generation
	size_t dimensions;
};
}
}

#endif /* SAMPLEGENERATOR_HPP */
