# Copyright (C) 2008-today The SG++ Project
# This file is part of the SG++ project. For conditions of distribution and
# use, please see the copyright notice provided with SG++ or at
# sgpp.sparsegrids.org

import Helper
import ModuleHelper

def checkForLibrary(name, flag, headers, libraries):
  if type(headers) is str: headers = [headers]
  if type(libraries) is str: libraries = [libraries]
  if libraries is None: libraries = []

  if (flag not in config.env) or (not config.env[flag]):
    Helper.printInfo("sgpp::combigrid will be compiled without {} (flag not set).".format(name))
  elif not config.CheckHeader(headers, language="C++"):
    Helper.printErrorAndExit("The flag {} was given, but the".format(flag),
                             "necessary headers {} were not found.".format(headers))
  elif (len(libraries) > 0) and (not config.CheckLib(libraries, language="C++")):
    Helper.printErrorAndExit("The flag {} was given, but the".format(flag),
                             "necessary libraries {} were not found.".format(libraries))
  else:
    Helper.printInfo("sgpp::combigrid will be compiled with {}.".format(name))
    additionalDependencies.extend(libraries)
    env["CPPDEFINES"][flag] = "1"

Import("*")

moduleDependencies = ["sgppbase"]
additionalDependencies = []

checkForLibrary("DLIB", "USE_DLIB", "dlib/optimization.h", "dlib")

module = ModuleHelper.Module(moduleDependencies, additionalDependencies)

module.scanSource()
module.buildLibrary()
module.generatePythonDocstrings()
module.buildExamples()
module.buildBoostTests()
module.runBoostTests()
module.runCpplint()
