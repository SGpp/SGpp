# Copyright (C) 2008-today The SG++ Project
# This file is part of the SG++ project. For conditions of distribution and
# use, please see the copyright notice provided with SG++ or at
# sgpp.sparsegrids.org

import os
import sys
import fnmatch

Import('env')
Import('BUILD_DIR')
Import('EXAMPLE_DIR')
Import('PYSGPP_BUILD_PATH')
Import('moduleName')
Import('libraryTargetList')
Import('installTargetList')
Import('exampleTargetList')
Import('headerSourceList')
Import('headerDestList')

#moduleDependencies = ['sgppbase']
moduleDependencies = []
Export('moduleDependencies')

if env['COMPILER'] == 'vcc':
    sys.stderr.write("Error: The combigrid package is not supported on MSVC++.\n")
    sys.exit(1)

libname = "sgpp%s" % moduleName
if env['USE_STATICLIB']:
    libname += "static"
    for i, _ in enumerate(moduleDependencies):
        moduleDependencies[i] = "%sstatic" % moduleDependencies[i]
Export('libname')

objs = []
for currentFolder, subdirNames, fileNames in os.walk("src"):
    if currentFolder.startswith(os.path.join(
          "src", "sgpp", "combigrid", "test")) or \
       currentFolder.startswith(os.path.join(
          "src", "sgpp", "combigrid", "tests")) or \
       currentFolder.startswith(os.path.join(
          "src", "sgpp", "combigrid", "multigridFG", "test")) or \
       currentFolder.startswith(os.path.join(
       "src","sgpp","combigrid_old")):
        continue
    for fileName in fnmatch.filter(fileNames, '*.cpp'):
        sourceFile = os.path.join(currentFolder, fileName)
        objs.append(env.SharedObject(sourceFile))
    if currentFolder != 'src':
      for fileName in fnmatch.filter(fileNames, '*.hpp'):
        headerSourceList.append(os.path.join(moduleName, currentFolder, fileName))
        headerDestList.append(os.path.join(currentFolder, fileName).split(os.sep,1)[1])

if env['USE_STATICLIB']:
    libsuffix = env['LIBSUFFIX']
    lib = env.StaticLibrary(target=libname,
                            source=objs,
                            LIBS=moduleDependencies)
else:
    libsuffix = env['SHLIBSUFFIX']
    lib = env.SharedLibrary(target=libname,
                            source=objs,
                            LIBPATH=BUILD_DIR,
                            LIBS=moduleDependencies)

for lib_str in moduleDependencies:
    if lib_str.startswith("sgpp"):
        env.Depends(lib, os.path.join("#", BUILD_DIR.path,
                                      "%s%s%s" % (env["LIBPREFIX"],
                                                  lib_str,
                                                  libsuffix)))

libInstall = env.Install(BUILD_DIR, lib)

if not env['NO_UNIT_TESTS'] and env['SG_PYTHON']:
  Import('testTargetList')
  py_test_env = env.Clone()
  moduleTest = py_test_env.Test(os.path.join('tests', 'test_%s.py' % moduleName))
  testTargetList.append(moduleTest)

for fileName in os.listdir("examples"):
    if fnmatch.fnmatch(fileName, "*.cpp"):
        example = env.Program(source=os.path.join("examples", fileName),
                              LIBPATH=BUILD_DIR,
                              LIBS=[libname] + moduleDependencies)
        env.Requires(example, libInstall)
        exampleTargetList.append(example)
        
# build unit tests
if env['COMPILE_BOOST_TESTS']:
    Import('boostTestTargetList')
    test_env = env.Clone()
    boostlib = "boost_unit_test_framework"
    test_env.AppendUnique(LIBS=moduleDependencies + [libname, boostlib])

    testObjects = []
    for currentFolder, subdirNames, fileNames in os.walk("tests", topdown=True):
      for fileName in fnmatch.filter(fileNames, '*.cpp'):
        testObjects.append(test_env.SharedObject(os.path.join(currentFolder, fileName)))
    if len(testObjects) > 0:
        fileName = os.path.join("tests", "test_{}_boost".format(moduleName)) + \
                (".exe" if env['PLATFORM'] == 'win32' else '')
        executable = fileName
        test = test_env.Program(executable, testObjects)
        test_env.Requires(test, libInstall)
        if env['RUN_BOOST_TESTS']:
            executable = fileName + "_run"
            testRun = test_env.BoostTest(executable, source=fileName)
            boostTestTargetList.append(testRun)

libraryTargetList.append(lib)
installTargetList.append(libInstall)
