################################ 

JUNE 20th 2014
I) TEMPLETIZATION OF THE COMBIGRID PACKAGE
 - packages to templetize:	
	1) domain - 
	2) fullgird + 
	3) multigridFG - 
	4) operation -
	5) plotter + 
	6) utils + 
	7) converter -
	8) comnischeme +
	9) combikernel - 
	10) basis function - 
	
	ABSTRACTCOMBISCHEME TEMPLETIZATION step by step:
	i) two template parameters - one for datatype of the grid _FGTp, another for the coefficients _CFTp
	 the eval functions will return a data of type _CFTp. This assumes that the coefficient types _CFTp will ALWAYS 
	 be the more general, type. Where generality could  be specified by wether or not the type _CFTp precedes 
	 the type _FGtp in the current implementation.... 
	 
Implementation specific type precedence for std: datatypes can be probed using the std <typeinfo> header as follows:
	
	
------------------------------------------ CODE EXCERPT -------------------------------------------------------------------
#include <iostream>
#include <typeinfo>
#include <complex>

using namespace std;

template<typename tp1, typename tp2>
void check_type_precedence(){

        if (typeid(tp1) == typeid(tp2))
        {
                cout<<"comparing same types: " << typeid(tp1).name() << " = " <<  typeid(tp2).name() << " \n";
                return;
        }


        if(typeid(tp1).before(typeid(tp2)))
                cout<< typeid(tp1).name() << " has higher precedence than " << typeid(tp2).name() << " \n";
        else
                cout<< typeid(tp2).name() << " has higher precedence than " << typeid(tp1).name() << " \n";

}

iint main(void){


        cout<<"\nsame type comparison: \n";
        check_type_precedence<double, double>();
        check_type_precedence<float,float>();
        check_type_precedence<int,int>();
        cout<<"different types comparison\n";
        check_type_precedence< complex<double>,complex<float> > ();
        check_type_precedence< complex<double> ,complex<int> >();
        check_type_precedence< complex<float>, complex<int> >();
        check_type_precedence<double,float>();
        check_type_precedence<double,int>();
        check_type_precedence<float,int>();
        check_type_precedence<complex<double>,float>();
        check_type_precedence<complex<float>,double>();
        check_type_precedence<complex<int>,double>();
        check_type_precedence<complex<int>,int>();
        return 0;


}
~                                                                                                                                                                                                                                                                               
~                                                                                                                                                                                                                                                                               
~                                                                                                                                                                                                                                                                               
~                                                                                                                                                                                                                                                                               
~                                                                                                                                                                                                                                                                               
~                                                 
	OUTPUT:
	same type comparison: 
		comparing same types: d = d 
		comparing same types: f = f 
		comparing same types: i = i 
	different types comparison
		St7complexIdE has higher precedence than St7complexIfE 
		St7complexIdE has higher precedence than St7complexIiE 
		St7complexIfE has higher precedence than St7complexIiE 
		d has higher precedence than f 
		d has higher precedence than i 
		f has higher precedence than i 
		St7complexIdE has higher precedence than f 
		St7complexIfE has higher precedence than d 
		St7complexIiE has higher precedence than d 
		St7complexIiE has higher precedence than i 


	                                        




------------------------------------------END OF CODE EXCERPT--------------------------------------------------------------	

status - DONE

II) Encapsulation of fullgrid, fullgrid levels vector and fullgrid coefficients into a separate class CombiFullGrid! 

status - DONE

III) Move the std::vector<int> _levels variable from the combigrid to the combischeme 
	- refactor relevant constructors & operations 	--DONE
	- add combischeme constructor new CombiScheme(levels);  --DONE


status - DONE

	
IV) implement the reinitialize function inside combischeme... 

status - DONE PRELIMINARY.... 


TODO's PETZ ! DEADLINE June 30 2014

1) remove 2nd template parameter
STATUS - DONE 

2) add the combiarbitraryscheme implementation
STATUS - DONE! - check Adaptive Sparse Grids paper by Hegland 2003

3) implement correctly the "re_initCombiGrid" function as to check which grids to activate/deactivate
STATUS - DONE 

4) rewrite documentation, refactor code, fix namings
STATUS - Partly Done 

5) Check Compilation/build with swig
STATUS - DONE 


TODO --- 
1) Add Quadrature Rules implementation following.. (long term)
Numerical Integration Using Sparsegrids  - M.Griebel
2) Couple Combigrid code to SGPP.



TODO:
1) put levels_truncation_vector into the scheme constructor and remove any trace of it from the combigrid. 
2) Implement the constructor of the combiarbitrary scheme to take vector<vector<int>> _level_vectors as input.... !!! 
n remove the existing CombiArbitraryScheme(std::vector<int> levels);

3) Next Meeting Tuesday 16:30 at Christoph's office! 


combigrid package restructuring completed. 
-templetization of the following classes has been done: 
	--combigrid (contains the combigrid and its different implementations. Combigrid is in general treated as data container ONLY)
		-Combigrid.hpp - (parent abstract class for all different types of combigrids)
		-SerialCombigrid.hpp & SerialCombiGrid.cpp (the standard and up to now the only implementation of CombiGrid)
	--combischeme (here implement the application logic, i.e. initialization of the combigrid levels, evaluation of the combigrid etc.)
		-AbstractCombiScheme.hpp (an abstract base class which defines the interface all inheriting combination schemes should satisfy)
		-CombiArbitraryScheme.hpp , CombiArbitraryScheme.cpp (implementation based on CombiLevelVector.hpp computations)
		-CombiS_CT.cpp, CombiS_CT.hpp (standard combination technique implementation)
		-CombiTS_CT.cpp, CombiTS_CT.hpp (implementation of two scale combination technique)
	--fullgrid
		-CombiFullGrid.hpp (defines ,as a template, and implements the Fullgrid class with all relevant operations such as eval function, or get coordinate "i" etc. )	
		-GridContainer.hpp (defines, as a template, a datacontainer encapsulating a fullgrid, levels vector and coefficients as one entity. Useful for better data handling, as usually the 3 seperate data types are always used together throughout the combigrid code). 
	--plotter
		-GridPlotter.hpp (plotting functions. I didnt change anything here. I just templetized the relevant classes)
	--tests
		-petzko_main.cpp (a test class that demonstrates usage and validity of the changes I have made so far)		

TODO: July 23rd 2014: 
	i)  Implement integrate function without explicit knowledge of the integrand funciton . 
	ii) implement the software engineering design in sgpp for operations operating on a grid
	iii) refactor current implementation to use fullgrids getindexvector funcitons. 
	iv) implement has boundary chekc during fullgrid evaluation. 
	
	v) try clenshaw curtis formula implementation. 


TODO: August 11 2014 

	i) reformulate the integrate function to directly take the stored function values (in case all grids are aligned) 
	from the fullgrid without doing "eval" (i.e. bi,tri ... d-linear interpolation) 
		- DONE 
		
	ii) similar to clenshaw-curtis rule, precompute the trapezoidal rule coefs and 
	store them in the quadrature... 
		DONE
		
	iii) work on GAUSS - PATTERSON rule for up to 513 grid points...
	
	iv) implement integration over semi finite intervals... DONE 
	
	v) fix python compilation to work with new quadrature classes ( pysgpp/pysgpp.i <- add classnames )  DONE
	
	
	
 TODO: October 10 2014 / UPDATED DURING JAN 2015
  ___________________________________________________________________________________________________________________________________
 |	
 |	i) fix Basu Quadrature to new convention ( Int {a} to {infinity} g(x) dx instead of the conventione assumed
 |	in the paper!  DONE
 |
 | 	ii) FIX ALL QUADRATURES when setting the interpolate flag! DONE 
 |
 |	iv) Check if combination technique ( eval function) is working on stretched grids ...DONE
 |	
 | 	v) Consider how one can use different stretching along different dimensions of the combiGrid / not the fullgrid HORRIBLE! 
 | 		- implement a "heterogeneous quadrature rule" integrating along different directions with different rules. 
 | 		... DONE
 | 	
 | 	vi) add the convergence results in the presentation IN PROGRESS
 | 	
 | 	vii) Documentation !!! commented example files and doxygen generated docu. IN Progress
 V	
	vii)  **** back-log  reimplement eval function/ prolongation reduction operations etc... "maybe a paper on the topic..." 
	check python's ZOOM procedure... - in progress - see FullGrid<type>.transform_grid() function...  DONE

	viii) **** back-log *** INVESTIGATE the reason for slow parallel performance 
 	---------------------------------
 	i) Complete the previous ToDo's
 	
 	ii) to ensure compliance with the AbstractStrecthingMaker interface, fix the TanStretching and Atanspecialstretching 	
 	implementations so that the get1Dstretching() method returns the correct jacobian --- aghh... 
  	
 	iii) ensure full Sg++ build with python and java support, with test etc... given the newly added source file StretchingFactory.cpp
		DONE WITH FLAG NO_UNIT_TESTS=1
		
	iv) Consider how to utilize the nested structures of all stretchings up to now so that the transform_grid function does not interpolate  
	unnecessarily DONE... 
	
		- idea : example with equidistant stretching with level l (G_l) ->  transform to equidistant stretching of level l+k (G_{l+k})
		
		1) forall e in G_l & G_{l+k} 
			F_{l+k}(e) = F_l(e) 
			
		2) forall e in G_{l+k}\G_l 
			F_{l+k}(e) = sum_{j=0}{N_l} c(j) F_{l}(j)
 	
 	
 	
 	
 	
 	
 	
 	
 	
 	
 	
 	
 	
	
