/*
 * GaussPattersonQuadrature.cpp
 *
 *  Created on: 23 Aug 2014
 *      Author: kenny
 */

#include <sgpp/combigrid/quadratures/GaussPattersonQuadrature.hpp>

template<typename _Tp>
combigrid::GaussPattersonQuadrature<_Tp>::GaussPattersonQuadrature(
		int max_lvl) {

	if (max_lvl >= 1 && max_lvl <= 9) // 5 pts?
		MAX_LEVELS = max_lvl;
	else {
		COMBIGRID_OUT_WRN(
				"\n"
						" If your max level is not from 9 smaller and 2 GREATER,\n"
						"your chances to get a meaningful numerical result will grow FAINTER\n"
						"Hence I take matters in my own HANDS,\n"
						"and try to fix your ARROGANCE\n"
						"by simply setting max_levels to DEFAULT (MAX_LEVELS = 9),\n"
						"so that your wrong numerical result does not become my FAULT.\n"
						"\n"
						"Best,\nyour hard working CPU! \n", __FILE__, __LINE__)

		MAX_LEVELS = 9;
	}

	coefficients = (_Tp **) malloc(sizeof(_Tp*) * MAX_LEVELS);
#pragma omp parallel for schedule(dynamic,1)
	for (int d = 1; d <= MAX_LEVELS; d++) {
		/**
		 * allocate memory and pre-calculate values of levels 1,2... MAX_LEVELS's coefs
		 *	we start from level 1, up to level MAX_LEVELS ...
		 * */
		GaussPattersonQuadrature<_Tp>::calculateCoefficients(d,
				coefficients + d - 1);
	}
}

// destructor-che
template<typename _Tp>
combigrid::GaussPattersonQuadrature<_Tp>::~GaussPattersonQuadrature() {

	// deallocate memory for clenshaw quadrature...
	// starting from level 1 2... until max_levels..
	for (int d = 0; d < MAX_LEVELS; d++)
		if (coefficients[d] != NULL) {
			free(coefficients[d]);
			coefficients[d] = NULL;
		}
	free(coefficients);
}

template<typename _Tp>
_Tp combigrid::GaussPattersonQuadrature<_Tp>::integrate(CombiGrid<_Tp>* grids,
		_Tp (*f)(std::vector<double>)) {

	_Tp result = 0.0f;
	int dim = grids->getDim();
	/**
	 * this flag (badstretching) specifies if the gauss_full_grid function should
	 * interpolate the abscissas it uses for computing the integral or
	 * simply probe the data stored in the underlying full grid.
	 *
	 *	Interpolate will be true if the combigrids' stretching type IS NOT LEGENDRE, as required by the
	 *	quadrature rule.
	 */
	bool badstretching = false;
	if (grids->getStretchingType() != LEGENDRE) {
		COMBIGRID_OUT_WRN("\n You try to fool me yet AGAIN,\n"
				"you force me count without a PLAN,\n"
				"So ... PLEASE,\n"
				"for my internal PEACE,\n"
				"think about the grid-stretching you INSIST ON,\n"
				"IS it CHEBYSHEV/ TANGENTIAL?LEGENDRE or EQUIDISTANT?\n"
				"For LEGENDRE stretching, I PREFER\n"
				"so that the numerics I could CONQUER!\n"
				"\n But, hell, I will do whatever you would LIKE,\n"
				"I will crunch the numbers with DISLIKE,\n"
				"but all inaccuracies I CREATE,\n"
				"are not my fault - it is thy FATE!\n"
				"!Your hard working CPU!\n", __FILE__, __LINE__)
		badstretching = true;
	}

	int nr_fullgrids = grids->getNrFullGrids();
	// all threads check if error has occured before continuing with the computation...
	int error_flag = 0;

#pragma omp parallel shared(error_flag)
	{
#pragma omp for reduction(+:result) schedule(dynamic,1)
		for (int j = 0; j < nr_fullgrids; j++) {
			if (error_flag > 0)
				continue;
			// as break statements are not allowed with OpenMP for loops
			// if error has occured simply skip through all the iterations until you reach the end...
			if (grids->getFullGrid(j)->isActive()) {
				if (grids->getFullGrid(j)->getMaxLevel() > MAX_LEVELS) {

					COMBIGRID_OUT_ERR(
							"GAUSS-PATTERSON QUADRATURE FAILED: Active full-grid has level greater than the currently "
									"supported MAX level. ABORTING", __FILE__,
							__LINE__);
					error_flag++;
				} else
					result += (_Tp) grids->getCoef(j)
							* gauss_patterson_fullGrid(dim, f,
									grids->getFullGrid(j), badstretching);
			}
		}
	}
	if (error_flag > 0)
		result = 0.0;
	return result;

}

template<typename _Tp>
_Tp combigrid::GaussPattersonQuadrature<_Tp>::gauss_patterson_fullGrid(int dim,
		_Tp (*f)(std::vector<double>), FGridContainer<_Tp>* gridContainer,
		bool badstretching) {

	_Tp result = 0.0f;
	FullGrid<_Tp>* grid = gridContainer->fg(); // obtain a pointer to the fullgrid
	std::vector<_Tp> f_values;
	CombiLegendreStretching stretching = CombiLegendreStretching();
	AbstractQuadratureRule<_Tp>::getGridValues(grid, badstretching, &stretching,
			f_values, f);

	/***
	 * At this point of the evaluation we already have the functional values evaluated at, hopefully,
	 * the correct abscissas, as well as multiplied by the derivative of the underlying coordinate transformation...
	 *
	 *	Now, all we need to complete the integration is simply multiply the functional values by the weights
	 *	and sum the results up...
	 */
	unsigned int num_elem = grid->getNrElements(); // get the total number of grid points
	std::vector<int> indices(dim, 0);
	std::vector<int> levels = gridContainer->getFGLevels();

	for (unsigned int j = 0; j < num_elem; j++) {
		/// obtain the vector indices to calculate the coefficient...
		grid->getVectorIndex(j, indices);
		_Tp W_j = 1;
		for (unsigned int d = 0; d < indices.size(); d++) {
			int idx_d = indices[d];
			int level = levels[d];
			W_j *= coefficients[level - 1][idx_d];
		}
		// we need to do explicit casting here ... or do we?!
		result += ((_Tp) W_j) * f_values[j];
	}
	return result;

}

template<typename _Tp>
void combigrid::GaussPattersonQuadrature<_Tp>::calculateCoefficients(
		int in_level, _Tp** out_coefs) {

	int N = powerOfTwo[in_level] + 1;
	*out_coefs = (_Tp*) malloc(N * sizeof(_Tp));

	if (in_level == 1) {
		double tmp_coefs[3] = { 0.0, 2.0, 0.0 };
		for (int d = 0; d < N; d++)
			(*out_coefs)[d] = (_Tp) tmp_coefs[d];
	}

	if (in_level == 2) {
		double tmp_coefs[5] = { 0.0, 0.555555555555555555556E+00,
				0.888888888888888888889E+00, 0.555555555555555555556E+00, 0.0 };
		for (int d = 0; d < N; d++)
			(*out_coefs)[d] = (_Tp) tmp_coefs[d];

	}
	if (in_level == 3) {
		double tmp_coefs[9] = { 0.0, 0.104656226026467265194E+00,
				0.268488089868333440729E+00, 0.401397414775962222905E+00,
				0.450916538658474142345E+00, 0.401397414775962222905E+00,
				0.268488089868333440729E+00, 0.104656226026467265194E+00, 0.0 };
		for (int d = 0; d < N; d++)
			(*out_coefs)[d] = (_Tp) tmp_coefs[d];

	}

	if (in_level == 4) {
		double tmp_coefs[17] =
				{ 0.0, 0.0170017196299402603390E+00,
						0.0516032829970797396969E+00,
						0.0929271953151245376859E+00,
						0.134415255243784220360E+00,
						0.171511909136391380787E+00,
						0.200628529376989021034E+00,
						0.219156858401587496404E+00,
						0.225510499798206687386E+00,
						0.219156858401587496404E+00,
						0.200628529376989021034E+00,
						0.171511909136391380787E+00,
						0.134415255243784220360E+00,
						0.0929271953151245376859E+00,
						0.0516032829970797396969E+00,
						0.0170017196299402603390E+00, 0.0 };
		for (int d = 0; d < N; d++)
			(*out_coefs)[d] = (_Tp) tmp_coefs[d];
	}

	if (in_level == 5) {
		double tmp_coefs[33] = { 0.0, 0.00254478079156187441540E+00,
				0.00843456573932110624631E+00, 0.0164460498543878109338E+00,
				0.0258075980961766535646E+00, 0.0359571033071293220968E+00,
				0.0464628932617579865414E+00, 0.0569795094941233574122E+00,
				0.0672077542959907035404E+00, 0.0768796204990035310427E+00,
				0.0857559200499903511542E+00, 0.0936271099812644736167E+00,
				0.100314278611795578771E+00, 0.105669893580234809744E+00,
				0.109578421055924638237E+00, 0.111956873020953456880E+00,
				0.112755256720768691607E+00, 0.111956873020953456880E+00,
				0.109578421055924638237E+00, 0.105669893580234809744E+00,
				0.100314278611795578771E+00, 0.0936271099812644736167E+00,
				0.0857559200499903511542E+00, 0.0768796204990035310427E+00,
				0.0672077542959907035404E+00, 0.0569795094941233574122E+00,
				0.0464628932617579865414E+00, 0.0359571033071293220968E+00,
				0.0258075980961766535646E+00, 0.0164460498543878109338E+00,
				0.00843456573932110624631E+00, 0.00254478079156187441540E+00,
				0.0 };
		for (int d = 0; d < N; d++)
			(*out_coefs)[d] = (_Tp) tmp_coefs[d];
	}

	if (in_level == 6) {
		double tmp_coefs[65] = { 0.0, 0.000363221481845530659694E+00,
				0.00126515655623006801137E+00, 0.00257904979468568827243E+00,
				0.00421763044155885483908E+00, 0.00611550682211724633968E+00,
				0.00822300795723592966926E+00, 0.0104982469096213218983E+00,
				0.0129038001003512656260E+00, 0.0154067504665594978021E+00,
				0.0179785515681282703329E+00, 0.0205942339159127111492E+00,
				0.0232314466399102694433E+00, 0.0258696793272147469108E+00,
				0.0284897547458335486125E+00, 0.0310735511116879648799E+00,
				0.0336038771482077305417E+00, 0.0360644327807825726401E+00,
				0.0384398102494555320386E+00, 0.0407155101169443189339E+00,
				0.0428779600250077344929E+00, 0.0449145316536321974143E+00,
				0.0468135549906280124026E+00, 0.0485643304066731987159E+00,
				0.0501571393058995374137E+00, 0.0515832539520484587768E+00,
				0.0528349467901165198621E+00, 0.0539054993352660639269E+00,
				0.0547892105279628650322E+00, 0.0554814043565593639878E+00,
				0.0559784365104763194076E+00, 0.0562776998312543012726E+00,
				0.0563776283603847173877E+00, 0.0562776998312543012726E+00,
				0.0559784365104763194076E+00, 0.0554814043565593639878E+00,
				0.0547892105279628650322E+00, 0.0539054993352660639269E+00,
				0.0528349467901165198621E+00, 0.0515832539520484587768E+00,
				0.0501571393058995374137E+00, 0.0485643304066731987159E+00,
				0.0468135549906280124026E+00, 0.0449145316536321974143E+00,
				0.0428779600250077344929E+00, 0.0407155101169443189339E+00,
				0.0384398102494555320386E+00, 0.0360644327807825726401E+00,
				0.0336038771482077305417E+00, 0.0310735511116879648799E+00,
				0.0284897547458335486125E+00, 0.0258696793272147469108E+00,
				0.0232314466399102694433E+00, 0.0205942339159127111492E+00,
				0.0179785515681282703329E+00, 0.0154067504665594978021E+00,
				0.0129038001003512656260E+00, 0.0104982469096213218983E+00,
				0.00822300795723592966926E+00, 0.00611550682211724633968E+00,
				0.00421763044155885483908E+00, 0.00257904979468568827243E+00,
				0.00126515655623006801137E+00, 0.000363221481845530659694E+00,
				0.0 };
		for (int d = 0; d < N; d++)
			(*out_coefs)[d] = (_Tp) tmp_coefs[d];
	}

	if (in_level == 7) {
		double tmp_coefs[129] = { 0.0, 0.0000505360952078625176247E+00,
				0.000180739564445388357820E+00, 0.000377746646326984660274E+00,
				0.000632607319362633544219E+00, 0.000938369848542381500794E+00,
				0.00128952408261041739210E+00, 0.00168114286542146990631E+00,
				0.00210881524572663287933E+00, 0.00256876494379402037313E+00,
				0.00305775341017553113613E+00, 0.00357289278351729964938E+00,
				0.00411150397865469304717E+00, 0.00467105037211432174741E+00,
				0.00524912345480885912513E+00, 0.00584344987583563950756E+00,
				0.00645190005017573692280E+00, 0.00707248999543355546805E+00,
				0.00770337523327974184817E+00, 0.00834283875396815770558E+00,
				0.00898927578406413572328E+00, 0.00964117772970253669530E+00,
				0.0102971169579563555237E+00, 0.0109557333878379016480E+00,
				0.0116157233199551347270E+00, 0.0122758305600827700870E+00,
				0.0129348396636073734547E+00, 0.0135915710097655467896E+00,
				0.0142448773729167743063E+00, 0.0148936416648151820348E+00,
				0.0155367755558439824399E+00, 0.0161732187295777199419E+00,
				0.0168019385741038652709E+00, 0.0174219301594641737472E+00,
				0.0180322163903912863201E+00, 0.0186318482561387901863E+00,
				0.0192199051247277660193E+00, 0.0197954950480974994880E+00,
				0.0203577550584721594669E+00, 0.0209058514458120238522E+00,
				0.0214389800125038672465E+00, 0.0219563663053178249393E+00,
				0.0224572658268160987071E+00, 0.0229409642293877487608E+00,
				0.0234067774953140062013E+00, 0.0238540521060385400804E+00,
				0.0242821652033365993580E+00, 0.0246905247444876769091E+00,
				0.0250785696529497687068E+00, 0.0254457699654647658126E+00,
				0.0257916269760242293884E+00, 0.0261156733767060976805E+00,
				0.0264174733950582599310E+00, 0.0266966229274503599062E+00,
				0.0269527496676330319634E+00, 0.0271855132296247918192E+00,
				0.0273946052639814325161E+00, 0.0275797495664818730349E+00,
				0.0277407021782796819939E+00, 0.0278772514766137016085E+00,
				0.0279892182552381597038E+00, 0.0280764557938172466068E+00,
				0.0281388499156271506363E+00, 0.0281763190330166021307E+00,
				0.0281888141801923586938E+00, 0.0281763190330166021307E+00,
				0.0281388499156271506363E+00, 0.0280764557938172466068E+00,
				0.0279892182552381597038E+00, 0.0278772514766137016085E+00,
				0.0277407021782796819939E+00, 0.0275797495664818730349E+00,
				0.0273946052639814325161E+00, 0.0271855132296247918192E+00,
				0.0269527496676330319634E+00, 0.0266966229274503599062E+00,
				0.0264174733950582599310E+00, 0.0261156733767060976805E+00,
				0.0257916269760242293884E+00, 0.0254457699654647658126E+00,
				0.0250785696529497687068E+00, 0.0246905247444876769091E+00,
				0.0242821652033365993580E+00, 0.0238540521060385400804E+00,
				0.0234067774953140062013E+00, 0.0229409642293877487608E+00,
				0.0224572658268160987071E+00, 0.0219563663053178249393E+00,
				0.0214389800125038672465E+00, 0.0209058514458120238522E+00,
				0.0203577550584721594669E+00, 0.0197954950480974994880E+00,
				0.0192199051247277660193E+00, 0.0186318482561387901863E+00,
				0.0180322163903912863201E+00, 0.0174219301594641737472E+00,
				0.0168019385741038652709E+00, 0.0161732187295777199419E+00,
				0.0155367755558439824399E+00, 0.0148936416648151820348E+00,
				0.0142448773729167743063E+00, 0.0135915710097655467896E+00,
				0.0129348396636073734547E+00, 0.0122758305600827700870E+00,
				0.0116157233199551347270E+00, 0.0109557333878379016480E+00,
				0.0102971169579563555237E+00, 0.00964117772970253669530E+00,
				0.00898927578406413572328E+00, 0.00834283875396815770558E+00,
				0.00770337523327974184817E+00, 0.00707248999543355546805E+00,
				0.00645190005017573692280E+00, 0.00584344987583563950756E+00,
				0.00524912345480885912513E+00, 0.00467105037211432174741E+00,
				0.00411150397865469304717E+00, 0.00357289278351729964938E+00,
				0.00305775341017553113613E+00, 0.00256876494379402037313E+00,
				0.00210881524572663287933E+00, 0.00168114286542146990631E+00,
				0.00128952408261041739210E+00, 0.000938369848542381500794E+00,
				0.000632607319362633544219E+00, 0.000377746646326984660274E+00,
				0.000180739564445388357820E+00, 0.0000505360952078625176247E+00,
				0.0 };
		for (int d = 0; d < N; d++)
			(*out_coefs)[d] = (_Tp) tmp_coefs[d];
	}

	if (in_level == 8) {
		double tmp_coefs[257] = { 0.0, 0.69379364324108267170E-05,
				0.25157870384280661489E-04, 0.53275293669780613125E-04,
				0.90372734658751149261E-04, 0.13575491094922871973E-03,
				0.18887326450650491366E-03, 0.24921240048299729402E-03,
				0.31630366082226447689E-03, 0.38974528447328229322E-03,
				0.46918492424785040975E-03, 0.55429531493037471492E-03,
				0.64476204130572477933E-03, 0.74028280424450333046E-03,
				0.84057143271072246365E-03, 0.94536151685852538246E-03,
				0.10544076228633167722E-02, 0.11674841174299594077E-02,
				0.12843824718970101768E-02, 0.14049079956551446427E-02,
				0.15288767050877655684E-02, 0.16561127281544526052E-02,
				0.17864463917586498247E-02, 0.19197129710138724125E-02,
				0.20557519893273465236E-02, 0.21944069253638388388E-02,
				0.23355251860571608737E-02, 0.24789582266575679307E-02,
				0.26245617274044295626E-02, 0.27721957645934509940E-02,
				0.29217249379178197538E-02, 0.30730184347025783234E-02,
				0.32259500250878684614E-02, 0.33803979910869203823E-02,
				0.35362449977167777340E-02, 0.36933779170256508183E-02,
				0.38516876166398709241E-02, 0.40110687240750233989E-02,
				0.41714193769840788528E-02, 0.43326409680929828545E-02,
				0.44946378920320678616E-02, 0.46573172997568547773E-02,
				0.48205888648512683476E-02, 0.49843645647655386012E-02,
				0.51485584789781777618E-02, 0.53130866051870565663E-02,
				0.54778666939189508240E-02, 0.56428181013844441585E-02,
				0.58078616599775673635E-02, 0.59729195655081658049E-02,
				0.61379152800413850435E-02, 0.63027734490857587172E-02,
				0.64674198318036867274E-02, 0.66317812429018878941E-02,
				0.67957855048827733948E-02, 0.69593614093904229394E-02,
				0.71224386864583871532E-02, 0.72849479805538070639E-02,
				0.74468208324075910174E-02, 0.76079896657190565832E-02,
				0.77683877779219912200E-02, 0.79279493342948491103E-02,
				0.80866093647888599710E-02, 0.82443037630328680306E-02,
				0.84009692870519326354E-02, 0.85565435613076896192E-02,
				0.87109650797320868736E-02, 0.88641732094824942641E-02,
				0.90161081951956431600E-02, 0.91667111635607884067E-02,
				0.93159241280693950932E-02, 0.94636899938300652943E-02,
				0.96099525623638830097E-02, 0.97546565363174114611E-02,
				0.98977475240487497440E-02, 0.10039172044056840798E-01,
				0.10178877529236079733E-01, 0.10316812330947621682E-01,
				0.10452925722906011926E-01, 0.10587167904885197931E-01,
				0.10719490006251933623E-01, 0.10849844089337314099E-01,
				0.10978183152658912470E-01, 0.11104461134006926537E-01,
				0.11228632913408049354E-01, 0.11350654315980596602E-01,
				0.11470482114693874380E-01, 0.11588074033043952568E-01,
				0.11703388747657003101E-01, 0.11816385890830235763E-01,
				0.11927026053019270040E-01, 0.12035270785279562630E-01,
				0.12141082601668299679E-01, 0.12244424981611985899E-01,
				0.12345262372243838455E-01, 0.12443560190714035263E-01,
				0.12539284826474884353E-01, 0.12632403643542078765E-01,
				0.12722884982732382906E-01, 0.12810698163877361967E-01,
				0.12895813488012114694E-01, 0.12978202239537399286E-01,
				0.13057836688353048840E-01, 0.13134690091960152836E-01,
				0.13208736697529129966E-01, 0.13279951743930530650E-01,
				0.13348311463725179953E-01, 0.13413793085110098513E-01,
				0.13476374833816515982E-01, 0.13536035934956213614E-01,
				0.13592756614812395910E-01, 0.13646518102571291428E-01,
				0.13697302631990716258E-01, 0.13745093443001896632E-01,
				0.13789874783240936517E-01, 0.13831631909506428676E-01,
				0.13870351089139840997E-01, 0.13906019601325461264E-01,
				0.13938625738306850804E-01, 0.13968158806516938516E-01,
				0.13994609127619079852E-01, 0.14017968039456608810E-01,
				0.14038227896908623303E-01, 0.14055382072649964277E-01,
				0.14069424957813575318E-01, 0.14080351962553661325E-01,
				0.14088159516508301065E-01, 0.14092845069160408355E-01,
				0.14094407090096179347E-01, 0.14092845069160408355E-01,
				0.14088159516508301065E-01, 0.14080351962553661325E-01,
				0.14069424957813575318E-01, 0.14055382072649964277E-01,
				0.14038227896908623303E-01, 0.14017968039456608810E-01,
				0.13994609127619079852E-01, 0.13968158806516938516E-01,
				0.13938625738306850804E-01, 0.13906019601325461264E-01,
				0.13870351089139840997E-01, 0.13831631909506428676E-01,
				0.13789874783240936517E-01, 0.13745093443001896632E-01,
				0.13697302631990716258E-01, 0.13646518102571291428E-01,
				0.13592756614812395910E-01, 0.13536035934956213614E-01,
				0.13476374833816515982E-01, 0.13413793085110098513E-01,
				0.13348311463725179953E-01, 0.13279951743930530650E-01,
				0.13208736697529129966E-01, 0.13134690091960152836E-01,
				0.13057836688353048840E-01, 0.12978202239537399286E-01,
				0.12895813488012114694E-01, 0.12810698163877361967E-01,
				0.12722884982732382906E-01, 0.12632403643542078765E-01,
				0.12539284826474884353E-01, 0.12443560190714035263E-01,
				0.12345262372243838455E-01, 0.12244424981611985899E-01,
				0.12141082601668299679E-01, 0.12035270785279562630E-01,
				0.11927026053019270040E-01, 0.11816385890830235763E-01,
				0.11703388747657003101E-01, 0.11588074033043952568E-01,
				0.11470482114693874380E-01, 0.11350654315980596602E-01,
				0.11228632913408049354E-01, 0.11104461134006926537E-01,
				0.10978183152658912470E-01, 0.10849844089337314099E-01,
				0.10719490006251933623E-01, 0.10587167904885197931E-01,
				0.10452925722906011926E-01, 0.10316812330947621682E-01,
				0.10178877529236079733E-01, 0.10039172044056840798E-01,
				0.98977475240487497440E-02, 0.97546565363174114611E-02,
				0.96099525623638830097E-02, 0.94636899938300652943E-02,
				0.93159241280693950932E-02, 0.91667111635607884067E-02,
				0.90161081951956431600E-02, 0.88641732094824942641E-02,
				0.87109650797320868736E-02, 0.85565435613076896192E-02,
				0.84009692870519326354E-02, 0.82443037630328680306E-02,
				0.80866093647888599710E-02, 0.79279493342948491103E-02,
				0.77683877779219912200E-02, 0.76079896657190565832E-02,
				0.74468208324075910174E-02, 0.72849479805538070639E-02,
				0.71224386864583871532E-02, 0.69593614093904229394E-02,
				0.67957855048827733948E-02, 0.66317812429018878941E-02,
				0.64674198318036867274E-02, 0.63027734490857587172E-02,
				0.61379152800413850435E-02, 0.59729195655081658049E-02,
				0.58078616599775673635E-02, 0.56428181013844441585E-02,
				0.54778666939189508240E-02, 0.53130866051870565663E-02,
				0.51485584789781777618E-02, 0.49843645647655386012E-02,
				0.48205888648512683476E-02, 0.46573172997568547773E-02,
				0.44946378920320678616E-02, 0.43326409680929828545E-02,
				0.41714193769840788528E-02, 0.40110687240750233989E-02,
				0.38516876166398709241E-02, 0.36933779170256508183E-02,
				0.35362449977167777340E-02, 0.33803979910869203823E-02,
				0.32259500250878684614E-02, 0.30730184347025783234E-02,
				0.29217249379178197538E-02, 0.27721957645934509940E-02,
				0.26245617274044295626E-02, 0.24789582266575679307E-02,
				0.23355251860571608737E-02, 0.21944069253638388388E-02,
				0.20557519893273465236E-02, 0.19197129710138724125E-02,
				0.17864463917586498247E-02, 0.16561127281544526052E-02,
				0.15288767050877655684E-02, 0.14049079956551446427E-02,
				0.12843824718970101768E-02, 0.11674841174299594077E-02,
				0.10544076228633167722E-02, 0.94536151685852538246E-03,
				0.84057143271072246365E-03, 0.74028280424450333046E-03,
				0.64476204130572477933E-03, 0.55429531493037471492E-03,
				0.46918492424785040975E-03, 0.38974528447328229322E-03,
				0.31630366082226447689E-03, 0.24921240048299729402E-03,
				0.18887326450650491366E-03, 0.13575491094922871973E-03,
				0.90372734658751149261E-04, 0.53275293669780613125E-04,
				0.25157870384280661489E-04, 0.69379364324108267170E-05, 0.0 };
		for (int d = 0; d < N; d++)
			(*out_coefs)[d] = (_Tp) tmp_coefs[d];
	}
	if (in_level == 9) {
		double tmp_coefs[513] = { 0.0, 0.945715933950007048827E-06,
				0.345456507169149134898E-05, 0.736624069102321668857E-05,
				0.125792781889592743525E-04, 0.190213681905875816679E-04,
				0.266376412339000901358E-04, 0.353751372055189588628E-04,
				0.451863674126296143105E-04, 0.560319507856164252140E-04,
				0.678774554733972416227E-04, 0.806899228014035293851E-04,
				0.944366322532705527066E-04, 0.109085545645741522051E-03,
				0.124606200241498368482E-03, 0.140970302204104791413E-03,
				0.158151830411132242924E-03, 0.176126765545083195474E-03,
				0.194872642236641146532E-03, 0.214368090034216937149E-03,
				0.234592462123925204879E-03, 0.255525589595236862014E-03,
				0.277147657465187357459E-03, 0.299439176850911730874E-03,
				0.322381020652862389664E-03, 0.345954492129903871350E-03,
				0.370141402122251665232E-03, 0.394924138246873704434E-03,
				0.420285716355361231823E-03, 0.446209810101403247488E-03,
				0.472680758429262691232E-03, 0.499683553312800484519E-03,
				0.527203811431658386125E-03, 0.555227733977307579715E-03,
				0.583742058714979703847E-03, 0.612734008012225209294E-03,
				0.642191235948505088403E-03, 0.672101776960108194646E-03,
				0.702453997827572321358E-03, 0.733236554224767912055E-03,
				0.764438352543882784191E-03, 0.796048517297550871506E-03,
				0.828056364077226302608E-03, 0.860451377808527848128E-03,
				0.893223195879324912340E-03, 0.926361595613111283368E-03,
				0.959856485506936206261E-03, 0.993697899638760857945E-03,
				0.102787599466367326179E-02, 0.106238104885340071375E-02,
				0.109720346268191941940E-02, 0.113233376051597664917E-02,
				0.116776259302858043685E-02, 0.120348074001265964881E-02,
				0.123947911332878396534E-02, 0.127574875977346947345E-02,
				0.131228086370221478128E-02, 0.134906674928353113127E-02,
				0.138609788229672549700E-02, 0.142336587141720519900E-02,
				0.146086246895890987689E-02, 0.149857957106456636214E-02,
				0.153650921735128916170E-02, 0.157464359003212166189E-02,
				0.161297501254393423070E-02, 0.165149594771914570655E-02,
				0.169019899554346019117E-02, 0.172907689054461607168E-02,
				0.176812249885838886701E-02, 0.180732881501808930079E-02,
				0.184668895851282540913E-02, 0.188619617015808475394E-02,
				0.192584380831993546204E-02, 0.196562534503150547732E-02,
				0.200553436203751169944E-02, 0.204556454679958293446E-02,
				0.208570968849203942640E-02, 0.212596367401472533045E-02,
				0.216632048404649142727E-02, 0.220677418916003329194E-02,
				0.224731894601603393082E-02, 0.228794899365195972378E-02,
				0.232865864987842738864E-02, 0.236944230779380495146E-02,
				0.241029443242563417382E-02, 0.245120955750556483923E-02,
				0.249218228238276930060E-02, 0.253320726907925325750E-02,
				0.257427923948908888092E-02, 0.261539297272236109225E-02,
				0.265654330259352828314E-02, 0.269772511525294586667E-02,
				0.273893334695947541201E-02, 0.278016298199139435045E-02,
				0.282140905069222207923E-02, 0.286266662764757868253E-02,
				0.290393082998878368175E-02, 0.294519681581857582284E-02,
				0.298645978275408290247E-02, 0.302771496658198544480E-02,
				0.306895764002069252174E-02, 0.311018311158427546158E-02,
				0.315138672454287935858E-02, 0.319256385597434736790E-02,
				0.323370991590184336368E-02, 0.327482034651233969564E-02,
				0.331589062145094394706E-02, 0.335691624518616761342E-02,
				0.339789275244138669739E-02, 0.343881570768790591876E-02,
				0.347968070469521146972E-02, 0.352048336613417922682E-02,
				0.356121934322919357659E-02, 0.360188431545532431869E-02,
				0.364247399027690353194E-02, 0.368298410292403911967E-02,
				0.372341041620379550870E-02, 0.376374872034296338241E-02,
				0.380399483285952829161E-02, 0.384414459846013158917E-02,
				0.388419388896099560998E-02, 0.392413860322995774660E-02,
				0.396397466714742455513E-02, 0.400369803358421688562E-02,
				0.404330468239442998549E-02, 0.408279062042157838350E-02,
				0.412215188151643401528E-02, 0.416138452656509745764E-02,
				0.420048464352596631772E-02, 0.423944834747438184434E-02,
				0.427827178065384480959E-02, 0.431695111253279479928E-02,
				0.435548253986604343679E-02, 0.439386228676004195260E-02,
				0.443208660474124713206E-02, 0.447015177282692726900E-02,
				0.450805409759782158001E-02, 0.454578991327213285488E-02,
				0.458335558178039420335E-02, 0.462074749284080687482E-02,
				0.465796206403469754658E-02, 0.469499574088179046532E-02,
				0.473184499691503264714E-02, 0.476850633375474925263E-02,
				0.480497628118194150483E-02, 0.484125139721057135214E-02,
				0.487732826815870573054E-02, 0.491320350871841897367E-02,
				0.494887376202437487201E-02, 0.498433569972103029914E-02,
				0.501958602202842039909E-02, 0.505462145780650125058E-02,
				0.508943876461803986674E-02, 0.512403472879005351831E-02,
				0.515840616547381084096E-02, 0.519254991870341614863E-02,
				0.522646286145300596306E-02, 0.526014189569259311205E-02,
				0.529358395244259896547E-02, 0.532678599182711857974E-02,
				0.535974500312596681161E-02, 0.539245800482555593606E-02,
				0.542492204466865704951E-02, 0.545713419970309863995E-02,
				0.548909157632945623482E-02, 0.552079131034778706457E-02,
				0.555223056700346326850E-02, 0.558340654103215637610E-02,
				0.561431645670402467678E-02, 0.564495756786715368885E-02,
				0.567532715799029830087E-02, 0.570542254020497332312E-02,
				0.573524105734693719020E-02, 0.576478008199711142954E-02,
				0.579403701652197628421E-02, 0.582300929311348057702E-02,
				0.585169437382850155033E-02, 0.588008975062788803205E-02,
				0.590819294541511788161E-02, 0.593600151007459827614E-02,
				0.596351302650963502011E-02, 0.599072510668009471472E-02,
				0.601763539263978131522E-02, 0.604424155657354634589E-02,
				0.607054130083414983949E-02, 0.609653235797888692923E-02,
				0.612221249080599294931E-02, 0.614757949239083790214E-02,
				0.617263118612191922727E-02, 0.619736542573665996342E-02,
				0.622178009535701763157E-02, 0.624587310952490748541E-02,
				0.626964241323744217671E-02, 0.629308598198198836688E-02,
				0.631620182177103938227E-02, 0.633898796917690165912E-02,
				0.636144249136619145314E-02, 0.638356348613413709795E-02,
				0.640534908193868098342E-02, 0.642679743793437438922E-02,
				0.644790674400605734710E-02, 0.646867522080231481688E-02,
				0.648910111976869964292E-02, 0.650918272318071200827E-02,
				0.652891834417652442012E-02, 0.654830632678944064054E-02,
				0.656734504598007641819E-02, 0.658603290766824937794E-02,
				0.660436834876456498276E-02, 0.662234983720168509457E-02,
				0.663997587196526532519E-02, 0.665724498312454708217E-02,
				0.667415573186258997654E-02, 0.669070671050613006584E-02,
				0.670689654255504925648E-02, 0.672272388271144108036E-02,
				0.673818741690825799086E-02, 0.675328586233752529078E-02,
				0.676801796747810680683E-02, 0.678238251212300746082E-02,
				0.679637830740619795480E-02, 0.681000419582894688374E-02,
				0.682325905128564571420E-02, 0.683614177908911221841E-02,
				0.684865131599535812903E-02, 0.686078663022780697951E-02,
				0.687254672150094831613E-02, 0.688393062104341470995E-02,
				0.689493739162046825872E-02, 0.690556612755588354803E-02,
				0.691581595475321433825E-02, 0.692568603071643155621E-02,
				0.693517554456992049848E-02, 0.694428371707782549438E-02,
				0.695300980066273063177E-02, 0.696135307942366551493E-02,
				0.696931286915342540213E-02, 0.697688851735519545845E-02,
				0.698407940325846925786E-02, 0.699088493783425207545E-02,
				0.699730456380953992594E-02, 0.700333775568106572820E-02,
				0.700898401972830440494E-02, 0.701424289402572916425E-02,
				0.701911394845431165171E-02, 0.702359678471225911031E-02,
				0.702769103632498213858E-02, 0.703139636865428709508E-02,
				0.703471247890678765907E-02, 0.703763909614153052319E-02,
				0.704017598127683066242E-02, 0.704232292709631209597E-02,
				0.704407975825415053266E-02, 0.704544633127951476780E-02,
				0.704642253458020417748E-02, 0.704700828844548013730E-02,
				0.704720354504808967346E-02, 0.704700828844548013730E-02,
				0.704642253458020417748E-02, 0.704544633127951476780E-02,
				0.704407975825415053266E-02, 0.704232292709631209597E-02,
				0.704017598127683066242E-02, 0.703763909614153052319E-02,
				0.703471247890678765907E-02, 0.703139636865428709508E-02,
				0.702769103632498213858E-02, 0.702359678471225911031E-02,
				0.701911394845431165171E-02, 0.701424289402572916425E-02,
				0.700898401972830440494E-02, 0.700333775568106572820E-02,
				0.699730456380953992594E-02, 0.699088493783425207545E-02,
				0.698407940325846925786E-02, 0.697688851735519545845E-02,
				0.696931286915342540213E-02, 0.696135307942366551493E-02,
				0.695300980066273063177E-02, 0.694428371707782549438E-02,
				0.693517554456992049848E-02, 0.692568603071643155621E-02,
				0.691581595475321433825E-02, 0.690556612755588354803E-02,
				0.689493739162046825872E-02, 0.688393062104341470995E-02,
				0.687254672150094831613E-02, 0.686078663022780697951E-02,
				0.684865131599535812903E-02, 0.683614177908911221841E-02,
				0.682325905128564571420E-02, 0.681000419582894688374E-02,
				0.679637830740619795480E-02, 0.678238251212300746082E-02,
				0.676801796747810680683E-02, 0.675328586233752529078E-02,
				0.673818741690825799086E-02, 0.672272388271144108036E-02,
				0.670689654255504925648E-02, 0.669070671050613006584E-02,
				0.667415573186258997654E-02, 0.665724498312454708217E-02,
				0.663997587196526532519E-02, 0.662234983720168509457E-02,
				0.660436834876456498276E-02, 0.658603290766824937794E-02,
				0.656734504598007641819E-02, 0.654830632678944064054E-02,
				0.652891834417652442012E-02, 0.650918272318071200827E-02,
				0.648910111976869964292E-02, 0.646867522080231481688E-02,
				0.644790674400605734710E-02, 0.642679743793437438922E-02,
				0.640534908193868098342E-02, 0.638356348613413709795E-02,
				0.636144249136619145314E-02, 0.633898796917690165912E-02,
				0.631620182177103938227E-02, 0.629308598198198836688E-02,
				0.626964241323744217671E-02, 0.624587310952490748541E-02,
				0.622178009535701763157E-02, 0.619736542573665996342E-02,
				0.617263118612191922727E-02, 0.614757949239083790214E-02,
				0.612221249080599294931E-02, 0.609653235797888692923E-02,
				0.607054130083414983949E-02, 0.604424155657354634589E-02,
				0.601763539263978131522E-02, 0.599072510668009471472E-02,
				0.596351302650963502011E-02, 0.593600151007459827614E-02,
				0.590819294541511788161E-02, 0.588008975062788803205E-02,
				0.585169437382850155033E-02, 0.582300929311348057702E-02,
				0.579403701652197628421E-02, 0.576478008199711142954E-02,
				0.573524105734693719020E-02, 0.570542254020497332312E-02,
				0.567532715799029830087E-02, 0.564495756786715368885E-02,
				0.561431645670402467678E-02, 0.558340654103215637610E-02,
				0.555223056700346326850E-02, 0.552079131034778706457E-02,
				0.548909157632945623482E-02, 0.545713419970309863995E-02,
				0.542492204466865704951E-02, 0.539245800482555593606E-02,
				0.535974500312596681161E-02, 0.532678599182711857974E-02,
				0.529358395244259896547E-02, 0.526014189569259311205E-02,
				0.522646286145300596306E-02, 0.519254991870341614863E-02,
				0.515840616547381084096E-02, 0.512403472879005351831E-02,
				0.508943876461803986674E-02, 0.505462145780650125058E-02,
				0.501958602202842039909E-02, 0.498433569972103029914E-02,
				0.494887376202437487201E-02, 0.491320350871841897367E-02,
				0.487732826815870573054E-02, 0.484125139721057135214E-02,
				0.480497628118194150483E-02, 0.476850633375474925263E-02,
				0.473184499691503264714E-02, 0.469499574088179046532E-02,
				0.465796206403469754658E-02, 0.462074749284080687482E-02,
				0.458335558178039420335E-02, 0.454578991327213285488E-02,
				0.450805409759782158001E-02, 0.447015177282692726900E-02,
				0.443208660474124713206E-02, 0.439386228676004195260E-02,
				0.435548253986604343679E-02, 0.431695111253279479928E-02,
				0.427827178065384480959E-02, 0.423944834747438184434E-02,
				0.420048464352596631772E-02, 0.416138452656509745764E-02,
				0.412215188151643401528E-02, 0.408279062042157838350E-02,
				0.404330468239442998549E-02, 0.400369803358421688562E-02,
				0.396397466714742455513E-02, 0.392413860322995774660E-02,
				0.388419388896099560998E-02, 0.384414459846013158917E-02,
				0.380399483285952829161E-02, 0.376374872034296338241E-02,
				0.372341041620379550870E-02, 0.368298410292403911967E-02,
				0.364247399027690353194E-02, 0.360188431545532431869E-02,
				0.356121934322919357659E-02, 0.352048336613417922682E-02,
				0.347968070469521146972E-02, 0.343881570768790591876E-02,
				0.339789275244138669739E-02, 0.335691624518616761342E-02,
				0.331589062145094394706E-02, 0.327482034651233969564E-02,
				0.323370991590184336368E-02, 0.319256385597434736790E-02,
				0.315138672454287935858E-02, 0.311018311158427546158E-02,
				0.306895764002069252174E-02, 0.302771496658198544480E-02,
				0.298645978275408290247E-02, 0.294519681581857582284E-02,
				0.290393082998878368175E-02, 0.286266662764757868253E-02,
				0.282140905069222207923E-02, 0.278016298199139435045E-02,
				0.273893334695947541201E-02, 0.269772511525294586667E-02,
				0.265654330259352828314E-02, 0.261539297272236109225E-02,
				0.257427923948908888092E-02, 0.253320726907925325750E-02,
				0.249218228238276930060E-02, 0.245120955750556483923E-02,
				0.241029443242563417382E-02, 0.236944230779380495146E-02,
				0.232865864987842738864E-02, 0.228794899365195972378E-02,
				0.224731894601603393082E-02, 0.220677418916003329194E-02,
				0.216632048404649142727E-02, 0.212596367401472533045E-02,
				0.208570968849203942640E-02, 0.204556454679958293446E-02,
				0.200553436203751169944E-02, 0.196562534503150547732E-02,
				0.192584380831993546204E-02, 0.188619617015808475394E-02,
				0.184668895851282540913E-02, 0.180732881501808930079E-02,
				0.176812249885838886701E-02, 0.172907689054461607168E-02,
				0.169019899554346019117E-02, 0.165149594771914570655E-02,
				0.161297501254393423070E-02, 0.157464359003212166189E-02,
				0.153650921735128916170E-02, 0.149857957106456636214E-02,
				0.146086246895890987689E-02, 0.142336587141720519900E-02,
				0.138609788229672549700E-02, 0.134906674928353113127E-02,
				0.131228086370221478128E-02, 0.127574875977346947345E-02,
				0.123947911332878396534E-02, 0.120348074001265964881E-02,
				0.116776259302858043685E-02, 0.113233376051597664917E-02,
				0.109720346268191941940E-02, 0.106238104885340071375E-02,
				0.102787599466367326179E-02, 0.993697899638760857945E-03,
				0.959856485506936206261E-03, 0.926361595613111283368E-03,
				0.893223195879324912340E-03, 0.860451377808527848128E-03,
				0.828056364077226302608E-03, 0.796048517297550871506E-03,
				0.764438352543882784191E-03, 0.733236554224767912055E-03,
				0.702453997827572321358E-03, 0.672101776960108194646E-03,
				0.642191235948505088403E-03, 0.612734008012225209294E-03,
				0.583742058714979703847E-03, 0.555227733977307579715E-03,
				0.527203811431658386125E-03, 0.499683553312800484519E-03,
				0.472680758429262691232E-03, 0.446209810101403247488E-03,
				0.420285716355361231823E-03, 0.394924138246873704434E-03,
				0.370141402122251665232E-03, 0.345954492129903871350E-03,
				0.322381020652862389664E-03, 0.299439176850911730874E-03,
				0.277147657465187357459E-03, 0.255525589595236862014E-03,
				0.234592462123925204879E-03, 0.214368090034216937149E-03,
				0.194872642236641146532E-03, 0.176126765545083195474E-03,
				0.158151830411132242924E-03, 0.140970302204104791413E-03,
				0.124606200241498368482E-03, 0.109085545645741522051E-03,
				0.944366322532705527066E-04, 0.806899228014035293851E-04,
				0.678774554733972416227E-04, 0.560319507856164252140E-04,
				0.451863674126296143105E-04, 0.353751372055189588628E-04,
				0.266376412339000901358E-04, 0.190213681905875816679E-04,
				0.125792781889592743525E-04, 0.736624069102321668857E-05,
				0.345456507169149134898E-05, 0.945715933950007048827E-06, 0.0 };
		for (int d = 0; d < N; d++)
			(*out_coefs)[d] = (_Tp) tmp_coefs[d];
	}

}
template class combigrid::GaussPattersonQuadrature<float>;
template class combigrid::GaussPattersonQuadrature<double>;

