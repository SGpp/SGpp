// Copyright (C) 2008-today The SG++ project
// This file is part of the SG++ project. For conditions of distribution and
// use, please see the copyright notice provided with SG++ or at
// sgpp.sparsegrids.org

#pragma once
#include <iostream>
#include <limits>
#include <memory>
#include <string>

#include <sgpp/base/exception/generation_exception.hpp>
#include <sgpp/base/function/vector/VectorFunction.hpp>
#include <sgpp/base/function/vector/VectorFunctionGradient.hpp>
#include <sgpp/base/grid/Grid.hpp>
#include <sgpp/base/tools/RandomNumberGenerator.hpp>

namespace sgpp {
namespace optimization {

/**
 * General response surface. Represents an approximation of some
 * function with vector valued output. Usually the approximation
 * is created via interpolation. (But could also be regression for example)
 */
class ResponseSurfaceVector {
 public:
  /**
   * Constructor
   */
  explicit ResponseSurfaceVector(size_t numDim, size_t numRes) : numDim(numDim), numRes(numRes) {}

  /**
   * Destructor
   */
  virtual ~ResponseSurfaceVector() {}

  /**
   * evaluates the response surface
   *
   * @param v	point in which the response surface  shall be evaulated
   * @return 	evaluation
   */
  virtual sgpp::base::DataVector eval(sgpp::base::DataVector v);

  /**
   * evaluates the response surface and its gradients
   *
   * @param v			     point in which the response surface shall be evaluated
   * @param jacobian 	 reference to return the jacobian evaluated in v. Each row is one gradient
   * @return 			     evaluation
   */
  virtual sgpp::base::DataVector evalJacobian(sgpp::base::DataVector v,
                                              sgpp::base::DataMatrix& jacobian) = 0;

  /**
   * Calculates the average l2 error between interpolant and objective function
   *
   * @param objectiveFunc	    the objectiveFunction
   * @param componentwiseErrors   reference to return the l2 error in each individual of the numRes
   *                              components
   * @param numMCPoints			      number of Monte Carlo Points
   *
   * @return 					            vector with [average l2 error, min l2
                                              error, max l2 error]

   */
  sgpp::base::DataVector averageL2Error(std::shared_ptr<sgpp::base::VectorFunction> objectiveFunc,
                                        sgpp::base::DataVector& componentwiseErrors,
                                        size_t numMCPoints = 1000);

  /**
   * Calculates the normalized root mean square error between interpolant
   * and objective function at random points
   *
   * @param objectiveFunc	    the objectiveFunction
   * @param componentwiseErrorData   reference to return the NRMSE, l2, min and max for each
   * individual of the numRes components
   * @param numMCPoints			      number of Monte Carlo Points
   *
   * @return 				            	vector [average NRMSE, average l2 error, min
   *                                      NRMSE, max NRMSE]
   */
  sgpp::base::DataVector averageNRMSE(std::shared_ptr<sgpp::base::VectorFunction> objectiveFunc,
                                      sgpp::base::DataMatrix& componentwiseErrorData,
                                      size_t numMCPoints = 1000);

  /**
   * Calculates the normalized root mean square error between interpolant and objective function
   * from a precalculated set of test points and according values
   * (this set is usually generated by ResponseSurfaceVector::precalculateErrorTestData)
   *
   * @param	fileName	path to the stored data set
   * @param numMCPoints	the first numMCPoints of the data set are used
   * @param numDim		number of dimensions
   *
   * @return 			vector [NRMSE, l2 error, min, max]
   */
  // sgpp::base::DataVector nrmsErrorFromTestData(const std::string& fileName, size_t numMCPoints,
  //                                              size_t numDim);

  /**
   * Evaluates the objective function in random points and stores these points with the according
   * evaluation value The stored set of test data can then later be used to calculate and compare
   * the approximation error
   *
   * @param objectiveFunc		the objective function
   * @param numMCPoints				number of Monte carlo Points
   * @param	path					path specifying where to save the generated
   * data
   */
  // void precalculateErrorTestData(std::shared_ptr<sgpp::base::VectorFunction> objectiveFunc,
  //                                size_t numMCPoints, const std::string& fileName);

  size_t getNumDim() { return numDim; }

  size_t getNumRes() { return numRes; }

 protected:
  // number of input parameters
  size_t numDim;
  // number of output parameters
  size_t numRes;
  // lower bounds of the objective function's domain
  sgpp::base::DataVector lb;
  // upper bounds of the objective function's domain
  sgpp::base::DataVector ub;
  std::shared_ptr<sgpp::base::VectorFunction> interpolants;
  std::shared_ptr<sgpp::base::VectorFunctionGradient> interpolantGradients;

  /**
   * transforms a point in hyper-rectangle [lBounds,rBounds] to the hyper-rectangle
   * [newlBounds,newuBounds]
   *
   * @param	v			point in [lBounds,uBounds]
   * @param lBounds		lower bounds
   * @param uBounds		upper bounds
   * @param newlBounds  new lower bounds
   * @param newuBounds  new upper bounds
   */
  void transformPoint(sgpp::base::DataVector& v, sgpp::base::DataVector lBounds,
                      sgpp::base::DataVector uBounds, sgpp::base::DataVector newlBounds,
                      sgpp::base::DataVector newuBounds);
  /**
   * calculates the volume of the tensor product domain given by lb and ub
   *
   * @return volume
   */
  double domainVolume();
};

}  // namespace optimization
}  // namespace sgpp
