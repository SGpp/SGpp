# Copyright (C) 2008-today The SG++ Project
# This file is part of the SG++ project. For conditions of distribution and
# use, please see the copyright notice provided with SG++ or at
# sgpp.sparsegrids.org

import os
import fnmatch
import subprocess

Import("env")
Import("BUILD_DIR")
Import("PYSGPP_BUILD_PATH")
Import("moduleName")
Import("libraryTargetList")
Import("installTargetList")
Import("exampleTargetList")
Import("config")
Import('headerSourceList')
Import('headerDestList')
Import('lintAction')

moduleDependencies = ["sgppbase"]
Export('moduleDependencies')

libname = "sgpp%s" % moduleName
if env['USE_STATICLIB']:
    libname += "static"
    for i, _ in enumerate(moduleDependencies):
        moduleDependencies[i] = "%sstatic" % moduleDependencies[i]
Export('libname')
#config = env.Configure()

if ("USE_UMFPACK" in config.env) and config.env["USE_UMFPACK"]:
    if config.CheckHeader("suitesparse/umfpack.h", language="C++") and \
            config.CheckLib("umfpack", language="C++"):
        moduleDependencies.append("umfpack")
        env["CPPDEFINES"]["USE_UMFPACK"] = "1"
        print "SGPP::optimization will be compiled with UMFPACK."
    else:
        env["CPPDEFINES"]["DONT_USE_UMFPACK"] = "1"
        print "SGPP::optimization will be compiled without UMFPACK (not found)."
else:
    print "SGPP::optimization will be compiled without UMFPACK."

if ("USE_EIGEN" in config.env) and config.env["USE_EIGEN"]:
    if config.CheckHeader("eigen3/Eigen/Dense", language="C++"):
        env["CPPDEFINES"]["USE_EIGEN"] = "1"
        print "SGPP::optimization will be compiled with Eigen."
    else:
        env["CPPDEFINES"]["DONT_USE_EIGEN"] = "1"
        print "SGPP::optimization will be compiled without Eigen (not found)."
else:
    print "SGPP::optimization will be compiled without Eigen."

if ("USE_ARMADILLO" in config.env) and config.env["USE_ARMADILLO"]:
    if config.CheckHeader("armadillo", language="C++") and \
            config.CheckLib("armadillo", language="C++"):
        moduleDependencies.append("armadillo")
        env["CPPDEFINES"]["USE_ARMADILLO"] = "1"
        print "SGPP::optimization will be compiled with Armadillo."
    else:
        env["CPPDEFINES"]["DONT_USE_ARMADILLO"] = "1"
        print "SGPP::optimization will be compiled without Armadillo (not found)."
else:
    print "SGPP::optimization will be compiled without Armadillo."

if ("USE_GMMPP" in config.env) and config.env["USE_GMMPP"]:
    if config.CheckHeader("gmm/gmm.h", language="C++"):
        env["CPPDEFINES"]["USE_GMMPP"] = "1"
        print "SGPP::optimization will be compiled with Gmm++."
    else:
        env["CPPDEFINES"]["DONT_USE_GMMPP"] = "1"
        print "SGPP::optimization will be compiled without Gmm++ (not found)."
else:
    print "SGPP::optimization will be compiled without Gmm++."



dependencies = ["base"]

cpps = []
hpps = []
objs = []

for currentFolder, subdirNames, fileNames in os.walk("src"):
    for fileName in fnmatch.filter(fileNames, "*.cpp"):
        cpp = os.path.join(currentFolder, fileName)
        cpps.append(cpp)
        objs.append(env.SharedObject(cpp))
    if currentFolder != 'src':
      for fileName in fnmatch.filter(fileNames, '*.hpp'):
        hpp = os.path.join(currentFolder, fileName)
        hpps.append(hpp)
        headerSourceList.append(os.path.join(moduleName, hpp))
        headerDestList.append(hpp.split(os.sep, 1)[1])

if env['USE_STATICLIB']:
    libsuffix = env['LIBSUFFIX']
    # building static libraries is the same for unix and windows platforms
    lib = env.StaticLibrary(target=libname,
                            source=objs,
                            LIBPATH=BUILD_DIR,
                            LIBS=moduleDependencies)
else:
    # building of shared libraries differs
    libsuffix = env['SHLIBSUFFIX']
    lib = env.SharedLibrary(target=libname,
                            source=objs,
                            LIBPATH=BUILD_DIR,
                            LIBS=moduleDependencies)

for lib_str in moduleDependencies:
    if lib_str.startswith("sgpp"):
        env.Depends(lib, os.path.join("#", BUILD_DIR.path,
                                      "%s%s%s" % (env["LIBPREFIX"],
                                                  lib_str,
                                                  libsuffix)))

libInstall = env.Install(BUILD_DIR, lib)

# build examples
if env["ARCH"] != "mic":
    example_env = env.Clone()
    example_env.AppendUnique(LIBS=[libname] + moduleDependencies)
    for fileName in os.listdir("examples"):
        if fnmatch.fnmatch(fileName, "*.cpp"):
            cpp = os.path.join("examples", fileName)
            cpps.append(cpp)
            example = example_env.Program(source=cpp)
            example_env.Requires(example, libInstall)
            exampleTargetList.append(example)
        elif fnmatch.fnmatch(fileName, "*.hpp"):
            hpp = os.path.join("examples", fileName)
            hpps.append(hpp)

# build unit tests
if env['COMPILE_BOOST_TESTS']:
    Import('boostTestTargetList')
    test_env = env.Clone()
    test_env.AppendUnique(LIBS=[libname] + moduleDependencies + ["boost_unit_test_framework"])
    testObjects = []
    for fileName in os.listdir("tests"):
        if fnmatch.fnmatch(fileName, "*.cpp"):
            cpp = os.path.join("tests", fileName)
            cpps.append(cpp)
            testObjects += [test_env.Object(source=cpp)]
        elif fnmatch.fnmatch(fileName, "*.hpp"):
            hpp = os.path.join("tests", fileName)
            hpps.append(hpp)
    if len(testObjects) > 0:
        fileName = os.path.join("tests", "test_{}_boost".format(moduleName)) + \
                (".exe" if env['PLATFORM'] == 'win32' else '')
        test = test_env.Program(fileName, testObjects)
        test_env.Requires(test, libInstall)
        if env['RUN_BOOST_TESTS']:
            testRun = test_env.BoostTest(fileName + "_run", source=fileName)
            boostTestTargetList.append(testRun)

# run cpplint
if env['RUN_CPPLINT']:
    for path in cpps + hpps:
        lintCommand = env.Command(path + ".lint", path, lintAction)
        env.Depends(lib, lintCommand)

libraryTargetList.append(lib)
installTargetList.append(libInstall)
