## This file is part of sgpp, a program package making use of spatially adaptive sparse grids to solve numerical problems
## 
## Copyright (C) 2007,2008 Dirk Pflüger (pflueged@in.tum.de), Jörg Blank (blankj@in.tum.de)
## 
## This program is free software: you can redistribute it and/or modify
## it under the terms of the GNU Lesser General Public License as published by
## the Free Software Foundation, either version 3 of the License, or
## (at your option) any later version.
## 
## This program is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU Lesser General Public License for more details.
## 
## You should have received a copy of the GNU Lesser General Public License
## along with this program.  If not, see <http://www.gnu.org/licenses/>.


INSTALLATION:
=============
Compilation of the libraries with scons by
> scons
in the main directory. scons needs the SConstruct file.

Settings for scons, like compiler flags e.g., can be specified in a
"custom.py"-file. An example-file is the "custom-example.py"-file
located in the same folder.

It is highly recommended to copy the custom-example.py to custom.py

If you have an scons version < 0.97.X (check via "> scons -version")
update it.

LRZ-LINUX-CLUSTER:
==================

Download scons, swig

Install swig:
./configure --prefix=$HOME/utils
make && make install
Attention: SWIG is platform dependant (ia64, x86_64)

Install scons:
python setup.py install --prefix=$HOME/utils

Add Environment Variables:
export PATH=$PATH:$HOME/utils/bin
export PYTHONPATH=$PYTHONPATH:$HOME/utils/lib64/scons-VERSION

Build SGClass

Mac OS X:
========

SG++ can be compiled and used with Mac OS X (tested with 
10.7 "Lion").

A standard linux environment has to be set up (e.g. using
macports) and the required tools (gcc, python, swig) have 
to be installed.

Some difficulties can arise as OS X (if the XCode Command 
Line Tools are installed) can include some apple specific 
versions of gcc and python.

For this reason it can be necessary to change the symlinks 
in "/usr/bin/" to the compiler provided by the package 
management system (e.g. /opt/local/bin/ for macports).

As there are basically two toolchains installed, it is 
important to execute the binary with the libraries of the 
toolchain the binary was build with. To this end ist can
be necessary to set the "DYLD_LIBRARY_PATH" environment 
variable to a path that contains the standard library of 
the toolchain used (e.g. /opt/local/lib for macports).
Also, the path to the libraries "libsgpp*" has to be 
added to be added to "DYLD_LIBRARY_PATH" if the 
libraries aren't added to a well known path (like 
/usr/lib).

If the last steps are ommitted or some path is set 
incorrect, hard to debug memory problems might arise. 
Stack traces may be corrupted and the program might 
terminate with different "malloc" errors.



