# Copyright (C) 2008-today The SG++ Project
# This file is part of the SG++ project. For conditions of distribution and
# use, please see the copyright notice provided with SG++ or at
# sgpp.sparsegrids.org

import ModuleHelper

Import("*")

moduleDependencies = ["sgppdatadriven", "sgppfinance", "sgpppde", "sgppsolver", "sgppbase", "sgppmisc"]

# can only build without mpi support, skip those files
# required define: -DUSE_MPI
# requires mpicxx
MPIOnlyFiles = [
    "MPICommunicator.cpp",
    "GlobalMPIComm.cpp",
    "ConjugateGradientsMPI.cpp",
    "BiCGStabMPI.cpp",
    "PoissonEquationSolverMPI.cpp",
    "HeatEquationSolverMPI.cpp",
    "BlackScholesSolverMPI.cpp",
    "OperationParabolicPDESolverSystemDirichletCombined.cpp",
    "DMSystemMatrixVectorizedIdentityMPI.cpp",
    "DMSystemMatrixSPVectorizedIdentityMPI.cpp",
    "DMSystemMatrixMPITypeFactory.cpp",
    "DMSystemMatrixSPMPITypeFactory.cpp",
    "PoissonEquationEllipticPDESolverSystemDirichletParallelMPI.cpp",
    "PoissonEquationEllipticPDESolverSystemDirichletVectorizedMPI.cpp",
    "HeatEquationParabolicPDESolverSystemParallelMPI.cpp",
    "HeatEquationParabolicPDESolverSystemVectorizedMPI.cpp",
    "BlackScholesParabolicPDESolverSystemEuroAmerParallelMPI.cpp",
    "BlackScholesPATParabolicPDESolverSystemEuroAmerParallelMPI.cpp",
    "BlackScholesPATParabolicPDESolverSystemEuroAmerVectorizedMPI.cpp",
    #"OperationLaplaceVectorizedLinear.cpp",
    #"OperationLaplaceVectorizedLinearBoundary.cpp",
    #"OperationLTwoDotProductVectorizedLinear.cpp",
    #"OperationLTwoDotProductVectorizedLinearBoundary.cpp",
    #"OperationLTwoDotLaplaceVectorizedLinear.cpp",
    #"OperationLTwoDotLaplaceVectorizedLinearBoundary.cpp",
    ]

# Nvidia OpenCL: -I$(OCLINCLUDE) -DUSEOCL -DUSEOCL_NVIDIA -fopenmp
# Intel OpenCL CPU: -I$(IOCLINCLUDE) -DUSEOCL -DUSEOCL_INTEL -fopenmp -DUSEOCL_CPU
# Intel OpenCL GPU: -I$(IOCLINCLUDE) -DUSEOCL -DUSEOCL_INTEL -fopenmp
# Intel OpenCL MIC: -I$(IOCLINCLUDE) -DUSEOCL -DUSEOCL_INTEL -DUSEOCL_MIC
# AMD OpenCL GPU: -I$(AMDOCLINCLUDE) -DUSEOCL -DUSEOCL_AMD -fopenmp
# Linkflags (for Intel MIC without -fopenmp): -L$(OCLLIB) -lOpenCL -fopenmp
OCLOnlyFiles = [
    "OCLKernelImplBase.cpp",
    "OCLMPILTwoDotLaplaceInnerExec.cpp",
    "OCLMPILTwoDotLaplaceBoundExec.cpp",
    "OCLMPILaplaceInnerExec.cpp",
    "OCLMPILaplaceBoundExec.cpp",
    "OCLMPILTwoDotInnerExec.cpp",
    "OCLMPILTwoDotBoundExec.cpp",
    "OCLPDEKernels.cpp",
    "OCLPDEInner.cpp",
    "OCLPDEBound.cpp",
    "OCLLaplaceInner.cpp",
    "OCLLaplaceBound.cpp",
    "OCLLTwoDotInner.cpp",
    "OCLLTwoDotLaplaceInner.cpp",
    "OCLLTwoDotLaplaceBound.cpp",
    "OCLLTwoDotBound.cpp",
    "OperationLaplaceVectorizedLinearOCL.cpp",
    "OperationLaplaceVectorizedLinearBoundaryOCL.cpp",
    "OperationLTwoDotLaplaceVectorizedLinearOCL.cpp",
    "OperationLTwoDotLaplaceVectorizedLinearBoundaryOCL.cpp",
    "OperationLTwoDotProductVectorizedLinearBoundaryOCL.cpp",
    "OperationLTwoDotProductVectorizedLinearOCL.cpp"
]


MICOnlyFiles = [
    "MICKernelImpl.cpp",
    "SPMICKernelImpl.cpp"
]

excludeFiles = OCLOnlyFiles
for t in env["CPPDEFINES"]:
  if t[0] == "USE_MPI":
    if not t[1]:
      excludeFiles += MPIOnlyFiles
    break

module = ModuleHelper.Module(moduleDependencies, excludeFiles=excludeFiles)

module.scanSource()
module.buildLibrary()
module.generatePythonDocstrings()
if "USE_MPI" in env["CPPDEFINES"]:
  module.buildExamples("examplesMPI")
else:
  module.buildExamples()
module.runCpplint()
