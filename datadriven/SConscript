# Copyright (C) 2008-today The SG++ project
# This file is part of the SG++ project. For conditions of distribution and
# use, please see the copyright notice provided with SG++ or at 
# sgpp.sparsegrids.org

import os
import fnmatch

Import('env')
Import('BUILD_DIR')
Import('PYSGPP_BUILD_PATH')
Import('moduleName')

dependencies = ["base", "solver", "pde", "misc"]

avxFolders = ['./src/sgpp/datadriven/operation/OperationMultipleEvalSubspace/', './src/sgpp/datadriven/operation/OperationMultiEvalStreaming']

avx_env = env.Clone()
avxCPPFLAGS = filter(lambda flag: flag != '-msse3', avx_env['CPPFLAGS'])
avx_env['CPPFLAGS'] = avxCPPFLAGS
#avx_env.Remove(CPPFLAGS = '-msse3')
avx_env.Append(CPPFLAGS = '-mavx')

def isAVXFolder(folder):
    for avxFolder in avxFolders:
        if folder.startswith(avxFolder):
            return True
    return False

objs = []
for currentFolder, subdirNames, fileNames in os.walk("."):
    if currentFolder.startswith("./src"):
        for fileName in fnmatch.filter(fileNames, '*.cpp'):
            sourceFile = os.path.join(currentFolder, fileName)
            if isAVXFolder(currentFolder):
                objs.append(avx_env.SharedObject(sourceFile))
            else:
                objs.append(env.SharedObject(sourceFile))                
lib = env.SharedLibrary(target="sgpp%s" % moduleName,
                        source=objs,
                        LIBPATH = [BUILD_DIR, '#/lib/alglib'],
                        LIBS=['sgppbase', 'sgppsolver', 'libalglib', 'sgpppde'])
env.Depends(lib, "#/" + BUILD_DIR.path + "/libsgppbase.so")
env.Depends(lib, "#/" + BUILD_DIR.path + "/libsgppsolver.so")
env.Depends(lib, "#/lib/alglib" + "/libalglib.so")
libInstall = env.Install(BUILD_DIR, lib)
# # static libraries get the suffix "static" which allos scons to correctly resolve the dependencies 
# # of the shared libaries on the static libraries on windows
libStatic = env.StaticLibrary(target = "sgpp%sstatic" % moduleName,
                              source = objs,
                              SHLIBPREFIX = 'lib')
libStaticInstall = env.Install(BUILD_DIR, libStatic)
env.Depends(libInstall, libStaticInstall)

if env['SG_PYTHON']:
  py_env = env.Clone()
  
  py_env.AppendUnique(CPPFLAGS=['-w'])
  if env['PLATFORM']=='cygwin':
      py_env.Append(LIBS=['python2.7'])    
  elif env['PLATFORM']=='darwin':
      py_env['SHLIBSUFFIX'] = '.so'
  
  # build python module with swig
  py_env.AppendUnique(SWIGFLAGS=['-c++', '-python'] + \
                        ['-D' + c for c in py_env['CPPDEFINES']],
                      CPPPATH=['#/%s' % moduleName])
  py_env.SharedLibrary(target=os.path.join('#', PYSGPP_BUILD_PATH, moduleName),
                       source=[os.path.join("build", "pysgpp", "%s.i" % moduleName)],
                       SHLIBPREFIX='_',
                       CPPFLAGS=['--std=c++11', '-Wno-cast-qual'],
                       LIBPATH = [BUILD_DIR, '#/lib/alglib'],
                       LIBS=['sgppbase', 'sgppdatadriven', 'sgppsolver', 'sgpppde', 'libalglib'])
  libInstallPython = py_env.Install(os.path.join('#', PYSGPP_BUILD_PATH), os.path.join("build", "pysgpp", "%s.py" % moduleName))

Import('libraryTargetList')
Import('installTargetList')
libraryTargetList.append(lib)
installTargetList.append(libInstall)

if env['SG_PYTHON']:
    installTargetList.append(libInstallPython)
