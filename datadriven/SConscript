# Copyright (C) 2008-today The SG++ project
# This file is part of the SG++ project. For conditions of distribution and
# use, please see the copyright notice provided with SG++ or at
# sgpp.sparsegrids.org

import os
import fnmatch
import subprocess

Import('env')
Import('BUILD_DIR')
Import('EXAMPLE_DIR')
Import('PYSGPP_BUILD_PATH')
Import('moduleName')
Import('libraryTargetList')
Import('installTargetList')
Import('exampleTargetList')
Import('headerSourceList')
Import('headerDestList')
Import('lintAction')

avxFolders = ['src/sgpp/datadriven/operation/hash/OperationMultipleEvalSubspace/', 'src/sgpp/datadriven/operation/hash/OperationMultiEvalStreaming']

avx_env = env.Clone()
avxCPPFLAGS = filter(lambda flag: flag != '-msse3', avx_env['CPPFLAGS'])
avx_env['CPPFLAGS'] = avxCPPFLAGS
# avx_env.Remove(CPPFLAGS = '-msse3')
avx_env.Append(CPPFLAGS='-mavx')

def isAVXFolder(folder):
    for avxFolder in avxFolders:
        if folder.startswith(avxFolder):
            return True
    return False

# the order in this list matters!
moduleDependencies = ['sgpppde', 'sgppsolver', 'sgppbase']
Export('moduleDependencies')

libname = "sgpp%s" % moduleName
if env['USE_STATICLIB']:
    libname += "static"
    for i, _ in enumerate(moduleDependencies):
        moduleDependencies[i] = "%sstatic" % moduleDependencies[i]
Export('libname')

additionalDependencies = []
if env['USE_OCL']:
    additionalDependencies += ['OpenCL']

moduleDependencies = moduleDependencies + additionalDependencies

cpps = []
hpps = []
objs = []

for currentFolder, subdirNames, fileNames in os.walk("src", topdown=True):
  if os.path.exists(os.path.join(currentFolder, "SConscript")):
    cppsSubmodule, hppsSubmodule, objsSubmodule = \
            env.SConscript(os.path.join(currentFolder, "SConscript"))
    objs += objsSubmodule
    for hpp in hppsSubmodule:
      headerSourceList.append(os.path.join(moduleName, hpp))
      headerDestList.append(hpp.split(os.sep, 1)[1])
    # remove subfolders from iteration, as they are already processed (this is why topdown=True is also required
    subdirNames[:] = []
  else:
    for fileName in fnmatch.filter(fileNames, '*.cpp'):
      cpp = os.path.join(currentFolder, fileName)
      cpps.append(cpp)
      objs.append(env.SharedObject(cpp))
    if currentFolder != 'src':
      for fileName in fnmatch.filter(fileNames, '*.hpp'):
        hpp = os.path.join(currentFolder, fileName)
        hpps.append(hpp)
        headerSourceList.append(os.path.join(moduleName, hpp))
        headerDestList.append(hpp.split(os.sep, 1)[1])

env.AppendUnique(LIBPATH=[BUILD_DIR])

if env['USE_STATICLIB']:
    # building static libraries is the same for unix and windows platforms
    libsuffix = env['LIBSUFFIX']
    lib = env.StaticLibrary(target=libname,
                            source=objs,
                            LIBS=moduleDependencies)
else:
    # building of shared libraries differs
    libsuffix = env['SHLIBSUFFIX']
    lib = env.SharedLibrary(target=libname,
                            source=objs,
                            LIBPATH=BUILD_DIR,
                            LIBS=moduleDependencies)

for lib_str in moduleDependencies:
    if lib_str.startswith("sgpp"):
        env.Depends(lib, os.path.join("#", BUILD_DIR.path,
                                      "%s%s%s" % (env["LIBPREFIX"],
                                                  lib_str,
                                                  libsuffix)))

libInstall = env.Install(BUILD_DIR, lib)

if env['RUN_CPPLINT']:
    for path in cpps + hpps:
        lintCommand = env.Command(path + ".lint", path, lintAction)
        env.Depends(lib, lintCommand)

if not env['NO_UNIT_TESTS'] and env['SG_PYTHON']:
  Import('testTargetList')
  py_test_env = env.Clone()
  moduleTest = py_test_env.Test(os.path.join('tests', 'test_%s.py' % moduleName))
  testTargetList.append(moduleTest)

# build examples
if env["ARCH"] != "mic":
    example_env = env.Clone()
    example_env.AppendUnique(LIBS=[libname] + moduleDependencies)
    for fileName in os.listdir("examples"):
        if fnmatch.fnmatch(fileName, "*.cpp"):
            example = example_env.Program(source=os.path.join("examples", fileName))
            example_env.Requires(example, libInstall)
            exampleTargetList.append(example)

# build examples for mic
if env["ARCH"] == "mic":
    example_env = env.Clone()
    example_env.AppendUnique(LIBS=[libname] + moduleDependencies)
    for fileName in os.listdir("examplesMIC"):
        if fnmatch.fnmatch(fileName, "*.cpp"):
            example = example_env.Program(source=os.path.join("examplesMIC", fileName))
            example_env.Requires(example, libInstall)
            exampleTargetList.append(example)

# build unit tests
if env['COMPILE_BOOST_TESTS']:
    Import('boostTestTargetList')
    test_env = env.Clone()
    test_env.AppendUnique(LIBPATH=[BUILD_DIR])
    test_env.AppendUnique(LIBS=[libname] + moduleDependencies + ["boost_unit_test_framework", "z"])
    testObjects = []
    for fileName in os.listdir("tests"):
        if fnmatch.fnmatch(fileName, "*.cpp"):
            testObjects += [test_env.Object(source=os.path.join("tests", fileName))]
    if len(testObjects) > 0:
        fileName = os.path.join("tests", "test_{}_boost".format(moduleName)) + \
                (".exe" if env['PLATFORM'] == 'win32' else '')
        test = test_env.Program(fileName, testObjects)
        test_env.Requires(test, libInstall)
        if env['RUN_BOOST_TESTS']:
            testRun = test_env.BoostTest(fileName + "_run", source=fileName)
            boostTestTargetList.append(testRun)

# build unit tests
if env['COMPILE_BOOST_PERFORMANCE_TESTS']:
    test_env = env.Clone()
    test_env.AppendUnique(LIBS=[libname] + moduleDependencies + ["boost_unit_test_framework", "z"])
    testObjects = []
    for fileName in os.listdir("performanceTests"):
        if fnmatch.fnmatch(fileName, "*.cpp"):
            testObjects += [test_env.Object(source=os.path.join("performanceTests", fileName))]
    if len(testObjects) > 0:
        fileName = os.path.join("performanceTests", "test_{}_performance".format(moduleName))
        test = test_env.Program(fileName, testObjects)
        test_env.Requires(test, libInstall)

libraryTargetList.append(lib)
installTargetList.append(libInstall)
