# Copyright (C) 2008-today The SG++ project
# This file is part of the SG++ project. For conditions of distribution and
# use, please see the copyright notice provided with SG++ or at
# sgpp.sparsegrids.org

import os
import fnmatch

Import('env')
Import('BUILD_DIR')
Import('EXAMPLE_DIR')
Import('PYSGPP_BUILD_PATH')
Import('moduleName')
Import('libraryTargetList')
Import('installTargetList')
Import('exampleTargetList')

avxFolders = ['src/sgpp/datadriven/operation/hash/OperationMultipleEvalSubspace/', 'src/sgpp/datadriven/operation/hash/OperationMultiEvalStreaming']

avx_env = env.Clone()
avxCPPFLAGS = filter(lambda flag: flag != '-msse3', avx_env['CPPFLAGS'])
avx_env['CPPFLAGS'] = avxCPPFLAGS
# avx_env.Remove(CPPFLAGS = '-msse3')
avx_env.Append(CPPFLAGS='-mavx')

def isAVXFolder(folder):
    for avxFolder in avxFolders:
        if folder.startswith(avxFolder):
            return True
    return False

libs = ['sgppbase', 'sgppsolver', 'sgpppde']
if env['USE_OCL']:
    libs += ['OpenCL']

objs = []
for currentFolder, subdirNames, fileNames in os.walk("src", topdown=True):
  if os.path.exists(os.path.join(currentFolder, "SConscript")):
    objsSubmodule = env.SConscript(os.path.join(currentFolder, "SConscript"))
    objs += objsSubmodule
    # remove subfolders from iteration, as they are already processed (this is why topdown=True is also required
    subdirNames[:] = []
  else:
    for fileName in fnmatch.filter(fileNames, '*.cpp'):
      sourceFile = os.path.join(currentFolder, fileName)
      objs.append(env.SharedObject(sourceFile))

env.AppendUnique(LIBPATH=[BUILD_DIR])
lib = env.SharedLibrary(target="sgpp%s" % moduleName,
                        source=objs,
                        LIBS=libs)


env.Depends(lib, "#/" + BUILD_DIR.path + "/" + env["LIBPREFIX"] + "sgppbase" + env["SHLIBSUFFIX"])
env.Depends(lib, "#/" + BUILD_DIR.path + "/" + env["LIBPREFIX"] + "sgpppde" + env["SHLIBSUFFIX"])
env.Depends(lib, "#/" + BUILD_DIR.path + "/" + env["LIBPREFIX"] + "sgppsolver" + env["SHLIBSUFFIX"])

libInstall = env.Install(BUILD_DIR, lib)

if not env['NO_UNIT_TESTS'] and env['SG_PYTHON']:
  Import('testTargetList')
  moduleTest = env.Test(os.path.join('tests', 'test_%s.py' % moduleName))
  env.Requires(moduleTest, libInstall)
  testTargetList.append(moduleTest)

# # build examples
# example_env = env.Clone()
# example_env.AppendUnique(LIBPATH=[BUILD_DIR, "#/lib/alglib"])
# example_env.AppendUnique(LIBS=libs + ["sgpp%s" % moduleName])
# for fileName in os.listdir("examples"):
#     if fnmatch.fnmatch(fileName, "*.cpp"):
#         example = example_env.Program(source=os.path.join("examples", fileName),
#                               # LIBPATH=[BUILD_DIR, "#/lib/alglib"],
#                               # LIBS=libs + ["sgpp%s" % moduleName]
#                               )
#         example_env.Requires(example, libInstall)
#         exampleTargetList.append(example)

# build unit tests
if env['COMPILE_BOOST_TESTS']:
    Import('boostTestTargetList')
    test_env = env.Clone()
    test_env.AppendUnique(LIBPATH=[BUILD_DIR])
    test_env.AppendUnique(LIBS=libs + ["sgpp%s" % moduleName, "boost_unit_test_framework", "z"])
    testObjects = []
    for fileName in os.listdir("tests"):
        if fnmatch.fnmatch(fileName, "*.cpp"):
            testObjects += [test_env.Object(source=os.path.join("tests", fileName))]
    if len(testObjects) > 0:
        fileName = os.path.join("tests", "test_{}_boost".format(moduleName))
        test = test_env.Program(fileName, testObjects)
        test_env.Requires(test, libInstall)
        if env['RUN_BOOST_TESTS']:
            testRun = test_env.BoostTest(fileName + "_run", source=fileName)
            boostTestTargetList.append(testRun)
            
# build unit tests
if env['COMPILE_BOOST_PERFORMANCE_TESTS']:
    test_env = env.Clone()
    test_env.AppendUnique(LIBS=libs + ["sgpp%s" % moduleName, "boost_unit_test_framework", "z"])
    testObjects = []
    for fileName in os.listdir("performanceTests"):
        if fnmatch.fnmatch(fileName, "*.cpp"):
            testObjects += [test_env.Object(source=os.path.join("performanceTests", fileName))]
    if len(testObjects) > 0:
        fileName = os.path.join("performanceTests", "test_{}_performance".format(moduleName))
        test = test_env.Program(fileName, testObjects)
        test_env.Requires(test, libInstall)

Import('libraryTargetList')
Import('installTargetList')
libraryTargetList.append(lib)
installTargetList.append(libInstall)
