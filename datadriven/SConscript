# Copyright (C) 2008-today The SG++ project
# This file is part of the SG++ project. For conditions of distribution and
# use, please see the copyright notice provided with SG++ or at
# sgpp.sparsegrids.org

import Helper
import ModuleHelper

def checkForLibrary(name, flag, headers, libraries):
  if type(headers) is str: headers = [headers]
  if type(libraries) is str: libraries = [libraries]
  if libraries is None: libraries = []

  if (flag not in config.env) or (not config.env[flag]):
    Helper.printInfo("sgpp::datadriven will be compiled without {} (flag not set).".format(name))
  elif not config.CheckHeader(headers, language="C++"):
    Helper.printErrorAndExit("The flag {} was given, but the".format(flag),
                             "necessary headers {} were not found.".format(headers))
  elif (len(libraries) > 0) and (not config.CheckLib(libraries, language="C++")):
    Helper.printErrorAndExit("The flag {} was given, but the".format(flag),
                             "necessary libraries {} were not found.".format(libraries))
  else:
    Helper.printInfo("sgpp::datadriven will be compiled with {}.".format(name))
    additionalDependencies.extend(libraries)
    env["CPPDEFINES"][flag] = "1"

Import("*")

moduleDependencies = ["sgppoptimization", "sgpppde", "sgppsolver", "sgppbase"]

additionalDependencies = []
additionalBoostTestDependencies = []

checkForLibrary("CGAL",   "USE_CGAL",   "CGAL/basic.h", None)

if env["USE_OCL"]:
  additionalDependencies += ["OpenCL"]
if env["USE_GSL"]:
  additionalDependencies += ["gsl", "gslcblas"]
if env["USE_CGAL"]:
  additionalDependencies += ["CGAL"]

additionalBoostTestDependencies = ["z"]
performanceTestFlag = "COMPILE_BOOST_PERFORMANCE_TESTS"
performanceTestRunFlag = "RUN_BOOST_PERFORMANCE_TESTS"

if env[performanceTestFlag]:
  additionalBoostTestDependencies.extend(["boost_filesystem", "boost_system"])

module = ModuleHelper.Module(moduleDependencies, additionalDependencies,
                             additionalBoostTestDependencies)

module.scanSource()
module.buildLibrary()
module.generatePythonDocstrings()

if env["ARCH"] == "mic":
  module.buildExamples("examplesMIC")
else:
  module.buildExamples()
if env["USE_OCL"]:
  module.buildExamples("examplesOCL",
      additionalExampleDependencies=["boost_program_options",
                                     "boost_filesystem",
                                     "boost_system"])

module.runPythonTests()
module.buildBoostTests()
module.runBoostTests()
module.buildBoostTests("performanceTests", compileFlag=performanceTestFlag)
module.runBoostTests("performanceTests", compileFlag=performanceTestFlag,
                     runFlag=performanceTestRunFlag)
module.runCpplint()
