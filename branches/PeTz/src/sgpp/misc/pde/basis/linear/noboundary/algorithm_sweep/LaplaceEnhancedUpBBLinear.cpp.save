/******************************************************************************
* Copyright (C) 2012 Technische Universitaet Muenchen                         *
* This file is part of the SG++ project. For conditions of distribution and   *
* use, please see the copyright notice at http://www5.in.tum.de/SGpp          *
******************************************************************************/
// @author Alexander Heinecke (Alexander.Heinecke@mytum.de)

#include "misc/pde/basis/linear/noboundary/algorithm_sweep/LaplaceEnhancedUpBBLinear.hpp"

namespace sg
{
namespace pde
{



LaplaceEnhancedUpBBLinear::LaplaceEnhancedUpBBLinear(sg::base::GridStorage* storage) :
        storage(storage), boundingBox(storage->getBoundingBox()),
        algoDims(storage->getAlgorithmicDimensions()), numAlgoDims_(storage->getAlgorithmicDimensions().size())
{
}

LaplaceEnhancedUpBBLinear::~LaplaceEnhancedUpBBLinear()
{
}

void LaplaceEnhancedUpBBLinear::operator()(sg::base::DataMatrix& source, sg::base::DataMatrix& result, grid_iterator& index, size_t dim)
{
    sg::base::DataVector fl(this->numAlgoDims_);
    sg::base::DataVector fr(this->numAlgoDims_);
    fl.setAll(0.0);
    fr.setAll(0.0);

    double q = this->boundingBox->getIntervalWidth(this->algoDims[dim]);
    double t = this->boundingBox->getIntervalOffset(this->algoDims[dim]);

    bool useBB = false;

    if (q != 1.0 || t != 0.0)
    {
        useBB = true;
    }

	if (useBB)
	{
		recBB(source, result, index, dim, fl, fr, q, t);
	}
	else
	{
		rec(source, result, index, dim, fl, fr);
	}
}

void LaplaceEnhancedUpBBLinear::rec(sg::base::DataMatrix& source, sg::base::DataMatrix& result, grid_iterator& index, size_t dim, sg::base::DataVector& fl, sg::base::DataVector& fr)
{
	size_t seq = index.seq();

    sg::base::DataVector fml(this->numAlgoDims_);
    sg::base::DataVector fmr(this->numAlgoDims_);
    fml.setAll(0.0);
    fmr.setAll(0.0);
	fl.setAll(0.0);
	fr.setAll(0.0);

	sg::base::GridStorage::index_type::level_type current_level;
	sg::base::GridStorage::index_type::index_type current_index;

	if(!index.hint())
	{
		index.left_child(this->algoDims[dim]);
		if(!storage->end(index.seq()))
		{
			rec(source, result, index, dim, fl, fml);
		}

		index.step_right(this->algoDims[dim]);
		if(!storage->end(index.seq()))
		{
			rec(source, result, index, dim, fmr, fr);
		}

		index.up(this->algoDims[dim]);
	}

	index.get(this->algoDims[dim], current_level, current_index);

    double* p_src = source.getPointer();
    double* p_res = result.getPointer();
    double* p_fl = fl.getPointer();
    double* p_fr = fr.getPointer();
    double* p_fml = fml.getPointer();
    double* p_fmr = fmr.getPointer();

    // double fm = fml + fmr;
    // double alpha_value = source[seq];
    // result[seq] = fm;
    // double tmp = ((fm/2.0) + ((alpha_value/static_cast<double>(1<<(current_level+1)))));
    #pragma simd
	for (size_t i = 0; i < this->numAlgoDims_; i++)
	{
	    double fm = p_fml[i] + p_fmr[i];
	    double alpha_value = p_src[(seq*this->numAlgoDims_)+i];
	    p_res[(seq*this->numAlgoDims_)+i] = fm;
	    double tmp = (fm/2.0) + (alpha_value/static_cast<double>(1<<(current_level+1)));
	    p_fl[i] += tmp;
	    p_fr[i] += tmp;
	}

	// Gradient
	p_res[(seq*this->numAlgoDims_)+dim] = 0.0;
    p_fml[dim] = 0.0;
    p_fmr[dim] = 0.0;
    p_fl[dim] = 0.0;
    p_fr[dim] = 0.0;
}

void LaplaceEnhancedUpBBLinear::recBB(sg::base::DataMatrix& source, sg::base::DataMatrix& result, grid_iterator& index, size_t dim, sg::base::DataVector& fl, sg::base::DataVector& fr, double q, double t)
{
	size_t seq = index.seq();

    sg::base::DataVector fml(this->numAlgoDims_);
    sg::base::DataVector fmr(this->numAlgoDims_);
    fml.setAll(0.0);
    fmr.setAll(0.0);
    fl.setAll(0.0);
    fr.setAll(0.0);

	sg::base::GridStorage::index_type::level_type current_level;
	sg::base::GridStorage::index_type::index_type current_index;

	if(!index.hint())
	{
		index.left_child(this->algoDims[dim]);
		if(!storage->end(index.seq()))
		{
			recBB(source, result, index, dim, fl, fml, q, t);
		}

		index.step_right(this->algoDims[dim]);
		if(!storage->end(index.seq()))
		{
			recBB(source, result, index, dim, fmr, fr, q ,t);
		}

		index.up(this->algoDims[dim]);
	}

    index.get(this->algoDims[dim], current_level, current_index);

    double* p_src = source.getPointer();
    double* p_res = result.getPointer();
    double* p_fl = fl.getPointer();
    double* p_fr = fr.getPointer();
    double* p_fml = fml.getPointer();
    double* p_fmr = fmr.getPointer();

    // double fm = fml + fmr;
    // double alpha_value = source[seq];
    // result[seq] = fm;
    // double tmp = ((fm/2.0) + ((alpha_value/static_cast<double>(1<<(current_level+1)))*q));
    #pragma simd
    for (size_t i = 0; i < this->numAlgoDims_; i++)
    {
        double fm = p_fml[i] + p_fmr[i];
        double alpha_value = p_src[(seq*this->numAlgoDims_)+i];
        p_res[(seq*this->numAlgoDims_)+i] = fm;
        double tmp = ((fm/2.0) + ((alpha_value/static_cast<double>(1<<(current_level+1)))*q));
        p_fl[i] += tmp;
        p_fr[i] += tmp;
    }

    // Gradient
    p_res[(seq*this->numAlgoDims_)+dim] = 0.0;
    p_fml[dim] = 0.0;
    p_fmr[dim] = 0.0;
    p_fl[dim] = 0.0;
    p_fr[dim] = 0.0;
}

// namespace pde
}
// namespace sg
}
