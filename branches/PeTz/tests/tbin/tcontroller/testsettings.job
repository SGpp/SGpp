# @todo (khakhutv) check default values, add if something is missing

[learner]
# Do you want to make classification or regression
# type = regression
type = classification

# What action should be performed?
# Possible options: learn, apply, fold
action = learn

# Should the learning with testing be performed?
# default: no  
with_testing = yes 

# What regularization operator should be used?
# Possible values: laplace, identity
regularization_operator = laplace

# Regularization parameter to be used
regularization_parameter = 0.000001


[refinement]
# Configuration of refinement strategy
# If neither of convergence criteria is defined, refinement iterations will continue,
# until the program will be terminated externally

# Number of points, that should be refined in each iteration
# Can be either an integer value for absolute number of points
# or float value for the part of total available points that can be refined
# Default value: 1
points = 1

# Only points with absolute value of refinement criterion (e.g. alpha for classification, 
# error for regression) greater or equal to this threshold will be refined
threshold = 0.0

# Max. number of iterations, in each iteration some points are refined
# Refinement iterations continue until max. number of iteration or any of other criterion reached
iterations = 6

# Max. size of grid. If the grid has greater or equal number of points, iteration stops.
# gridsize = 40000

# MSE on validation data, that has to be achieved, so that iterative refinement will stop
# mse = 0.0003

# @todo (khakhutv) add comment here
# epochs = 20



[solver]
# What algorithm for linear solver should be used?
# For the time being only CG is possible
solver = CG

# Convergence criterion for iterative conjugate gradients method
# defines the proportion: end norm of residual to start norm of residual.
# CG continues until either this proportion or imax reached
# default: 0.0001
accuracy = 0.0001

# Convergence criterion for iterative conjugate gradients method
# defines the maximal number of iterations.
# CG continues until either imax or accuracy proportion reached
# default: 400
imax = 400

# Maximal accuracy.
# If the norm of the residuum falls below this threshold, stop the CG iterations
# default: 10e-20
# max_threshold = 10e-20




[data]
# Configuration of data sets for training and validation

# Type of input files
# Currently only arff is supported
# possible values: arff
file_type = arff

# Path to the file with validation data
test_file = testdata.arff

# Path to the file with training data, multiple definitions are possible for file folding cross-validation
train_file = traindata.arff
# train_file = traindata2.arff

# Path to the file with points, in which the values should be evaluated
# points_file = points.arff.gz




[grid]
#Configuration of the grid

# type of grid file
# type = arff
#
# Path to the grid file
# filename = testgrid.tar.gz

# Leve of the initial grid
level = 2

# Use polynomial basis function
# Define the order of the polynomial
# polynomial = 2

# Type of the border functions
# Possible values: NONE, TRAPEZOIDBOUNDARY, COMPLETEBOUNDARY
# Default value: NONE
# border = TRAPEZOIDBOUNDARY




[checkpoints]
#Configuration of points to store/restore the job

# Name of the job. Used in the filename of a checkpoint
name = classification_job

# Restore from the following iteration, if nothing is set, the new learner will be
# created
# restore_iteration = 0

# Make a checkpoints every "interval" iterations
# e.g. for interval = 2: iterations 0, 2, 4, 6 ... will be saved
# Default value: 1
interval = 2

# Path to the checkpoint files
# Default value: .
path = .




[output]
# If you need the progress information, define it here

# Type of presentor defines which information should be presented and in which form
# (see documentation of a class with the same name for more details)
# Several comma separated values can be defined
# Possible values:
# 	InfoToFile, InfoToScreen
# type = InfoToScreen

# For InfoToFile type give the filename
# filename = 




[folding]
# This section contains the parameters required for N-Fold-Crossvalidation
#
# Denines the type of data folding. Possible values:
# fold - learn a dataset with a random n-fold
# folds - learn a dataset with a sequential n-fold
# foldf - learn a dataset with a n-fold from a set of files
# foldstratified, foldr - learn a dataset with a stratified n-fold
# type = fold
# 
# Defines the number of Folds:
# level = 10
# 
# Defines the seed for random n-fold, Default the current timestamp is taken
# seed = 
