# Copyright (C) 2009 Technische Universitaet Muenchen
# This file is part of the SG++ project. For conditions of distribution and
# use, please see the copyright notice at http://www5.in.tum.de/SGpp

# author Dirk Pflueger (Dirk.Pflueger@in.tum.de)

Import('env')
Import('BUILD_DIR')
Import('moduleName')

dependencies = []

srcs = Split("""
application/ScreenOutput.cpp
basis/linear/boundary/algorithm_sweep/DehierarchisationLinearBoundary.cpp
basis/linear/boundary/algorithm_sweep/HierarchisationLinearBoundary.cpp
basis/linear/boundary/operation/OperationEvalLinearBoundary.cpp
basis/linear/boundary/operation/OperationHierarchisationLinearBoundary.cpp
basis/linear/boundary/operation/OperationMultipleEvalLinearBoundary.cpp
basis/linear/boundary/operation/OperationQuadratureLinearBoundary.cpp
basis/linear/noboundary/operation/OperationFirstMomentLinear.cpp
basis/linear/noboundary/operation/OperationSecondMomentLinear.cpp
basis/linear/noboundary/algorithm_sweep/DehierarchisationLinear.cpp
basis/linear/noboundary/algorithm_sweep/HierarchisationLinear.cpp
basis/linear/noboundary/algorithm_sweep/StencilDehierarchisationLinear.cpp
basis/linear/noboundary/algorithm_sweep/StencilHierarchisationLinear.cpp
basis/linear/noboundary/operation/OperationEvalLinear.cpp
basis/linear/noboundary/operation/OperationHierarchisationLinear.cpp
basis/linear/noboundary/operation/OperationStencilHierarchisationLinear.cpp
basis/linear/noboundary/operation/OperationQuadratureLinear.cpp
basis/linear/noboundary/operation/OperationMultipleEvalLinear.cpp
basis/modbspline/operation/OperationEvalModBspline.cpp
basis/modbspline/operation/OperationHierarchisationModBspline.cpp
basis/modbspline/operation/OperationMultipleEvalModBspline.cpp
basis/modlinear/algorithm_sweep/DehierarchisationModLinear.cpp
basis/modlinear/algorithm_sweep/HierarchisationModLinear.cpp
basis/modlinear/algorithm_sweep/StencilDehierarchisationModLinear.cpp
basis/modlinear/algorithm_sweep/StencilHierarchisationModLinear.cpp
basis/modlinear/operation/OperationEvalModLinear.cpp
basis/modlinear/operation/OperationHierarchisationModLinear.cpp
basis/modlinear/operation/OperationStencilHierarchisationModLinear.cpp
basis/modlinear/operation/OperationMultipleEvalModLinear.cpp
basis/modpoly/algorithm_sweep/HierarchisationModPoly.cpp
basis/modpoly/algorithm_sweep/DehierarchisationModPoly.cpp
basis/modpoly/operation/OperationEvalModPoly.cpp
basis/modpoly/operation/OperationHierarchisationModPoly.cpp
basis/modpoly/operation/OperationMultipleEvalModPoly.cpp
basis/modwavelet/operation/OperationEvalModWavelet.cpp
basis/modwavelet/operation/OperationHierarchisationModWavelet.cpp
basis/modwavelet/operation/OperationMultipleEvalModWavelet.cpp
basis/poly/algorithm_sweep/HierarchisationPoly.cpp
basis/poly/algorithm_sweep/DehierarchisationPoly.cpp
basis/poly/operation/OperationEvalPoly.cpp
basis/poly/operation/OperationHierarchisationPoly.cpp
basis/poly/operation/OperationQuadraturePoly.cpp
basis/poly/operation/OperationMultipleEvalPoly.cpp
basis/prewavelet/operation/OperationConvertPrewavelet.cpp
basis/prewavelet/operation/OperationEvalPrewavelet.cpp
basis/prewavelet/operation/OperationHierarchisationPrewavelet.cpp
basis/prewavelet/operation/OperationMultipleEvalPrewavelet.cpp
basis/prewavelet/algorithm_sweep/ConvertPrewaveletToLinear.cpp
basis/prewavelet/algorithm_sweep/ConvertLinearToPrewavelet.cpp
datatypes/DataMatrix.cpp
datatypes/DataMatrixSP.cpp
datatypes/DataVector.cpp
datatypes/DataVectorSP.cpp
grid/common/BoundingBox.cpp
grid/common/DirichletGridConverter.cpp
grid/common/DirichletUpdateVector.cpp
grid/generation/hashmap/AbstractRefinement.cpp
grid/generation/hashmap/HashRefinement.cpp
grid/generation/hashmap/HashRefinementBoundaries.cpp
grid/generation/hashmap/HashRefinementBoundariesMaxLevel.cpp
grid/generation/refinement_strategy/RefinementDecorator.cpp
grid/generation/refinement_strategy/ANOVARefinement.cpp
grid/generation/BoundaryGridGenerator.cpp
grid/generation/PrewaveletGridGenerator.cpp
grid/generation/SquareRootGridGenerator.cpp
grid/generation/StandardGridGenerator.cpp
grid/generation/functors/ANOVACoarseningFunctor.cpp
grid/generation/functors/SurplusCoarseningFunctor.cpp
grid/generation/functors/SurplusRefinementFunctor.cpp
grid/generation/TrapezoidBoundaryGridGenerator.cpp
grid/generation/TruncatedTrapezoidGridGenerator.cpp
grid/Grid.cpp
grid/type/GridStencil.cpp
grid/type/LinearBoundaryGrid.cpp
grid/type/LinearGrid.cpp
grid/type/LinearGridStencil.cpp
grid/type/LinearTrapezoidBoundaryGrid.cpp
grid/type/ModBsplineGrid.cpp
grid/type/ModLinearGrid.cpp
grid/type/ModLinearGridStencil.cpp
grid/type/ModPolyGrid.cpp
grid/type/ModWaveletGrid.cpp
grid/type/PolyGrid.cpp
grid/type/PrewaveletGrid.cpp
grid/type/SquareRootGrid.cpp
grid/type/TruncatedTrapezoidGrid.cpp
tools/EvalCuboidGenerator.cpp
tools/GridPrinter.cpp
tools/SGppStopwatch.cpp
tools/StdNormalDistribution.cpp
tools/AlignedMemory.cpp
basis/linearstretched/boundary/algorithm_sweep/DehierarchisationLinearStretchedBoundary.cpp
basis/linearstretched/boundary/algorithm_sweep/HierarchisationLinearStretchedBoundary.cpp
basis/linearstretched/boundary/operation/OperationEvalLinearStretchedBoundary.cpp
basis/linearstretched/boundary/operation/OperationHierarchisationLinearStretchedBoundary.cpp
basis/linearstretched/boundary/operation/OperationMultipleEvalLinearStretchedBoundary.cpp
basis/linearstretched/noboundary/algorithm_sweep/DehierarchisationLinearStretched.cpp
basis/linearstretched/noboundary/algorithm_sweep/HierarchisationLinearStretched.cpp
basis/linearstretched/noboundary/operation/OperationEvalLinearStretched.cpp
basis/linearstretched/noboundary/operation/OperationHierarchisationLinearStretched.cpp
basis/linearstretched/noboundary/operation/OperationMultipleEvalLinearStretched.cpp
grid/common/Stretching.cpp
grid/generation/StretchedTrapezoidBoundaryGridGenerator.cpp
grid/generation/functors/SurplusVolumeRefinementFunctor.cpp
grid/GridDataBase.cpp
grid/type/LinearStretchedGrid.cpp
grid/type/LinearStretchedTrapezoidBoundaryGrid.cpp
tools/EvalCuboidGeneratorForStretching.cpp
tools/GridPrinterForStretching.cpp
tools/OperationQuadratureMC.cpp
tools/PrecisionConverter.cpp

operation/BaseOpFactory.cpp
""")

objs = []
for sourceFile in srcs:
    objs.append(env.SharedObject(sourceFile))

lib = env.SharedLibrary(target="sgpp" + moduleName, source = objs)
env.Install(BUILD_DIR, lib)
# # static libraries get the suffix "static" which allos scons to correctly resolve the dependencies 
# # of the shared libaries on the static libraries on windows
libStatic = env.StaticLibrary(target = "sgpp" + moduleName + "static", source = objs, SHLIBPREFIX = 'lib')
env.Install(BUILD_DIR, libStatic)

Export('srcs')
Export('objs')
Export('dependencies')
