#############################################################################
# This file is part of sgpp, a program package making use of spatially      #
# adaptive sparse grids to solve numerical problems                         #
#                                                                           #
# Copyright (C)                                                             #
#                                                                           #
#                                                                           #
# pysgpp is free software; you can redistribute it and/or modify            #
# it under the terms of the GNU Lesser General Public License as published  #
# by the Free Software Foundation; either version 3 of the License, or      #
# (at your option) any later version.                                       #
#                                                                           #
# pysgpp is distributed in the hope that it will be useful,                 #
# but WITHOUT ANY WARRANTY; without even the implied warranty of            #
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the             #
# GNU Lesser General Public License for more details.                       #
#                                                                           #
# You should have received a copy of the GNU Lesser General Public License  #
# along with pysgpp; if not, write to the Free Software                     #
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA #
# or see <http://www.gnu.org/licenses/>.                                    #
#############################################################################


Import("env")

srcs = Split("""
data/DataVector.cpp

grid/Grid.cpp

grid/common/BoundingBox.cpp
grid/common/DirichletUpdateVector.cpp

grid/type/LinearBoundaryGrid.cpp
grid/type/LinearTrapezoidBoundaryGrid.cpp
grid/type/LinearGrid.cpp
grid/type/ModLinearGrid.cpp
grid/type/ModPolyGrid.cpp
grid/type/PolyGrid.cpp

grid/generation/StandardGridGenerator.cpp
grid/generation/BoundaryGridGenerator.cpp
grid/generation/TrapezoidBoundaryGridGenerator.cpp

basis/linear/operation/classification/OperationBLinear.cpp
basis/linear/operation/common/OperationEvalLinear.cpp
basis/linear/operation/common/OperationHierarchisationLinear.cpp
basis/modlinear/operation/classification/OperationBModLinear.cpp
basis/modlinear/operation/common/OperationEvalModLinear.cpp
basis/modlinear/operation/common/OperationHierarchisationModLinear.cpp
basis/modpoly/operation/classification/OperationBModPoly.cpp
basis/modpoly/operation/common/OperationEvalModPoly.cpp
basis/modpoly/operation/common/OperationHierarchisationModPoly.cpp
basis/poly/operation/classification/OperationBPoly.cpp
basis/poly/operation/common/OperationEvalPoly.cpp
basis/poly/operation/common/OperationHierarchisationPoly.cpp
basis/linearboundary/operation/common/OperationHierarchisationLinearBoundary.cpp
basis/linearboundary/operation/common/OperationEvalLinearBoundary.cpp
basis/linearboundary/operation/classification/OperationBLinearBoundary.cpp
basis/lineartrapezoidboundary/operation/common/OperationHierarchisationLinearTrapezoidBoundary.cpp
basis/lineartrapezoidboundary/operation/common/OperationEvalLinearTrapezoidBoundary.cpp
basis/lineartrapezoidboundary/operation/common/OperationEvalBBLinearTrapezoidBoundary.cpp
basis/lineartrapezoidboundary/operation/classification/OperationBLinearTrapezoidBoundary.cpp
basis/lineartrapezoidboundary/operation/finance/OperationDeltaLinearTrapezoidBoundary.cpp
basis/lineartrapezoidboundary/operation/finance/OperationGammaPartOneLinearTrapezoidBoundary.cpp
basis/lineartrapezoidboundary/operation/finance/OperationGammaPartTwoLinearTrapezoidBoundary.cpp
basis/lineartrapezoidboundary/operation/finance/OperationGammaPartThreeLinearTrapezoidBoundary.cpp
basis/lineartrapezoidboundary/operation/finance/OperationRiskfreeRateLinearTrapezoidBoundary.cpp

algorithm/classification/DMSystemMatrix.cpp
algorithm/pde/BlackScholesTimestepMatrix.cpp
algorithm/pde/HeatEquationTimestepMatrix.cpp

application/pde/BlackScholesSolver.cpp
application/pde/HeatEquationSolver.cpp

solver/sle/ConjugateGradients.cpp
solver/sle/BiCGStab.cpp
solver/ode/ExplicitEuler.cpp
solver/ode/CrankNicolson.cpp
solver/ode/ImplicitEuler.cpp

tools/common/StdNormalDistribution.cpp
tools/common/GridPrinter.cpp
tools/finance/IOToolBonnSG.cpp

""")



sg_env = env.Clone()

sg_env.Append(CPPPATH=['#/src/sgpp'])

src_objs = sg_env.SharedObject(srcs)
Export('src_objs')

libsgpp = sg_env.Library(target="sgpp", source = srcs + src_objs, SHLIBPREFIX = '_')
Export('libsgpp')
