# Copyright (C) 2009 Technische Universitaet Muenchen
# This file is part of the SG++ project. For conditions of distribution and
# use, please see the copyright notice at http://www5.in.tum.de/SGpp

# author Dirk Pflueger (Dirk.Pflueger@in.tum.de)

Import("env")

srcs = Split("""
pde/algorithm/HeatEquationParabolicPDESolverSystem.cpp
pde/algorithm/HeatEquationParabolicPDESolverSystemParallelOMP.cpp
pde/algorithm/PoissonEquationEllipticPDESolverSystemDirichlet.cpp
pde/algorithm/StdUpDown.cpp
pde/algorithm/UpDownOneOpDim.cpp
pde/algorithm/UpDownOneOpDimWithShadow.cpp
pde/algorithm/UpDownTwoOpDims.cpp
pde/algorithm/UpDownFourOpDims.cpp
pde/application/EllipticPDESolver.cpp
pde/application/HeatEquationSolver.cpp
pde/application/ParabolicPDESolver.cpp
pde/application/PDESolver.cpp
pde/application/PoissonEquationSolver.cpp
pde/basis/linear/boundary/algorithm_sweep/PhiPhiDownBBLinearBoundary.cpp
pde/basis/linear/boundary/algorithm_sweep/PhiPhiUpBBLinearBoundary.cpp
pde/basis/linear/boundary/operation/DowndPhidPhiBBIterativeLinearBoundary.cpp
pde/basis/linear/boundary/operation/UpdPhidPhiBBIterativeLinearBoundary.cpp
pde/basis/linear/boundary/operation/OperationLaplaceLinearBoundary.cpp
pde/basis/linear/boundary/operation/OperationLTwoDotProductLinearBoundary.cpp
pde/basis/linear/boundary/operation/OperationMatrixLTwoDotExplicitLinearBoundary.cpp
pde/basis/linear/noboundary/algorithm_sweep/PhiPhiDownBBLinear.cpp
pde/basis/linear/noboundary/algorithm_sweep/PhiPhiUpBBLinear.cpp
pde/basis/linear/noboundary/DowndPhidPhiBBIterativeLinear.cpp
pde/basis/linear/noboundary/operation/OperationLaplaceLinear.cpp
pde/basis/linear/noboundary/operation/OperationLTwoDotProductLinear.cpp
pde/basis/linear/noboundary/operation/OperationMatrixLTwoDotExplicitLinear.cpp
pde/basis/modlinear/algorithm_sweep/dPhidPhiDownModLinear.cpp
pde/basis/modlinear/algorithm_sweep/dPhidPhiUpModLinear.cpp
pde/basis/modlinear/algorithm_sweep/PhiPhiDownModLinear.cpp
pde/basis/modlinear/algorithm_sweep/PhiPhiUpModLinear.cpp
pde/basis/modlinear/operation/OperationLaplaceModLinear.cpp
pde/operation/OperationEllipticPDESolverSystem.cpp
pde/operation/OperationEllipticPDESolverSystemDirichlet.cpp
pde/operation/OperationEllipticPDESolverSystemFreeBoundaries.cpp
pde/operation/OperationParabolicPDESolverSystem.cpp
pde/operation/OperationParabolicPDESolverSystemDirichlet.cpp
pde/operation/OperationParabolicPDESolverSystemFreeBoundaries.cpp
pde/algorithm/LaserHeatEquationParabolicPDESolverSystemParallelOMP2D.cpp
pde/application/HeatEquationSolverWithStretching.cpp
pde/application/LaserHeatEquationSolver2D.cpp
pde/basis/linearstretched/boundary/algorithm_sweep/PhiPhiDownBBLinearStretchedBoundary.cpp
pde/basis/linearstretched/boundary/algorithm_sweep/PhiPhiUpBBLinearStretchedBoundary.cpp
pde/basis/linearstretched/boundary/DowndPhidPhiBBIterativeLinearStretchedBoundary.cpp
pde/basis/linearstretched/boundary/UpdPhidPhiBBIterativeLinearStretchedBoundary.cpp
pde/basis/linearstretched/boundary/operation/OperationLaplaceLinearStretchedBoundary.cpp
pde/basis/linearstretched/boundary/operation/OperationLTwoDotProductLinearStretchedBoundary.cpp
pde/basis/linearstretched/noboundary/algorithm_sweep/PhiPhiDownBBLinearStretched.cpp
pde/basis/linearstretched/noboundary/algorithm_sweep/PhiPhiUpBBLinearStretched.cpp
pde/basis/linearstretched/noboundary/DowndPhidPhiBBIterativeLinearStretched.cpp
pde/basis/linearstretched/noboundary/operation/OperationLaplaceLinearStretched.cpp
pde/basis/linearstretched/noboundary/operation/OperationLTwoDotProductLinearStretched.cpp
pde/basis/prewavelet/operation/OperationLaplacePrewavelet.cpp
pde/basis/prewavelet/algorithm_sweep/LaplaceDownGradientPrewavelet.cpp
pde/basis/prewavelet/algorithm_sweep/LaplaceUpGradientPrewavelet.cpp
pde/basis/prewavelet/algorithm_sweep/LaplaceUpPrewavelet.cpp
pde/operation/PdeOpFactory.cpp
""")



sg_env = env.Clone()

sg_env.Append(CPPPATH=['#/src/sgpp'])

src_objs_pde = sg_env.SharedObject(srcs)
Export('src_objs_pde')

libsgpppde = sg_env.SharedLibrary(target="sgpppde", source = src_objs_pde, SHLIBPREFIX = 'lib')
libsgpppdestatic = sg_env.StaticLibrary(target="sgpppde", source = src_objs_pde, SHLIBPREFIX = 'lib')

Export('libsgpppde')
Export('libsgpppdestatic')
