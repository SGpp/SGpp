/******************************************************************************
* Copyright (C) 2013 Technische Universitaet Muenchen                         *
* This file is part of the SG++ project. For conditions of distribution and   *
* use, please see the copyright notice at http://www5.in.tum.de/SGpp          *
******************************************************************************/
// @author Alexander Heinecke (Alexander.Heinecke@mytum.de)

#include "misc/pde/basis/linear/noboundary/algorithm_sweep/LaplaceEnhancedDownBBLinear.hpp"

namespace sg
{
namespace pde
{

LaplaceEnhancedDownBBLinear::LaplaceEnhancedDownBBLinear(sg::base::GridStorage* storage, size_t start_grad_dim, size_t num_grad_dims) :
        storage(storage), boundingBox(storage->getBoundingBox()), start_grad_dim_(start_grad_dim), num_grad_dims_(num_grad_dims),
        algoDims(storage->getAlgorithmicDimensions()),
        numAlgoDims_(storage->getAlgorithmicDimensions().size()),
        ptr_source_(NULL), ptr_result_(NULL),
        cur_algo_dim_(0), ptr_index_(NULL), q_(0.0), t_(0.0)
#ifdef __SSE3__
        , half_in_(_mm_set1_pd(0.5)),
        twothird_(_mm_set1_pd(2.0/3.0))
#endif
//      ,h_table_(NULL),grad_table_(NULL)
{
}

LaplaceEnhancedDownBBLinear::~LaplaceEnhancedDownBBLinear()
{
}

void LaplaceEnhancedDownBBLinear::operator()(sg::base::DataMatrix& source, sg::base::DataMatrix& result, grid_iterator& index, size_t dim)
{
    q_ = this->boundingBox->getIntervalWidth(this->algoDims[dim]);
    t_ = this->boundingBox->getIntervalOffset(this->algoDims[dim]);

//    h_table_ = new double[MAX_TABLE_DEPTH+1];
//    grad_table_ = new double[MAX_TABLE_DEPTH+1];
//
//    for (int i = 0; i <= MAX_TABLE_DEPTH; i++)
//    {
//        h_table_[i] = 1.0/static_cast<double>(1<<i);
//        grad_table_[i] = (static_cast<double>(1<<(i+1)))/q;
//    }

    ptr_source_ = source.getPointer();
    ptr_result_ = result.getPointer();
    ptr_index_ = &index;
    cur_algo_dim_ = this->algoDims[dim];

    if (q_ != 1.0 || t_ != 0.0)
    {
    	size_t i = start_grad_dim_;
    	if (num_grad_dims_ > 1)
        {
            double fl = 0.0;
            double fr = 0.0;

            if (dim == i)
            {
                recBB_GL(fl, fr);
            }
            else if (dim == i+1)
            {
                recBB_LG(fl, fr);
            }
            else
            {
                recBB_LL(fl, fr, fl, fr);
            }
        }
    	else
        //for ( ; i < this->numAlgoDims_; i++)
        {
            double fl = 0.0;
            double fr = 0.0;

            if (dim == i)
            {
                recBB_grad();
            }
            else
            {
                recBB(fl, fr);
            }
        }
    }
    else
    {
    	size_t i = start_grad_dim_;
    	if (num_grad_dims_ > 1)
        {
            double fl = 0.0;
            double fr = 0.0;
#ifdef __SSE3__
            __m128d fl_xmm = _mm_set1_pd(0.0);
            __m128d fr_xmm = _mm_set1_pd(0.0);
#endif

            if (dim == i)
            {
                rec_GL(fl, fr);
            }
            else if (dim == i+1)
            {
                rec_LG(fl, fr);
            }
            else
            {
#ifdef __SSE3__
                rec_LL(fl_xmm, fr_xmm);
#else
                rec_LL(fl, fr, fl, fr);
#endif
            }
        }
    	else
        //for ( ; i < this->numAlgoDims_; i++)
        {
            double fl = 0.0;
            double fr = 0.0;

            if (dim == i)
            {
                rec_grad();
            }
            else
            {
                rec(fl, fr);
            }
        }
    }

//    delete[] h_table_;
//    delete[] grad_table_;
}

void LaplaceEnhancedDownBBLinear::rec(double fl, double fr)
{
    size_t seq = ptr_index_->seq();
    sg::base::GridStorage::index_type::level_type l;
    sg::base::GridStorage::index_type::index_type i;
    ptr_index_->get(cur_algo_dim_, l, i);

    double alpha_value = ptr_source_[(seq*this->num_grad_dims_) + 0];

    // mesh-width
    double h = 1.0/static_cast<double>(1<<l);

    // L2 scalar product
    double tmp_m = ((fl+fr)*0.5);
    ptr_result_[(seq*this->num_grad_dims_) + 0] =  (((h * tmp_m) + (((2.0/3.0) * h) * alpha_value)));
    double fm = tmp_m + alpha_value;

    if(!ptr_index_->hint())
    {
    	ptr_index_->left_child(cur_algo_dim_);
        if(!storage->end(ptr_index_->seq()))
        {
            rec(fl, fm);
        }

        ptr_index_->step_right(cur_algo_dim_);
        if(!storage->end(ptr_index_->seq()))
        {
            rec(fm, fr);
        }

        ptr_index_->up(cur_algo_dim_);
    }
}

void LaplaceEnhancedDownBBLinear::rec_grad()
{
    size_t seq = ptr_index_->seq();
    sg::base::GridStorage::index_type::level_type l;
    sg::base::GridStorage::index_type::index_type i;
    ptr_index_->get(cur_algo_dim_, l, i);

    double alpha_value = ptr_source_[(seq*this->num_grad_dims_) + 0];

    // Gradient just in selected dimension
    ptr_result_[(seq*this->num_grad_dims_) + 0] = (static_cast<double>(1<<(l+1)) * alpha_value);

    if(!ptr_index_->hint())
    {
        ptr_index_->left_child(cur_algo_dim_);
        if(!storage->end(ptr_index_->seq()))
        {
            rec_grad();
        }

        ptr_index_->step_right(cur_algo_dim_);
        if(!storage->end(ptr_index_->seq()))
        {
            rec_grad();
        }

        ptr_index_->up(cur_algo_dim_);
    }
}

#ifdef __SSE3__
void LaplaceEnhancedDownBBLinear::rec_LL(__m128d fl, __m128d fr)
#else
void LaplaceEnhancedDownBBLinear::rec_LL(double fl, double fr, double fl2, double fr2)
#endif
{
    size_t seq = ptr_index_->seq();
    sg::base::GridStorage::index_type::level_type l;
    sg::base::GridStorage::index_type::index_type i;
    ptr_index_->get(cur_algo_dim_, l, i);

    // mesh-width
    double h = 1.0/static_cast<double>(1<<l);

    // L2 scalar product
#ifdef __SSE3__
    // with intrinsics
    __m128d h_in = _mm_loaddup_pd(&h);
    __m128d fl_in = fl;
    __m128d fr_in = fr;
    __m128d alpha = _mm_loadu_pd(&ptr_source_[(seq*this->num_grad_dims_) + 0]);
    __m128d tmp = _mm_mul_pd(_mm_add_pd(fl_in, fr_in), half_in_);
    __m128d res = _mm_add_pd(_mm_mul_pd(h_in, tmp), _mm_mul_pd(alpha, _mm_mul_pd(h_in, twothird_)));
    __m128d new_fm = _mm_add_pd(alpha, tmp);
    _mm_storeu_pd(&ptr_result_[(seq*this->num_grad_dims_) + 0], res);
#else
    double alpha_value = ptr_source_[(seq*this->num_grad_dims_) + 0];
    double alpha_value2 = ptr_source_[(seq*this->num_grad_dims_) + 1];
    double tmp_m = ((fl+fr)/2.0);
    double tmp_m2 = ((fl2+fr2)/2.0);
    double res = ((h * tmp_m) + (((2.0/3.0) * h) * alpha_value));
    double res2 = ((h * tmp_m2) + (((2.0/3.0) * h) * alpha_value2));
    ptr_result_[(seq*this->num_grad_dims_) + 0] = res;
    ptr_result_[(seq*this->num_grad_dims_) + 1] = res2;
    double fm = tmp_m + alpha_value;
    double fm2 = tmp_m2 + alpha_value2;
#endif

    if(!ptr_index_->hint())
    {
        ptr_index_->left_child(cur_algo_dim_);
        if(!storage->end(ptr_index_->seq()))
        {
#ifdef __SSE3__
            rec_LL(fl, new_fm);
#else
            rec_LL(fl, fm, fl2, fm2);
#endif
        }

        ptr_index_->step_right(cur_algo_dim_);
        if(!storage->end(ptr_index_->seq()))
        {
#ifdef __SSE3__
            rec_LL(new_fm, fr);
#else
            rec_LL(fm, fr, fm2, fr2);
#endif
        }

        ptr_index_->up(cur_algo_dim_);
    }
}

void LaplaceEnhancedDownBBLinear::rec_LG(double fl, double fr)
{
    size_t seq = ptr_index_->seq();
    sg::base::GridStorage::index_type::level_type l;
    sg::base::GridStorage::index_type::index_type i;
    ptr_index_->get(cur_algo_dim_, l, i);

    double alpha_value = ptr_source_[(seq*this->num_grad_dims_) + 0];
    double alpha_value2 = ptr_source_[(seq*this->num_grad_dims_) + 1];

    // mesh-width
    double h = 1.0/static_cast<double>(1<<l);

    // L2 scalar product
    double tmp_m = ((fl+fr)*0.5);
    ptr_result_[(seq*this->num_grad_dims_) + 0] = (((h * tmp_m) + (((2.0/3.0) * h) * alpha_value)));
    // Gradient in second dimension
    ptr_result_[(seq*this->num_grad_dims_) + 1] = (static_cast<double>(1<<(l+1)) * alpha_value2);

    double fm = tmp_m + alpha_value;

    if(!ptr_index_->hint())
    {
    	ptr_index_->left_child(cur_algo_dim_);
        if(!storage->end(ptr_index_->seq()))
        {
            rec_LG(fl, fm);
        }

        ptr_index_->step_right(cur_algo_dim_);
        if(!storage->end(ptr_index_->seq()))
        {
            rec_LG(fm, fr);
        }

        ptr_index_->up(cur_algo_dim_);
    }
}

void LaplaceEnhancedDownBBLinear::rec_GL(double fl, double fr)
{
    size_t seq = ptr_index_->seq();
    sg::base::GridStorage::index_type::level_type l;
    sg::base::GridStorage::index_type::index_type i;
    ptr_index_->get(cur_algo_dim_, l, i);

    double alpha_value = ptr_source_[(seq*this->num_grad_dims_) + 0];
    double alpha_value2 = ptr_source_[(seq*this->num_grad_dims_) + 1];

    // mesh-width
    double h = 1.0/static_cast<double>(1<<l);

    double tmp_m = ((fl+fr)*0.5);

    // Gradient in second dimension
    ptr_result_[(seq*this->num_grad_dims_) + 0] = ((static_cast<double>(1<<(l+1))) * alpha_value);
    // L2 scalar product
    ptr_result_[(seq*this->num_grad_dims_) + 1] = (((h * tmp_m) + (((2.0/3.0) * h) * alpha_value2)));

    double fm = tmp_m + alpha_value2;

    if(!ptr_index_->hint())
    {
    	ptr_index_->left_child(cur_algo_dim_);
        if(!storage->end(ptr_index_->seq()))
        {
            rec_GL(fl, fm);
        }

        ptr_index_->step_right(cur_algo_dim_);
        if(!storage->end(ptr_index_->seq()))
        {
            rec_GL(fm, fr);
        }

        ptr_index_->up(cur_algo_dim_);
    }
}

void LaplaceEnhancedDownBBLinear::recBB(double fl, double fr)
{
    size_t seq = ptr_index_->seq();
    sg::base::GridStorage::index_type::level_type l;
    sg::base::GridStorage::index_type::index_type i;
    ptr_index_->get(cur_algo_dim_, l, i);

    double alpha_value = ptr_source_[(seq*this->num_grad_dims_) + 0];

    // mesh-width
    double h = 1.0/static_cast<double>(1<<l);

    // L2 scalar product
    double tmp_m = ((fl+fr)*0.5);
    ptr_result_[(seq*this->num_grad_dims_) + 0] = (((h * tmp_m) + (((2.0/3.0) * h) * alpha_value)) * q_);
    double fm = tmp_m + alpha_value;

	if(!ptr_index_->hint())
	{
		ptr_index_->left_child(cur_algo_dim_);
		if(!storage->end(ptr_index_->seq()))
		{
			recBB(fl, fm);
		}

		ptr_index_->step_right(cur_algo_dim_);
		if(!storage->end(ptr_index_->seq()))
		{
			recBB(fm, fr);
		}

		ptr_index_->up(cur_algo_dim_);
	}
}

void LaplaceEnhancedDownBBLinear::recBB_LL(double fl, double fr, double fl2, double fr2)
{
    size_t seq = ptr_index_->seq();
    sg::base::GridStorage::index_type::level_type l;
    sg::base::GridStorage::index_type::index_type i;
    ptr_index_->get(cur_algo_dim_, l, i);

    double alpha_value = ptr_source_[(seq*this->num_grad_dims_) + 0];
    double alpha_value2 = ptr_source_[(seq*this->num_grad_dims_) + 1];

    // mesh-width
    double h = 1.0/static_cast<double>(1<<l);

    // L2 scalar product
    double tmp_m = ((fl+fr)*0.5);
    double tmp_m2 = ((fl2+fr2)*0.5);
    ptr_result_[(seq*this->num_grad_dims_) + 0] = (((h * tmp_m) + (((2.0/3.0) * h) * alpha_value)) * q_);
    ptr_result_[(seq*this->num_grad_dims_) + 1] = (((h * tmp_m2) + (((2.0/3.0) * h) * alpha_value2)) * q_);
    double fm = tmp_m + alpha_value;
    double fm2 = tmp_m2 + alpha_value2;

    if(!ptr_index_->hint())
    {
    	ptr_index_->left_child(cur_algo_dim_);
        if(!storage->end(ptr_index_->seq()))
        {
            recBB_LL(fl, fm, fl2, fm2);
        }

        ptr_index_->step_right(cur_algo_dim_);
        if(!storage->end(ptr_index_->seq()))
        {
            recBB_LL(fm, fr, fm2, fr2);
        }

        ptr_index_->up(cur_algo_dim_);
    }
}

void LaplaceEnhancedDownBBLinear::recBB_LG(double fl, double fr)
{
    size_t seq = ptr_index_->seq();
    sg::base::GridStorage::index_type::level_type l;
    sg::base::GridStorage::index_type::index_type i;
    ptr_index_->get(cur_algo_dim_, l, i);

    double alpha_value = ptr_source_[(seq*this->num_grad_dims_) + 0];
    double alpha_value2 = ptr_source_[(seq*this->num_grad_dims_) + 1];

    // mesh-width
    double h = 1.0/static_cast<double>(1<<l);

    // L2 scalar product
    double tmp_m = ((fl+fr)*0.5);
    ptr_result_[(seq*this->num_grad_dims_) + 0] = (((h * tmp_m) + (((2.0/3.0) * h) * alpha_value)) * q_);
    // Gradient in second dimension
    ptr_result_[(seq*this->num_grad_dims_) + 1] = ((static_cast<double>(1<<(l+1))/q_) * alpha_value2);

    double fm = tmp_m + alpha_value;

    if(!ptr_index_->hint())
    {
    	ptr_index_->left_child(cur_algo_dim_);
        if(!storage->end(ptr_index_->seq()))
        {
            recBB_LG(fl, fm);
        }

        ptr_index_->step_right(cur_algo_dim_);
        if(!storage->end(ptr_index_->seq()))
        {
            recBB_LG(fm, fr);
        }

        ptr_index_->up(cur_algo_dim_);
    }
}

void LaplaceEnhancedDownBBLinear::recBB_GL(double fl, double fr)
{
    size_t seq = ptr_index_->seq();
    sg::base::GridStorage::index_type::level_type l;
    sg::base::GridStorage::index_type::index_type i;
    ptr_index_->get(cur_algo_dim_, l, i);

    double alpha_value = ptr_source_[(seq*this->num_grad_dims_) + 0];
    double alpha_value2 = ptr_source_[(seq*this->num_grad_dims_) + 1];

    // mesh-width
    double h = 1.0/static_cast<double>(1<<l);

    double tmp_m = ((fl+fr)*0.5);
    // Gradient in second dimension
    ptr_result_[(seq*this->num_grad_dims_) + 0] = ((static_cast<double>(1<<(l+1))/q_) * alpha_value);
    // L2 scalar product
    ptr_result_[(seq*this->num_grad_dims_) + 1] = (((h * tmp_m) + (((2.0/3.0) * h) * alpha_value2)) * q_);
    double fm = tmp_m + alpha_value2;

    if(!ptr_index_->hint())
    {
    	ptr_index_->left_child(cur_algo_dim_);
        if(!storage->end(ptr_index_->seq()))
        {
            recBB_GL(fl, fm);
        }

        ptr_index_->step_right(cur_algo_dim_);
        if(!storage->end(ptr_index_->seq()))
        {
            recBB_GL(fm, fr);
        }

        ptr_index_->up(cur_algo_dim_);
    }
}

void LaplaceEnhancedDownBBLinear::recBB_grad()
{
    size_t seq = ptr_index_->seq();
    sg::base::GridStorage::index_type::level_type l;
    sg::base::GridStorage::index_type::index_type i;
    ptr_index_->get(cur_algo_dim_, l, i);

    double alpha_value = ptr_source_[(seq*this->num_grad_dims_) + 0];

    // Gradient just in selected dimension
    ptr_result_[(seq*this->num_grad_dims_) + 0] = ((static_cast<double>(1<<(l+1))/q_) * alpha_value);

    if(!ptr_index_->hint())
    {
    	ptr_index_->left_child(cur_algo_dim_);
        if(!storage->end(ptr_index_->seq()))
        {
            recBB_grad();
        }

        ptr_index_->step_right(cur_algo_dim_);
        if(!storage->end(ptr_index_->seq()))
        {
            recBB_grad();
        }

        ptr_index_->up(cur_algo_dim_);
    }
}

// namespace pde
}
// namespace sg
}
