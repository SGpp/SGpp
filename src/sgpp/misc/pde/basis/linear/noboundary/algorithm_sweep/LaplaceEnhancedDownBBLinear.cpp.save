/******************************************************************************
* Copyright (C) 2012 Technische Universitaet Muenchen                         *
* This file is part of the SG++ project. For conditions of distribution and   *
* use, please see the copyright notice at http://www5.in.tum.de/SGpp          *
******************************************************************************/
// @author Alexander Heinecke (Alexander.Heinecke@mytum.de)

#include "misc/pde/basis/linear/noboundary/algorithm_sweep/LaplaceEnhancedDownBBLinear.hpp"

namespace sg
{
namespace pde
{

LaplaceEnhancedDownBBLinear::LaplaceEnhancedDownBBLinear(sg::base::GridStorage* storage) :
        storage(storage), boundingBox(storage->getBoundingBox()),
        algoDims(storage->getAlgorithmicDimensions()), numAlgoDims_(storage->getAlgorithmicDimensions().size())
{
}

LaplaceEnhancedDownBBLinear::~LaplaceEnhancedDownBBLinear()
{
}

void LaplaceEnhancedDownBBLinear::operator()(sg::base::DataMatrix& source, sg::base::DataMatrix& result, grid_iterator& index, size_t dim)
{
    sg::base::DataVector fl(this->numAlgoDims_);
    sg::base::DataVector fr(this->numAlgoDims_);
    fl.setAll(0.0);
    fr.setAll(0.0);

    double q = this->boundingBox->getIntervalWidth(this->algoDims[dim]);
    double t = this->boundingBox->getIntervalOffset(this->algoDims[dim]);

    bool useBB = false;

    if (q != 1.0 || t != 0.0)
    {
        useBB = true;
    }

	if (useBB)
	{
		recBB(source, result, index, dim, fl, fr, q, t);
	}
	else
	{
		rec(source, result, index, dim, fl, fr);
	}
}

void LaplaceEnhancedDownBBLinear::rec(sg::base::DataMatrix& source, sg::base::DataMatrix& result, grid_iterator& index, size_t dim, sg::base::DataVector& fl, sg::base::DataVector& fr)
{
	size_t seq = index.seq();
    sg::base::GridStorage::index_type::level_type l;
    sg::base::GridStorage::index_type::index_type i;
    index.get(this->algoDims[dim], l, i);
    sg::base::DataVector fm(this->numAlgoDims_);

    double grad_alpha = source.get(seq, dim);

    double* p_src = source.getPointer();
    double* p_res = result.getPointer();
    double* p_fl = fl.getPointer();
    double* p_fr = fr.getPointer();
    double* p_fm = fm.getPointer();

    // mesh-width
    double h = 1.0/static_cast<double>(1<<l);

    // L2 scalar product
    // double tmp_m = ((fl+fr)/2.0);
    // result[seq] = (h * tmp_m) + (((2.0/3.0) * h) * alpha_value);
    // double fm = tmp_m + alpha_value;
    #pragma simd
    for (size_t i = 0; i < this->numAlgoDims_; i++)
    {
        double alpha_value = p_src[(seq*this->numAlgoDims_)+i];
        double tmp_m = (p_fl[i] + p_fr[i])*0.5;
        p_res[(seq*this->numAlgoDims_)+i] = ((h * tmp_m) + (((2.0/3.0) * h) * alpha_value));
        p_fm[i] = tmp_m + alpha_value;
    }

	// Gradient just in selected dimension
    //result[seq] = static_cast<double>(1<<(l+1)) * alpha_value;
    p_res[(seq*this->numAlgoDims_)+dim] = static_cast<double>(1<<(l+1)) * grad_alpha;
    p_fm[dim] = 0.0;

	if(!index.hint())
	{
		index.left_child(this->algoDims[dim]);
		if(!storage->end(index.seq()))
		{
			rec(source, result, index, dim, fl, fm);
		}

		index.step_right(this->algoDims[dim]);
		if(!storage->end(index.seq()))
		{
			rec(source, result, index, dim, fm, fr);
		}

		index.up(this->algoDims[dim]);
	}
}

void LaplaceEnhancedDownBBLinear::recBB(sg::base::DataMatrix& source, sg::base::DataMatrix& result, grid_iterator& index, size_t dim, sg::base::DataVector& fl, sg::base::DataVector& fr, double q, double t)
{
    size_t seq = index.seq();
    sg::base::GridStorage::index_type::level_type l;
    sg::base::GridStorage::index_type::index_type i;
    index.get(this->algoDims[dim], l, i);
    sg::base::DataVector fm(this->numAlgoDims_);

    double grad_alpha = source.get(seq, dim);

    double* p_src = source.getPointer();
    double* p_res = result.getPointer();
    double* p_fl = fl.getPointer();
    double* p_fr = fr.getPointer();
    double* p_fm = fm.getPointer();

    // mesh-width
    double h = 1.0/static_cast<double>(1<<l);

    // L2 scalar product
    // double tmp_m = ((fl+fr)/2.0);
    // result[seq] = ((h * tmp_m) + (((2.0/3.0) * h) * alpha_value)) * q;
    // double fm = tmp_m + alpha_value;
    #pragma simd
    for (size_t i = 0; i < this->numAlgoDims_; i++)
    {
        double alpha_value = p_src[(seq*this->numAlgoDims_)+i];
        double tmp_m = (p_fl[i] + p_fr[i])*0.5;
        p_res[(seq*this->numAlgoDims_)+i] = ((h * tmp_m) + (((2.0/3.0) * h) * alpha_value)) * q;
        p_fm[i] = tmp_m + alpha_value;
    }

    // Gradient just in selected dimension
    //result[seq] = (static_cast<double>(1<<(l+1))/q) * alpha_value;
    p_res[(seq*this->numAlgoDims_)+dim] = (static_cast<double>(1<<(l+1))/q) * grad_alpha;
    p_fm[dim] = 0.0;

	if(!index.hint())
	{
		index.left_child(this->algoDims[dim]);
		if(!storage->end(index.seq()))
		{
			recBB(source, result, index, dim, fl, fm, q, t);
		}

		index.step_right(this->algoDims[dim]);
		if(!storage->end(index.seq()))
		{
			recBB(source, result, index, dim, fm, fr, q, t);
		}

		index.up(this->algoDims[dim]);
	}
}

// namespace pde
}
// namespace sg
}
