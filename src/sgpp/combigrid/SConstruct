## This Scons script builds a static library for the Sundance PDE toolbox

import os;
import sys;

#########################################################################
##### MAIN CODE
#########################################################################

##### Initialize build variables

cppdefines = [ ]
cpppath = ['.' , '..']
ccflags = ['-Wall']
libpath = [ ]
libs = [ ]
linkfalgs = [ ]
cxx = 'g++'
#cxx = 'icpc'


##### Read command line parameter #######

###### --- build modus ---
build = ARGUMENTS.get('build', 'debug') 
if build == 'debug':
   print "\n Building DEBUG version ... "
   cppdefines.append('_GLIBCXX_DEBUG')
   ccflags.append('-g3')
   ccflags.append('-O0')
elif build == 'release':
   print "\n Building RELEASE version ... "
   ccflags.append('-O3')
else:
   print "ERROR: build must be = 'debug' or 'release' (default is 'debug') ! "
   sys.exit(1) 
   

#####     Determine build path     #####################

target = ARGUMENTS.get('target', '')  # Read command line parameter
build_offset = ARGUMENTS.get('buildoffset', 'build')
buildpath = './'


##### Print options used to build
#
print
print "Target: " + target
print "Options: build = NONE"
print "Buildpath " + buildpath
print

##### Setup construction environment:
#
vars = Variables("custom.py")
env = Environment(variables = vars, ENV = os.environ)

env.Append( CPPDEFINES = cppdefines )
env.Append( LIBPATH    = libpath )
env.Append( LINKFLAGS  = linkfalgs )
env.Append( LIBS       = libs ) 
env.Append( CPPPATH    = cpppath )
env.Append( CCFLAGS    = ccflags )
#env.Append( CXX        = cxx )
env['CXX'] = cxx;

##### Define source Files 
#            
sourceFiles = [
   Glob(buildpath + './basisfunction/*.cpp'),
   Glob(buildpath + './combigrid/*.cpp'),
   Glob(buildpath + './combischeme/*.cpp'),
   Glob(buildpath + './combikernel/*.cpp'),
   Glob(buildpath + './converter/*.cpp'),
   Glob(buildpath + './domain/*.cpp'),
   Glob(buildpath + './fullgrid/*.cpp'),
   Glob(buildpath + './plotter/*.cpp'),
   Glob(buildpath + './utils/*.cpp'),
# Solvers(e.g. multigrid) which work on full grids or on combi grid  
   Glob(buildpath + './multigridFG/interface/*.cpp'),
   Glob(buildpath + './multigridFG/multigrid/*.cpp'),
   Glob(buildpath + './multigridFG/operators/*.cpp'),   
   Glob(buildpath + './multigridFG/utils/*.cpp'),
# SGpp objcets which are needed, in order to build a binary
   Glob(buildpath + '../base/datatypes/DataVector.cpp'),
   Glob(buildpath + '../base/grid/common/BoundingBox.cpp')
   ]

testFile = ['./tests/test_main.cpp']
testFileSolv = ['./multigridFG/test/test_main.cpp']

################################################################################


# build the tester and the two binaries code 
env.Program('test',[ testFile , sourceFiles ])
env.Program('Solvertest',[ testFileSolv , sourceFiles ])
env.Library('combigrid', [sourceFiles])

#Command(["lib/libcombigrid.a"], ["libcombigrid.a"], Copy("$TARGET", "$SOURCE"))
#Command("#././lib/sgpp/libcombigrid.a", "#libcombigrid.a", Copy("$TARGET", "$SOURCE"))
#Command("cp libcombigrid.a ../../../lib/sgpp/libcombigrid.a")
