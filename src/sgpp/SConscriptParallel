# Copyright (C) 2009 Technische Universitaet Muenchen
# This file is part of the SG++ project. For conditions of distribution and
# use, please see the copyright notice at http://www5.in.tum.de/SGpp

# author Dirk Pflueger (Dirk.Pflueger@in.tum.de), Alexander Heinecke (Alexander.Heinecke@mytum.de)

Import("env")

srcs = Split("""
parallel/datadriven/algorithm/AlgorithmAdaBoostVectorizedIdentity.cpp
parallel/datadriven/algorithm/DMWeightMatrixVectorizedIdentity.cpp
parallel/datadriven/algorithm/AlgorithmAdaBoostSPVectorizedIdentity.cpp
parallel/datadriven/algorithm/DMWeightMatrixSPVectorizedIdentity.cpp
parallel/datadriven/algorithm/DMSystemMatrixSPVectorizedIdentity.cpp
parallel/datadriven/algorithm/DMSystemMatrixVectorizedIdentity.cpp

parallel/datadriven/basis/linear/noboundary/operation/OperationMultipleEvalIterativeX86SimdLinear.cpp
parallel/datadriven/basis/linear/noboundary/operation/OperationMultipleEvalIterativeSPX86SimdLinear.cpp

parallel/datadriven/basis/modlinear/operation/OperationMultipleEvalIterativeX86SimdModLinear.cpp
parallel/datadriven/basis/modlinear/operation/OperationMultipleEvalIterativeSPX86SimdModLinear.cpp

parallel/tools/TwoPartitionAutoTuning.cpp

parallel/operation/ParallelOpFactory.cpp
""")

sg_env = env.Clone()

sg_env.Append(CPPPATH=['#/src/sgpp'])

src_objs_parallel = sg_env.SharedObject(srcs)
Export('src_objs_parallel')

libsgppparallel = sg_env.SharedLibrary(target="sgppparallel", source = src_objs_parallel, SHLIBPREFIX = 'lib')
libsgppparallelstatic = sg_env.StaticLibrary(target="sgppparallel", source = src_objs_parallel, SHLIBPREFIX = 'lib')

Export('libsgppparallel')
Export('libsgppparallelstatic')
