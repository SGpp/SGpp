/******************************************************************************
* Copyright (C) 2013 Technische Universitaet Muenchen                         *
* This file is part of the SG++ project. For conditions of distribution and   *
* use, please see the copyright notice at http://www5.in.tum.de/SGpp          *
******************************************************************************/
// @author Alexander Heinecke (Alexander.Heinecke@mytum.de)

#ifndef LAPLACEENHANCEDUPBBLINEAR_HPP
#define LAPLACEENHANCEDUPBBLINEAR_HPP

#include "base/grid/GridStorage.hpp"
#include "base/datatypes/DataVector.hpp"
#include "base/datatypes/DataMatrix.hpp"

#ifdef __SSE3__
#include "immintrin.h"
#endif

namespace sg
{
namespace pde
{

/**
 * Implementation of sweep operator () for
 * enhanced Laplace operator, up operation.
 *
 * This sweep operator calculates all ups (L2 scalar products and
 * gradient) for a given dimension.
 */
class LaplaceEnhancedUpBBLinear
{
protected:
	typedef sg::base::GridStorage::grid_iterator grid_iterator;

	/// Pointer to sg::base::GridStorage object
	sg::base::GridStorage* storage;
	/// Pointer to the bounding box Obejct
	sg::base::BoundingBox* boundingBox;
	/// start grad dims
	const size_t start_grad_dim_;
	/// number of grad dims
	const size_t num_grad_dims_;
    /// algorithmic dimensions, operator is applied in this dimensions
    const std::vector<size_t> algoDims;
    /// number of algorithmic dimensions
    const size_t numAlgoDims_;
    /// pointer to DataMatrix containing source coefficients
    double* ptr_source_;
    /// pointer to DataMatrix containing result coefficients
    double* ptr_result_;
    /// current algorithmic dimension for the overall operator
    size_t cur_algo_dim_;
    /// pointer to grid point index
    grid_iterator* ptr_index_;
    /// stretching of basis functions in current algorithmic domain
    double q_;
    /// translation of basis function in current algorithmic domain
    double t_;
#ifdef __SSE3__
    /// const. vector holding 1/2 in both components
    const __m128d half_in_;
#endif

public:
	/**
	 * Constructor
	 *
	 * @param storage the grid's sg::base::GridStorage object
	 */
    LaplaceEnhancedUpBBLinear(sg::base::GridStorage* storage, size_t start_grad_dim, size_t num_grad_dims);

	/**
	 * Destructor
	 */
	virtual ~LaplaceEnhancedUpBBLinear();

	/**
	 * This operations performs the calculation of up in the direction of dimension <i>dim</i>
	 * on a grid with fix Dirichlet 0 boundary conditions
	 *
	 * @param source sg::base::DataVector that contains the gridpoint's coefficients (values from the vector of the laplace operation)
	 * @param result sg::base::DataVector that contains the result of the up operation
	 * @param index a iterator object of the grid
	 * @param dim current fixed dimension of the 'execution direction'
	 */
	virtual void operator()(sg::base::DataMatrix& source, sg::base::DataMatrix& result, grid_iterator& index, size_t dim);

protected:

	/**
	 * recursive function for the calculation of Up (L2 scalar product) without Bounding Box
	 *
	 * @param fl function value on the left boundary
	 * @param fr function value on the right boundary
	 */
	void rec(double& fl, double& fr);

#ifdef __SSE3__
	/**
	 * recursive function for the calculation of merged-Down (L2 scalar products) without Bounding Box
	 *
	 * @param fl 2 function value on the left boundary, stored in xmm registers
	 * @param fr 2 function value on the right boundary, stored in xmm registers
	 */
	void rec_LL(__m128d& fl, __m128d& fr);
#else
	/**
	 * recursive function for the calculation of merged-Up (L2 scalar products) without Bounding Box
	 *
	 * @param fl first function value on the left boundary
	 * @param fr first function value on the right boundary
	 * @param fl2 second function value on the left boundary
	 * @param fr2 second function value on the right boundary
	 */
    void rec_LL(double& fl, double& fr, double& fl2, double& fr2);
#endif

	/**
	 * recursive function for the calculation of merged-Up (gradient and L2 scalar product) without Bounding Box
	 *
	 * @param fl first function value on the left boundary, L2 scalar product
	 * @param fr first function value on the right boundary, L2 scalar product
	 */
    void rec_LG(double& fl, double& fr);

	/**
	 * recursive function for the calculation of merged-Up (L2 scalar product and gradient) without Bounding Box
	 *
	 * @param fl first function value on the left boundary, L2 scalar product
	 * @param fr first function value on the right boundary, L2 scalar product
	 */
    void rec_GL(double& fl, double& fr);

    /**
     * recursive function for the calculation of Up (gradient) without Bounding Box
     */
    void rec_grad();

	/**
	 * recursive function for the calculation of Up (L2 scalar product) with Bounding Box
	 *
	 * @param fl function value on the left boundary
	 * @param fr function value on the right boundary
	 */
	void recBB(double& fl, double& fr);

	/**
	 * recursive function for the calculation of merged-Up (L2 scalar products) with Bounding Box
	 *
	 * @param fl first function value on the left boundary
	 * @param fr first function value on the right boundary
	 * @param fl2 second function value on the left boundary
	 * @param fr2 second function value on the right boundary
	 */
    void recBB_LL(double& fl, double& fr, double& fl2, double& fr2);

	/**
	 * recursive function for the calculation of merged-Up (L2 scalar product and gradient) with Bounding Box
	 *
	 * @param fl first function value on the left boundary, L2 scalar product
	 * @param fr first function value on the right boundary, L2 scalar product
	 */
    void recBB_LG(double& fl, double& fr);

	/**
	 * recursive function for the calculation of merged-Up (gradient and L2 scalar product) with Bounding Box
	 *
	 * @param fl first function value on the left boundary, L2 scalar product
	 * @param fr first function value on the right boundary, L2 scalar product
	 */
    void recBB_GL(double& fl, double& fr);

    /**
     * recursive function for the calculation of Up (gradient) with Bounding Box
     */
    void recBB_grad();
};

// namespace detail
}
// namespace sg
}

#endif /* LAPLACEENHANCEDUPBBLINEAR_HPP */
