/**
@page code_examples_refinement Refinement Example

The following example interpolates the (non-symmetric) function
@f[ f(x_0,x_1) := 16 * (x_0-1)*x_0 * (x_1-1)*x_1^2 @f]
- starting from a regular grid with level 2 and
- refining 5 times one grid point each.
The number of grid points is printed in each iteration.
After refinement, the surplusses have to be set for all new grid
points, i.e., the alpha-Vector has to be extended.
@see @ref code_examples_tutorial

For instructions how to compile and run the example,
please see \ref installation.



@section code_examples_refinement__python Python

@include refinement.py

This results in the output

@include refinement.output.txt

There are clearly more efficient approaches than to set the function
values for all grid points and to hierarchize the whole grid each
time. But this works even where no efficient alternatives are
available and suffices for demonstration purposes.

This use of the SurplusRefinementFunctor takes as arguments the
coefficient vector (it doesn't have to be the coefficient vector, it
could be something modified!) and the number of grid points to refine
(if available). It bases its refinement decision on the absolute
values of the vector's entries, choosing the largest ones. Other
refinement functors are available or can be implemented.
*/
