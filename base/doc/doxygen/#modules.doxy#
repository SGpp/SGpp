/**
@page modules Description of Modules

SG++ is grouped into several modules. This ensures
- Modularity - not all parts are required for every task
- Usability - not everything has to be compiled every time
- Flexibility - only parts of SG++ can be shipped
- Correctness - at least to some degree; if some part is modified, it will not influence others
- â€¦

The modules correspond to the corresponding namespaces in C++. Roughly, all files belonging to a namespace belong to the respective module. But a module can contain files belonging to some another namespace, especially static factory methods in the namespace sgpp::op_factory.

<!--
@dot
digraph G {
	rankdir=BT;
	node [shape=polygon,fontsize=10,height=0.25];
	edge [group];
	
	{ rank=same; datadriven; solver; combigrid; }

}
@enddot
-->

@dot
digraph G {
	rankdir=BT;
	node [shape=polygon,fontsize=10,height=0.25];
	edge [group];
	
	{ rank=same; datadriven; solver; combigrid; }

	base [URL="@ref sg::base"];
	pde [URL="@ref sg::pde"];
	datadriven [URL="@ref sg::datadriven"];
	finance [URL="@ref sg::finance"];
	solver [URL="@ref sg::solver"];
	parallel [URL="@ref sg::parallel"];
	combigrid [URL=""];

	pde -> base;
	pde -> solver;
	datadriven -> base;
	finance -> pde;
	finance -> base;
	solver -> base;
	parallel -> base;
	parallel -> pde;
	parallel -> finance;
	parallel -> datadriven [constraint=false];
	combigrid -> base;
}
@enddot


The modules can depend on each other. Especially all depend on the base module.
Libraries are generated for all modules. The following modules are available:

- @subpage module_base
- @subpage module_combigrid
- @subpage module_datadriven
- @subpage module_finance
- @subpage module_misc
- @subpage module_optimization
- @subpage module_parallel
- @subpage module_pde
- @subpage module_quadrature
- @subpage module_solver

@section modules__structure Folder structure

Please note that the modularization results in a somewhat unconventional
folder structure. Keeping 
@verbatim
/path/to/SGpp/module/
@endverbatim
as "modular" as possible requires to have everything belonging to a module
below that directory. This especially applies to the src folder. Its
subdirectories reflect the namespaces. Therefore, the module name reappears
once again:
@verbatim
/path/to/SGpp/module/src/sgpp/module/...
@endverbatim



@section modules__creatingnew Creating new modules

T.b.d.
*/
