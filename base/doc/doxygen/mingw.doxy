/**
@page mingw Windows (MinGW)

This page contains instructions for compiling and using SG++ with
MinGW (64-bit) under Windows.



@section mingw_overview Overview

- @ref mingw_caveats
- @ref mingw_dependencies
- @ref mingw_compilation
- @ref mingw_using
- @ref mingw_troubleshooting



@section mingw_caveats Caveats

- Aligned memory allocation is buggy (leads to program crashes)
  and therefore turned off in the MinGW build.
- Libraries compiled with different Windows compiler are in general not
  compatible with each other.
  So, using the compiled SG++ library from MSVC++ won't work or
  requires a large amount of work.



@section mingw_dependencies Dependencies

@subsection mingw_dependencies_required Required

The following software is required in order to build SG++:

- <a href="http://mingw-w64.org/" target="_blank">MinGW-w64</a>,
  which provides the compiler toolchain including @c g++
- <a href="http://python.org/" target="_blank">Python 2.7 (x64)</a>
  as a prerequisite for SCons (Python 3.0 is not yet support by SCons).
  If you do not plan to compile the Python bindings (pysgpp),
  then the x86 version of Python is sufficient.
- <a href="http://sourceforge.net/projects/pywin32/" target="_blank">
  PyWin32 (x64)</a>
  for parallel building and some tweaks in our @c SConstruct.
- <a href="http://www.scons.org/" target="_blank">SCons (&ge; 2.3)</a>
  is required for building (build system).

@subsection mingw_dependencies_recommended Recommended

The following software is recommended for core functionality:

- <a href="http://www.boost.org/" target="_blank">Boost.Test</a>
  for compiling and running the unit tests.
  You can also skip the unit tests, but this is not recommended.
- <a href="http://www.swig.org/" target="_blank">SWIG (&ge; 3.0)</a>,
  if you want to use SG++ within Python, Java, or MATLAB.
  SWIG creates bindings from C/C++ functions in order to make
  them available as a Python module or prepare them to be called from Java code.
- <a href="http://www.numpy.org/" target="_blank">
  NumPy for Python 2.7 (x64)</a> is needed,
  if you want to run the Python tests/examples.
- <a href="http://www.java.com/" target="_blank">
  Java Development Kit (JDK, x64)</a>,
  if you want to compile the Java bindings.
- <a href="http://www.doxygen.org/" target="_blank">Doxygen</a> is required to
  create and compile the documentation, which you are reading right now.
  It is also required to automatically annotate the Python bindings
  generated by SWIG with docstrings.

@subsection mingw_dependencies_optional Optional

The following software can be installed for full functionality:

- <a href="http://www.graphviz.org/" target="_blank">
  dot in the Graphviz package</a>
  is optional and generates inheritance diagrams in the Doxygen documentation.
- <a href="http://www.mathworks.com/" target="_blank">MATLAB</a>,
  if you want to use SG++ within MATLAB.

@subsection mingw_dependencies_installation Installation

It is advisable to install the requirements in this order:
1. First, please make sure that you install all dependencies to paths that do not
   contain any space (no <tt>Program Files</tt> or similar)
   or you might get trouble, i.e.,
   the paths <tt>C:\\PATH_TO_MINGW</tt> etc.,
   where you install the software, should be free of spaces. 

2. MinGW:
   1. Download <tt>mingw-w64-install.exe</tt> from the
      <a href="http://sourceforge.net/projects/mingw-w64/" target="_blank">
      MinGW-w64 SourceForge page</a>.
   2. Run the installer and select the architecture @c x86_64.
   3. Prepend <tt>C:\\PATH_TO_MINGW\\bin</tt> to the <tt>PATH</tt>
      environment variable.
3. Python:
   1. Download <tt>python-2.7.11.amd64.msi</tt> or similar from the
      <a href="http://python.org/" target="_blank">Python page</a>.
      Python 3.x is incompatible with SCons and
      the x86 version will not work with pysgpp.
   2. Run the installer.
   3. Prepend <tt>C:\\PATH_TO_PYTHON</tt> and
      <tt>C:\\PATH_TO_PYTHON\\Scripts</tt>
      to the <tt>PATH</tt> environment variable
      (this can also be done by the installer).
4. PyWin32:
   1. Download <tt>pywin32-219.win-amd64-py2.7.exe</tt> or similar from the
      <a href="http://sourceforge.net/projects/pywin32/" target="_blank">
      PyWin32 SourceForge page</a>
      (selecting a version for amd64 and Python 2.7 is important).
   2. Run the installer, selecting the Python version you installed earlier.
5. SCons:
   1. Download <tt>scons-2.4.1-amd64-setup.exe</tt> or similar from the
      <a href="http://sourceforge.net/projects/scons/" target="_blank">
      SCons SourceForge page</a>
      (selecting a version for amd64 is important).
   2. Run the installer, selecting the Python version you installed earlier.
6. Boost.Test:
   1. Download <tt>boost_1_59_0.7z</tt> or similar from the
      <a href="http://www.boost.org/" target="_blank">Boost page</a>.
   2. Unpack the archive.
   3. Run the following in <tt>cmd.exe</tt>:
      @verbatim
cd C:\PATH_TO_BOOST
bootstrap.bat gcc
b2 --with-test ^
  toolset=gcc ^
  variant=release ^
  link=shared ^
  threading=multi ^
  runtime-link=shared
      @endverbatim
   4. Copy
      <tt>C:\\PATH_TO_BOOST\\stage\\lib\\libboost_unit_test_framework-mgw52-mt-1_59.dll</tt>
      or similar to
      <tt>C:\\PATH_TO_BOOST\\stage\\lib\\libboost_unit_test_framework.dll</tt>.
   5. Prepend <tt>C:\\PATH_TO_BOOST\\stage\\lib</tt> to the <tt>PATH</tt>
      environment variable.
7. SWIG:
   1. Download <tt>swigwin-3.0.7.zip</tt> or similar from the
      <a href="http://www.swig.org/" target="_blank">SWIG page</a>.
      A special x64 version is not necessary.
   2. Extract the archive.
   3. Prepend <tt>C:\\PATH_TO_SWIG</tt> to the <tt>PATH</tt>
      environment variable.
8. NumPy:
   1. Download <tt>numpy‑1.9.3+mkl‑cp27‑none‑win_amd64.whl</tt> or similar
      from <a href="http://www.lfd.uci.edu/~gohlke/pythonlibs/#numpy"
      target="_blank">
      this third-party page</a>
      (selecting a version for amd64 is important).
   2. Run <tt>pip install numpy‑1.9.3+mkl‑cp27‑none‑win_amd64.whl</tt>
      to install NumPy.
9. JDK:
   1. Download <tt>jdk-8u66-windows-x64.exe</tt> or similar from the
      <a href="http://www.java.com/" target="_blank">Java page</a>
      (selecting a version for amd64 is important).
   2. Run the installer.
   3. Prepend <tt>C:\\PATH_TO_JDK\\bin</tt> to the <tt>PATH</tt>
      environment variable.
   4. If SCons does not seem to find the JDK in the right place,
      try checking the <tt>JAVA_HOME</tt> environment variable
      (either set it to the right path, e.g., <tt>C:\\PATH_TO_JDK</tt>
      without <tt>bin</tt>, or unset it completely).
10. Doxygen:
   1. Download <tt>doxygen-1.8.10-setup.exe</tt> or similar from the
      <a href="http://www.doxygen.org/" target="_blank">Doxygen page</a>.
   2. Run the installer.
   3. Prepend <tt>C:\\PATH_TO_DOXYGEN\\bin</tt> to the <tt>PATH</tt>
      environment variable.
11. Dot:
   1. Download <tt>graphviz-2.38.msi</tt> or similar from the
      <a href="http://www.graphviz.org/" target="_blank">Graphviz page</a>.
   2. Run the installer.
   3. Prepend <tt>C:\\PATH_TO_GRAPHVIZ\\bin</tt> to the <tt>PATH</tt>
      environment variable.
12. MATLAB:
   1. Install MATLAB with the installer.
   2. Prepend <tt>C:\\PATH_TO_MATLAB\\bin</tt> to the <tt>PATH</tt>
      environment variable.



@section mingw_compilation Compilation with SCons

When compiling with SCons, supply <tt>COMPILER=gnu</tt> to override the default
of MSVC++.
Don't forget to add the locations of the Boost include and library path.
@verbatim
scons -j 4 ^
  COMPILER=gnu ^
  BOOST_INCLUDE_PATH=C:\PATH_TO_BOOST ^
  BOOST_LIBRARY_PATH=C:\PATH_TO_BOOST\stage\lib
@endverbatim
For additional remarks about building with SCons,
please refer to the @ref linux_compilation "Linux page".



@section mingw_using Using SG++

In this section, we show how SG++ can be used as a library in other programs.
For C++, this includes compilation, linking, and execution of the program
using SG++.
We also show how to use SG++ from the other supported languages
(Python, Java, and MATLAB).
As an example application, we consider the @ref code_examples_tutorial
from the directory <tt>base\\examples</tt>;
however, the instructions can be analogously applied to other programs.

In the following, the current directory is always <tt>base\\examples</tt> and
<tt>C:\\PATH_TO_SGPP</tt> refers to the absolute path of the SG++ directory.
We assume that SG++ or its bindings have been successfully built before.

@subsection mingw_using_cpp C++

First, compile the program
while supplying the include paths of the relevant modules:
@verbatim
g++ tutorial.cpp ^
  -c -std=c++11 -fopenmp ^
  -IC:\PATH_TO_SGPP\base\src ^
  -o tutorial.o
@endverbatim
Then, link the program by indicating the SG++ library path and the modules
you want to link against:
@verbatim
g++ tutorial.o -fopenmp ^
  -LC:\PATH_TO_SGPP\lib\sgpp ^
  -lsgppbase ^
  -o tutorial
@endverbatim
To run the program, note that you have to set the <tt>PATH</tt>
environment variable to include the SG++ library path:
@verbatim
set PATH=C:\PATH_TO_SGPP\lib\sgpp;%PATH%
tutorial
@endverbatim

@subsection mingw_using_python Python

The Python bindings pysgpp can be used by installing pysgpp in the local @c site-packages folder:
@verbatim
python setup.py install --user
@endverbatim
To run your Python program, don't forget to update the @c PATH
environment variable in any case:
@verbatim
set PATH=C:\PATH_TO_SGPP\lib\sgpp;%PATH%
python tutorial.py
@endverbatim

@subsection mingw_using_java Java

Java programs using the Java bindings jsgpp have to be compiled in this way:
@verbatim
javac -cp .;C:\PATH_TO_SGPP\lib\jsgpp\jsgpp.jar tutorial.java
@endverbatim
Note the use of <tt>;</tt> instead of <tt>:</tt> like on Linux.
When running Java programs, you have to augment @c PATH
not only by the SG++ library path, but also by a path specific for jsgpp:
@verbatim
set PATH=C:\PATH_TO_SGPP\lib\sgpp:C:\PATH_TO_SGPP\lib\jsgpp:%PATH%
java -cp .;C:\PATH_TO_SGPP\lib\jsgpp\jsgpp.jar tutorial
@endverbatim

@subsection mingw_using_matlab MATLAB

MATLAB can use SG++ in two ways.

@subsubsection mingw_using_matlab_mex Via MEX Interface

One way is to use MATLAB's MEX interface to write a C++ program interacting
with SG++ directly in C++ and converting input and output arguments
from and to MATLAB's data structures.
If
<a href="https://www.mathworks.com/help/matlab/ref/mex.html" target="_blank">
MATLAB's @c mex function</a> cannot find MinGW's <tt>g++</tt> compiler,
you can compile and link the MEX file by yourself with the following commands:
@verbatim
g++ your_mex_program.cpp ^
  -c -std=c++11 -fopenmp ^
  -Wall -Wextra ^
  -IC:\local\matlab_x64\R2015a\extern\include ^
  -IC:\SGpp\trunk\base\src ^
  -o your_mex_program.o && ^
g++ your_mex_program.o ^
  -shared -fopenmp ^
  -LC:\local\matlab_x64\R2015a\bin\win64 ^
  -LC:\SGpp\trunk\lib\sgpp ^
  -lmex ^
  -lsgppbase ^
  -o your_mex_program.mexw64
@endverbatim
Of course, you have to add include paths and library switches for each
module that @c your_mex_program uses.
However, keep in mind that library files generated by different compilers
are not compatible with each other:
Refer to
<a href="https://www.mathworks.com/help/matlab/matlab_external/compiling-c-mex-files-with-mingw.html" target="_blank">
MATLAB's documentation page for troubleshooting with MinGW</a>
for more information.

@subsubsection mingw_using_matlab_jsgpp Via jsgpp

However, the more direct way to use SG++ from within MATLAB is to use jsgpp,
i.e., using the Java library of SG++ and import it to MATLAB.
Before we can use these methods in MATLAB, we have to add
<tt>C:\\PATH_TO_SGPP\\lib\\jsgpp</tt> to the @c librarypath.txt file of MATLAB.
(Hint: Typing @c matlabroot in MATLAB returns the path of your MATLAB
installation.)
Open the file <tt>C:\\PATH_TO_MATLAB\\toolbox\\local\\librarypath.txt</tt>
in a text editor and add the line
@verbatim
C:\PATH_TO_SGPP\lib\jsgpp
@endverbatim
at the end of the file.

When starting MATLAB, make sure that the Java version of
MATLAB's internal Java Runtime Environment
(check with <tt>version -java</tt> in MATLAB)
is newer than that of the Java you built jsgpp with
(check with <tt>java -version</tt> in <tt>cmd.exe</tt>).
In general, you will have to force MATLAB to use your installed JDK
by using the <tt>MATLAB_JAVA</tt> environment variable.
Also, set the <tt>PATH</tt> environment variable appropriately as before.
Therefore, start MATLAB by typing the following:
@verbatim
set MATLAB_JAVA=C:\PATH_TO_JDK\jre
set PATH=C:\PATH_TO_SGPP\lib\sgpp:C:\PATH_TO_SGPP\lib\jsgpp:%PATH%
matlab
@endverbatim

After starting MATLAB,
we have to add the @c jsgpp.jar file to MATLAB's class path with the command
@verbatim
javaaddpath('C:\PATH_TO_SGPP\lib\jsgpp\jsgpp.jar');
@endverbatim
The final step consists in loading the jsgpp library via
@verbatim
sgpp.LoadJSGPPLib.loadJSGPPLib();
@endverbatim
You should now be able to use SG++ in MATLAB.
For an example, change to the directory @c base/examples/ and run
<tt>tutorial.m</tt> with
@verbatim
tutorial;
@endverbatim

@subsubsection mingw_using_matlab_hints Hints

See the @ref linux_using_matlab_hints "Linux page" for hints on how to
use SG++ within MATLAB.



@section mingw_troubleshooting Troubleshooting

- In <tt>cmd.exe</tt>, type
  @verbatim
set
  @endverbatim
  to display the values of all environment variables.
- If you get an error of this type during compilation
  @verbatim
OperationMultipleEvalSubspaceCombined.hpp:82:121: fatal error: ../../OperationMultipleEvalSubspace/combined/OperationMultipleEvalSubspaceCombined_calculateIndexCombined.hpp: No such file or directory
  @endverbatim
  then a developer didn't read the @ref development_coding "developer How-Tos"
  and did not know that relative include paths are not supported under Windows
  using MinGW.
  To solve this issue you either find out who it was and burn his house down
  or fix it by yourself (preferable).
  If you are using an official release of SG++, please report the bug to
  the developers. Thanks!
- If you are using an older computer (say < 2011) and the compilation seem to succeed but the unit tests fail, then you might have a problem with your architecture. By default SG++ is compiled with AVX support, which your processor may not support. Try to add the flag
  @verbatim
ARCH=SSE3
  @endverbatim
  to your build command, which replaces AVX by SSE3. SSE3 is supported by processors, which have been released after 2006. 
*/
