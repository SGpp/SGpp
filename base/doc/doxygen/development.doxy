/**
@page development Development How-To

On this page, we describe best coding practices for SG++.

<div style="max-width:40em; padding:1em; margin:1em auto; color:red;">
    All code has to be documented in such a way that functions,
    classes, and all other entities appearing in this documentation are easily understandable
    for @e all other developers.
</div>



<!-- ############################################################# -->
@section development_overview Overview
- @ref development_testing
- @ref development_doxygen
- @ref development_coding



<!-- ############################################################# -->
@section development_testing Testing

We have both Boost unit tests (in C++) and Python unit tests.
The tests can be found in the test subdirectory of each module.
New tests should be written preferably with Boost.
However, there is some extra functionality in Python which
can be tested only in Python, of course.

If you modify existing code, do not forget
to make sure that no new errors are introduced. If you write new
functionalities, do @em always add unit tests for each functionality!



<!-- ############################################################# -->
@section development_doxygen Doxygen

The documentation has to be Doxygen compatible.
Doxygen tags must be used in the Java-style way, i.e.,
starting with <tt>\@</tt>.

During development tags like <tt>\@todo</tt> should be used wherever applicable.
They are then listed on the @ref todo "Todo page".

Different source files can be grouped together in so-called modules.
The link to the @ref modules "page listing all modules"
can be found in the navigation bar of the documentation.
Note that this page and the @ref examples "page listing all examples"
are autogenerated when running SCons.

Please correct any warnings or errors that appear when creating the
documentation with Doxygen!

@sa <a href="http://www.stack.nl/~dimitri/doxygen/manual.html"
target="_blank">Doxygen manual</a>
@sa <a href="http://www.stack.nl/~dimitri/doxygen/docblocks.html"
target="_blank">Documenting the code with Doxygen</a>
@sa <a href="http://www.stack.nl/~dimitri/doxygen/commands.html"
target="_blank">Special Doxygen commands</a>

@subsection development_doxygen_usage Usage

Executing <tt>doxygen</tt> in the main folder creates the
Doxygen documentation in the subfolder <tt>doc</tt>.
The settings for Doxygen are taken from <tt>Doxyfile</tt>.
This file is automatically created based on <tt>Doxyfile_template</tt>
each time @c scons is exectued,
therefore, for modifications, please change <tt>Doxyfile_template</tt> instead.



<!-- ############################################################# -->
@section development_coding Coding

@subsection development_coding_comments Comments

The complete code has to be commented elaborately.
The comments, together with the identifiers, have to enable others to
familiarize with the code quickly.
Header files have to be commented completely.
In source files, it suffices to comment the codelines.
The comments have to be verbose enough so that one can understand what is
going on without reading the code!
Please use Doxygen-compatible comments for classes and methods.

@subsection development_coding_style Style

Compliance with the style guide is important to write good code.
A style guide is more than a bunch of indentation rules;
rather, it is the art of creating easily reusable, understandable, and
refactorable code.

We adhere mostly to the
<a href="https://google.github.io/styleguide/cppguide.html" target="_blank">
Google C++ Style Guide</a>.
However, there are some exceptions:
- We use a maximum line length of 100 characters
  (instead of Google's 80 characters).
- We allow functions to have non-const reference arguments
  for output parameters
  (Google's style guide would require to use pointers instead).

To ensure compliance with most rules of the style guide,
Google's Python script cpplint.py is used
(in a slightly modified version located in tools/cpplint.py).
By default, on every invokation of SCons, it is automatically run
on each *.cpp or *.hpp file which was modified since the last run of SCons.
If issues are found, warnings of the following form are printed on the screen:
@verbatim
base/src/sgpp/globaldef.hpp:95: warning: Namespace should be terminated with "// namespace sgpp"  [readability/namespace] [5]
@endverbatim
The number in brackets at the end indicates the confidence that
the line is indeed a problem, using a scale from 1 to 5
(5 means certainness).
Be aware that some warnings are filtered out deliberately
to implement the exceptions above.

Currently, SCons generates empty *.lint files
whose modification times are used to track which files have to be analyzed.
Delete the lint files to retrigger the analysis of all code files:
@verbatim
find base/src/ -name '*.cpp.lint' -or -name '*.hpp.lint' | xargs rm
@endverbatim
You can deactivate the style checking
(and thus the creation of the *.lint files)
by setting <tt>RUN_CPPLINT=0</tt> on the SCons command line.

You can also use a formatter tool to automatically format your code
which should fix most of the "easy" style warnings
(indentation, line length, etc.).
We recommend using clang-format,
which can be installed on an Ubuntu system using
@verbatim
apt-get install clang-format-3.7
@endverbatim
You can format all files in-place with a command like the following:
@verbatim
find base/src/ -name '*.hpp' -or -name '*.cpp' | xargs clang-format-3.7 -style=file -i
@endverbatim
The configuration of the formatter is done via the file <tt>.clang-format</tt>
at top level.

If you are developing with Eclipse,
clang-format and cpplint can also be applied automatically on every file save
by using a slightly modified version of the
<a href="https://github.com/wangzw/CppStyle" target="_blank">
Eclipse plugin CppStyle</a>,
which is also included in the tools directory of SG++
(the modification was necessary since CppStyle does not analyze hpp files).
To install the plugin, simply copy the *.jar to the dropins subdirectory
in your Eclipse installation location (i.e., not your workspace directory).
The configuration is then done by clicking on
<i>Window</i> &rarr; <i>Preferences</i> &rarr; <i>C/C++</i> &rarr;
<i>CppStyle</i>.
Enter the paths to the clang-format executable (e.g., in /usr/bin)
and to the cpplint.py script (tools/cpplint.py).
Finally, check <i>Enable cpplint</i> and <i>Run clang-format on file save</i>.

@subsection development_coding_naming Naming

Naming:
- Directories: all lowercase, underscore separated
  (e.g., <tt>test_problem</tt>)
- Classes: camel case starting uppercase 
  (e.g., <tt>GridStorage</tt>)
- Functions, Methods, Variables: camel case starting lowercase
  (e.g., <tt>getLevel</tt>)
- Constants, Defines: all uppercase, underscore separated
  (e.g., <tt>INITIAL_LEVEL</tt>)
- Nothing starts with underscores (only system/builtin/compiler).

@subsection development_coding_donts Don'ts

Don't…
- … include <tt>sgpp_MODULENAME.hpp</tt>.
  Only include the header files you require to avoid long building durations.
- … use includes with quotation marks (<tt>include "Foo.hpp"</tt>);
  use angle brackets instead (<tt>include &lt;Foo.hpp&gt;</tt>).
- … use relative include paths (<tt>include &lt;../Foo.hpp&gt;</tt>).
  Always use absolute paths (<tt>include &lt;sgpp/base/Foo.hpp&gt;</tt>).
- … use <tt>using namespace</tt>.
- … use tabs, use two spaces instead!
  Please configure your editor in order to do so!
*/
