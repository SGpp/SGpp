/**
@page development Development How-To

On this page, we describe best coding practices for SG++.

<div style="max-width:40em; padding:1em; margin:1em auto; color:red;">
    All code has to be documented in such a way that functions,
    classes, and all other entities appearing in this documentation are easily understandable
    for @e all other developers.
</div>



<!-- ############################################################# -->
@section development_overview Overview
- @ref development_testing
- @ref development_doxygen
- @ref development_coding



<!-- ############################################################# -->
@section development_testing Testing

We have both Boost unit tests (in C++) and Python unit tests.
The tests can be found in the test subdirectory of each module.
New tests should be written preferably with Boost.
However, there is some extra functionality in Python which
can be tested only in Python, of course.

If you modify existing code, do not forget
to make sure that no new errors are introduced. If you write new
functionalities, do @em always add unit tests for each functionality!



<!-- ############################################################# -->
@section development_doxygen Doxygen

The documentation has to be Doxygen compatible.
Doxygen tags must be used in the Java-style way, i.e.,
starting with <tt>\@</tt>.

During development tags like <tt>\@todo</tt> should be used wherever applicable.
They are then listed on the @ref todo "Todo page".

Different source files can be grouped together in so-called modules.
The link to the @ref modules "page listing all modules"
can be found in the navigation bar of the documentation.
Note that this page and the @ref examples "page listing all examples"
are autogenerated when running SCons.

Please correct any warnings or errors that appear when creating the
documentation with Doxygen!

@sa <a href="http://www.stack.nl/~dimitri/doxygen/manual.html"
target="_blank">Doxygen manual</a>
@sa <a href="http://www.stack.nl/~dimitri/doxygen/docblocks.html"
target="_blank">Documenting the code with Doxygen</a>
@sa <a href="http://www.stack.nl/~dimitri/doxygen/commands.html"
target="_blank">Special Doxygen commands</a>

@subsection development_doxygen_usage Usage

Executing <tt>doxygen</tt> in the main folder creates the
Doxygen documentation in the subfolder <tt>doc</tt>.
The settings for Doxygen are taken from <tt>Doxyfile</tt>.
This file is automatically created based on <tt>Doxyfile_template</tt>
each time @c scons is exectued,
therefore, for modifications, please change <tt>Doxyfile_template</tt> instead.



<!-- ############################################################# -->
@section development_coding Coding

@subsection development_coding_comments Comments

The complete code has to be commented elaborately.
The comments, together with the identifiers, have to enable others to
familiarize with the code quickly.
Header files have to be commented completely.
In source files, it suffices to comment the codelines.
The comments have to be verbose enough so that one can understand what is
going on without reading the code!
Please use Doxygen-compatible comments for classes and methods.

@subsection development_coding_style Style

Compliance with the style guide is important to write good code.
A style guide is more than a bunch of indentation rules;
rather, it is the art of creating easily reusable, understandable, and
refactorable code.

We adhere mostly to the
<a href="https://google.github.io/styleguide/cppguide.html" target="_blank">
Google C++ Style Guide</a>.
However, there are some exceptions, e.g.,
the indentation of namespaces.
The SG++ code style is defined by a set of
<a href="http://astyle.sourceforge.net/" target="_blank">astyle</a>
parameters.
It can be found in the file <tt>tools/astylerc</tt>.

@subsection development_coding_naming Naming

Naming:
- Directories: all lowercase, underscore separated
  (e.g., <tt>test_problem</tt>)
- Classes: camel case starting uppercase 
  (e.g., <tt>GridStorage</tt>)
- Functions, Methods, Variables: camel case starting lowercase
  (e.g., <tt>getLevel</tt>)
- Constants, Defines: all uppercase, underscore separated
  (e.g., <tt>INITIAL_LEVEL</tt>)
- Nothing starts with underscores (only system/builtin/compiler).

@subsection development_coding_donts Don'ts

Don't…
- … include <tt>sgpp_MODULENAME.hpp</tt>.
  Only include the header files you require to avoid long building durations.
- … use includes with quotation marks (<tt>include "Foo.hpp"</tt>);
  use angle brackets instead (<tt>include &lt;Foo.hpp&gt;</tt>).
- … use relative include paths (<tt>include &lt;../Foo.hpp&gt;</tt>).
  Always use absolute paths (<tt>include &lt;sgpp/base/Foo.hpp&gt;</tt>).
- … use <tt>using namespace</tt>.
- … use tabs, use two spaces instead!
  Please configure your editor in order to do so!
*/
