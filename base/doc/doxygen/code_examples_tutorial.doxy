/**
@page code_examples_tutorial Tutorial (Simple Example)

To be able to quickly start with a toolkit, it is often advantageous
(not only for the impatient users), to look at some code examples first.
In this tutorial, we give a short example program which interpolates a
bivariate function on a regular sparse grid.
Identical versions of the examples are given in all languages
currently supported by SG++: Python, C++, Java, and MATLAB.
We give explanations for the Python version;
however, all statements given in the explanation
are valid to the other languages, too.

For instructions how to compile and run the example,
please see \ref installation.

In the example, we create a two-dimensional regular sparse grid with level 3
using piecewise linear basis functions without grid points on the
boundary.
We then interpolate the function
@f[
  f(x_0, x_1) := 16 (x_0 - 1) x_0 (x_1 - 1) x_1
@f]
with
@f[
  u(x_0, x_1) := \sum_{j=1}^N \alpha_j \varphi_j(x_0, x_1)
@f]
by setting the coefficients @f$\alpha_j@f$ to the function values of
@f$f@f$ at the corresponding grid points. Then we hierarchize it,
transforming the function values at the grid points into hierarchical
coefficients. Finally, we evaluate the sparse grid function @f$u@f$ at
@f$(0.52,0.73)@f$.



@section code_examples_tutorial_overview Overview
- \ref code_examples_tutorial_python
 - \ref code_examples_tutorial_python_linebyline
- \ref code_examples_tutorial_cpp
- \ref code_examples_tutorial_java
- \ref code_examples_tutorial_matlab



@section code_examples_tutorial_python Python

First, we show the whole code of file tutorial.py at once, as it can be
found in the directory @c base/examples/, which we then discuss line by line.

@include tutorial.py

The example results in the following output:
@include tutorial.output.txt
It can be clearly seen that the surplusses decay with a factor of 1/4:
On the first level, we obtain 1, on the second 1/4, and on the third
1/16 as surplusses.



@subsection code_examples_tutorial_python_linebyline Explanations line by line

@dontinclude tutorial.py
@until pysgpp
We import the pysgpp classes which we require afterwards,
with the most important being sgpp::base::DataVector and sgpp::base::Grid.

@until dimensionality
creates a two-dimensional grid object with piecewise bilinear basis
functions with the help of the factory method
sgpp::base::Grid.createLinearGrid().
Then we obtain a reference to the Grid's
GridStorage object which allows us, e.g., to access grid
points, to obtain the dimensionality (which we print) and the
number of grid points.

@until number
Here, we use a sgpp::base::GridGenerator to
create a regular sparse grid of level 3.
Thus, @c gridStorage.size() returns 17, the number of grid points
of a two-dimensional regular sparse grid of level 3.

@until length
Now we create an object of type sgpp::base::DataVector which has as many
entries as there are grid points. It serves as a coefficient vector for the
sparse grid interpolant we want to construct. As the entries of a
freshly created DataVector are not initialized, we set them to
0.0. (This is superfluous here as we initialize them in the
next few lines anyway.)

@until alpha before hierarchization
Here, the function @f$f@f$, which we want to interpolate, is defined.
The @c for loop iterates over all grid points: For each grid
point @c gp, the corresponding coefficient @f$\alpha_j@f$ is set to the
function value at the grid point's coordinates which are obtained by
@c getCoord(dim).
The current coefficient vector is then printed.

@until alpha after hierarchization
An object sgpp::base::OperationHierarchisation is created and used to
hierarchize the coefficient vector, which we print.

@until u(
Finally, a second DataVector is created which is used as a point to
evaluate the sparse grid function. An object is obtained which
provides an evaluation operation, and the sparse grid interpolant is
evaluated close to (but not exactly at) a grid point.



@section code_examples_tutorial_cpp C++

The C++ version of the example can be found in
<tt>base/examples/tutorial.cpp</tt>.
It does exactly the same as the other examples.
Here is the code:

@include tutorial.cpp



@section code_examples_tutorial_java Java

The Java version of the example can be found in
<tt>base/examples/tutorial.java</tt>.
It does exactly the same as the other examples.
Here is the code:

@include tutorial.java



@section code_examples_tutorial_matlab MATLAB


The Java version of the example can be found in
<tt>base/examples/tutorial.m</tt>.
It does exactly the same as the other examples.
Here is the code:

@include tutorial.m
*/
