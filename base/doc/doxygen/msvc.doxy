/**
@page msvc Windows (MSVC++)

This page contains instructions for compiling and using SG++ with
Microsoft Visual C++ (MSVC++) under Windows.

We do not officially support the usage of SG++ with MSVC++.
We do not guarantee
that all the features provided on a Unix platform are available for
MSVC++, but most of them will. Nevertheless, by following
the instructions below you will be able to build SG++ also on MSVC++
and use the Python and Java/MATLAB interface.



@section msvc_overview Overview

- @ref msvc_caveats
- @ref msvc_dependencies
- @ref msvc_compilation
- @ref msvc_troubleshooting



@section msvc_caveats Caveats

- Shared libraries (DLLs) are only possible for 32 bit due to
  missing support of @c bindexplib.
- In general, 64 bit is causing trouble with the Python and Java interface
  due to inconsistent handling of the @c size_t type in SWIG.
  It does not work out of the box and
  no automatic solution is available at the moment.
- Compiling SG++'s parallel or combigrid module won't work.
  Disable them by appending <tt>SG_PARALLEL=0 SG_COMBIGRID=0</tt> to
  the SCons command line.
- The Python interface on Windows does not provide enum types from
  C++. This does restrict its usability significantly but currently
  there is no solution to that issue available.
- Boost tests will compile, but not run.
  You can compile them by specifying <tt>COMPILE_BOOST_TESTS=1</tt>,
  but you need to set <tt>RUN_BOOST_TESTS=0</tt>,
  otherwise the build will fail.



@section msvc_dependencies Dependencies

@subsection msvc_dependencies_required Required

- <a href="https://www.visualstudio.com/" target="_blank">
  Visual Studio (&ge; 14)</a>
- <a href="http://python.org/" target="_blank">Python 2.7 (x86)</a>
  as a prerequisite for SCons (Python 3.0 is not yet support by SCons).
- <a href="http://www.scons.org/" target="_blank">SCons (&ge; 2.3)</a>
  is required for building (build system).
  SCons is written in Python 2.7, which is therefore needed by SG++ as well.
- <a href="http://sourceforge.net/projects/pywin32/" target="_blank">
  PyWin32 (x86)</a>
  for parallel building and some tweaks in our @c SConstruct.

@subsection msvc_dependencies_recommended Recommended

- <a href="http://www.boost.org/" target="_blank">Boost.Test</a>
  for compiling the unit tests.
- <a href="http://www.swig.org/" target="_blank">SWIG (&ge; 3.0)</a>,
  if you want to use SG++ within Python, Java, or MATLAB.
  SWIG creates bindings from C/C++ functions in order to make
  them available as a Python module or
  prepare them to be called from Java code.
- <a href="http://www.python.org/" target="_blank">
  Python development headers</a> are needed,
  if you want to compile the Python bindings.
- <a href="http://www.numpy.org/" target="_blank">NumPy for Python 2.7</a>
  is needed, if you want to run the Python tests/examples.
- <a href="http://www.java.com/" target="_blank">Java Development Kit (JDK)</a>,
  if you want to compile the Java bindings.
- <a href="http://www.doxygen.org/" target="_blank">Doxygen</a> is required to
  create and compile the documentation, which you are reading right now.

@subsection msvc_dependencies_optional Optional

- <a href="http://www.graphviz.org/" target="_blank">
  dot in the Graphviz package</a>
  is optional and generates inheritance diagrams in the Doxygen documentation.

@subsection msvc_dependencies_installation Installation

1. Install Visual Studio (11GB):
   Make sure that Visual C++ and the Python tools are installed.
2. Install Python 2.7 (x86) to a folder to which
   you have full access (e.g., <tt>C:\\local</tt>).
   Add <tt>python.exe</tt> to the system path variable @c PATH.
3. Install SCons (x86).
4. Install the Boost.Test library to compile the Boost unit tests.
   The unit test framework needs to be available,
   the path to the libraries needs to be added to @c PATH.
5. Interfaces to Python and Java:
   1. Install SWIG and add it to @c PATH.
   2. Python: You need to install NumPy.
   3. Java: Install JDK and JRE for Java support.
      Please check the platform (x86 or x64).
      Add javac.exe (you can find it in the installation of the JDK) to @c PATH.
6. Documentation:
   1. Install Doxygen to create the documentation of SG++.
   2. Install Graphviz for dependency graphs in the documentation.
   3. Make sure that both paths to the executables of Doxygen and Graphviz
      are available in the system path variable (@c PATH).



@section msvc_compilation Compilation with SCons

Compilation of the C++ libraries is done with SCons. Execute
@verbatim
scons -j <number of cores>
@endverbatim
in the main folder. For configuration and optimization, see below.

To obtain help on parameters for compilation, type
@verbatim
scons --help
@endverbatim
For example, add <tt>VERBOSE=1</tt> to the SCons command line to
see the compilation and linking commands.

@subsection msvc_compilation_configuration Configuration

SCons uses the file <tt>SConstruct</tt>. This file contains all
information for compiling SGpp. To build SG++ under MSVC++ you need
to specify the Visual Studio compiler. However, Visual Studio provides
a variety of different compilers depending on the architecture you are
working on. To prepare the environment (path variables, etc.) you need
to specify the correct script, which is also provided by Visual
Studio. On a standard Windows 7 installation, this is usually
<tt>"C:\PATH_TO_VISUAL_STUDIO\VC\bin\vcvars32.bat"</tt>
for building x86 code on an amd64 machine. Moreover, to tell scons that
you want to use the Visual Studio compiler set <tt>TARGETCPU=VCC</tt>.

Keep in mind that you have to disable the parallel and combigrid module
by setting <tt>SG_PARALLEL=0 SG_COMBIGRID=0</tt> due to incompatibilites.

For additional remarks about building with SCons,
please refer to the @ref linux_compilation "Linux page".

@subsection msvc_compilation_static Static Libraries

If you want to build a static library, run the following:
@verbatim
scons SG_PARALLEL=0 ^
  SG_COMBIGRID=0 ^
  USE_STATICLIB=1 ^
  TARGETCPU=VCC ^
  MSVC_USE_SCRIPT="C:\PATH_TO_VISUAL_STUDIO\VC\bin\vcvars32.bat"
@endverbatim

The libraries are installed to
<tt>lib/sgpp/sgppMODULENAMEstatic.lib</tt>,
where MODULENAME stands for the name of the module (e.g., @c base).

@subsection msvc_compilation_dynamic Dynamic Libraries

However, dynamic libraries can only be built for 32 bit.
The issue here is that the default behavior of a DLL is to
export no symbols at all. The default behavior of a SG++ library,
however, is the opposite, to export all the available symbols.
To do that we need an external application called bindexplib,
which generates a module definition file containing all the available
symbols in the source files. This so called def file can be forwarded
to the DLL linker, which now exports all the symbols defined in the
def file. The source code for bindexplib is available in
<tt>tools\\bindexplib</tt> and needs to be compiled on your Windows
machine and the path of the EXE needs to be added to the path variable.
The bindexplib application just supports 32 bit compiled object files.

Generate another Visual Studio project to compile the
bindexplib as follows:
- Create a new project by
  <i>File</i> &rarr; <i>New</i> &rarr;
  <i>Project from existing code</i>; select <i>Visual C++</i> as project type.
- Click <i>Next</i>, specify the path to bindexplib
  (<tt>C:\\PATH_TO_SGPP\\tools\\bindexplib</tt>), and
  give some unique name to the project.
- Click <i>Next</i>, check <i>Use Visual Studio</i>,
  and select <i>Console application project</i> as project type.
- Click <i>Next</i> &rarr; <i>Finish</i>.
- Build the project and add
  <tt>C:\\PATH_TO_SGPP\\tools\\bindexplib</tt> to @c PATH.

Please execute
@verbatim
scons SG_PARALLEL=0 ^
  SG_COMBIGRID=0 ^
  USE_STATICLIB=0 ^
  TARGETCPU=VCC ^
  MSVC_USE_SCRIPT="C:\PATH_TO_VISUAL_STUDIO\VC\bin\vcvars32.bat"
@endverbatim
to obtain the dynamic library.
The libraries are installed to
<tt>lib/sgpp/sgppMODULENAME.{dll|lib}</tt>
(shared library and corresponding import library),
where MODULENAME stands for the name of the module (e.g., @c base).

@subsection msvc_compilation_cleaning Cleaning the project

Please execute
@verbatim
scons SG_PARALLEL=0 ^
  SG_COMBIGRID=0 ^
  MSVC_USE_SCRIPT="C:\PATH_TO_VISUAL_STUDIO\VC\bin\vcvars32.bat" ^
  -c
@endverbatim

@subsection msvc_compilation_pysgpp Python Bindings

The Python bindings are built if the <tt>SG_PYTHON=1</tt> flag is set.
After compilation, two files, pysgpp.py and _pysgpp_swig.dll are
copied to the <tt>lib\\pysgpp</tt> folder, which define the Python
interface. If you want to use them, you need to install the package to
your either a local or a system wide site-package location.
To use your local folder execute
@verbatim
python setup.py install --user
@endverbatim
from the root directory of SG++.

Note, that in Unix the <tt>lib</tt> directory has implicitly the
structure of a valid Python package and contains the full capabilities
of SG++.
This is not the case for Windows since the <tt>extensions</tt>
are missing due to missing rights to create symlinks to the
corresponding subfolders of the SG++ packages, for
example <tt>base/python</tt>.

However, you can import and print contents via
@code{.py}
import pysgpp
dir(pysgpp)
@endcode

Note that package specific functionality is available as an extension
to the C++ code, for example write
@code{.py}
from pysgpp.extensions.datadriven import uq
@endcode
to use the uncertainty quantification Python package.

@subsection msvc_compilation_jsgpp Java Bindings

For the use of SGpp with Java, you have to generate the <tt>jsgpp</tt>. It can be generated with
@verbatim
scons SG_JAVA=1 ^
  SG_PARALLEL=0 ^
  SG_COMBIGRID=0 ^
  TARGETCPU=VCC ^
  MSVC_USE_SCRIPT="C:\PATH_TO_VISUAL_STUDIO\VC\bin\vcvars32.bat"
@endverbatim

@subsection msvc_compilation_vs SCons with Visual Studio

- Create a new project by
  <i>File</i> &rarr; <i>New</i> &rarr; <i>Project from existing code</i>;
  select <i>Visual C++</i> as project type.
- Click <i>Next</i>, specify the path to SG++, and
  give some unique name to the project.
- Click <i>Next</i>, check <i>use external build system</i> and add the
  scons build command line above in the field
  <i>Build command line</i>.
- Click <i>Finish</i>.
- To make the symbols visible to the indexer, add the include paths
  of every SG++ package you want to use to the VC++ directories
  available in the properties of the project under <i>VC++ Directories</i>
  &rarr; <i>Include Directories</i>.
- If you want to adjust the build command, go to the properties of
  the project &rarr; <i>NMake</i> &rarr; <i>Build Command Line</i>.



@section msvc_troubleshooting Troubleshooting

A few helpful hints for what has caused trouble before
(or might cause trouble in the future...)

- Make the variable JAVA_HOME globally available so that SCons finds the
  headers for the Java interface.
- Make sure that Python 2.7 is installed in a folder with full access (do
  not use "Program Data" or comparable system folders), otherwise
  SCons won't install.
- To run the Python unit tests one needs to make the full Python
  package available. This can be done in Unix either by installation
  of the package via the <tt>setup.py</tt> script or via setting
  @c PYTHONPATH to include <tt>lib</tt>. However, for MSVC++, just the first
  approach is available currently. To make sure that pysgpp
  is available in the <tt>PYTHONPATH</tt>, one needs to install it
  somewhere. Currently, SCons installs it to some temporary folder and
  adds this very folder to <tt>PYTHONPATH</tt>. To avoid conflicts with
  other installed versions of pysgpp, the temporary folder is
  added as first element to the <tt>PYTHONPATH</tt>. This is a bit
  hacky but works with current Python releases. To make the user aware
  of this problem a warning is shown if more than one pysgpp
  installations are detected.
*/
