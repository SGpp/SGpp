/**
@page installationWindows Installation and Compilation on Windows

We do not officially support the Windows platform. We do not guarantee
that all the features provided on a Unix platform are available on
Windows platforms, but most of them will. Nevertheless, by following
the instructions below you will be able to build SG++ also on Windows
and use the Python and Java/Matlab interface.

@section installationWindowsOverview Overview
- \ref installationWindowsRequirements
- \ref howtoinstallonwindows
- \ref installationWindowsCompilation_scons
- \ref installationWindowsTroubleshooting


@section installationWindowsRequirements Requirements and Recommendations
@subsection installationWindowsRequirements_necessary Required

- Visual Studio (>= 14), https://www.visualstudio.com/, is
recommended
- SCons (>= 2.4.0), http://www.scons.org/, is required for
compilation. SCons is a Makefile replacement that facilitates quite
a few things. If you want to enable parallel builds you need
to install the pywin32 package.
- swig (>= 3.0.7), http://www.swig.org/, if you want to use SGpp within python
or java, this program creates bindings from C/C++ functions in order to make
them available as a python module or prepare them to be called from
java code.
- python 2.7 (32 Bit version), this is a current (2015) restriction
of SCons on Windows; additionally install numpy to enable the python
interface
- doxygen, http://www.doxygen.nl/index.html, is required to create and compile
the documentation. Essentially, what can be found at
http://sgpp.sparsegrids.org
@subsection installationWindowsRequirements_optional Optional packages
- swig, for generating the interfaces to python and java/Matlab,
http://www.swig.org/download.html
- numpy, for python support, http://sourceforge.net/projects/numpy/files/NumPy/1.10.1/
- dot, in the Graphviz package, http://www.graphviz.org/, is optional
for inheritance diagrams in the documentation generated by doxygen.
- matplotlib, http://matplotlib.sourceforge.net/, is optional snd enables SGpp to
generate progress information graphs.
- boost (unit test framework) for unit tests

@section howtoinstallonwindows How to install all the packages you need to compile SG++

@subsection Required

- install Visual Studio (11GB): make sure that Visual C++ and the
  python tools are installed
- install Python2.7 (32 Bit) to a folder to which
  you have full access (C:\\local for example). Add python.exe to the
  system path variable (=PATH)
- the next step consists in installing SCons. Note that with the
  current version of SCons (2.4.0) a 32 Bit installation of is
  required.

@subsection Optional
- install the boost library to run the boost unit tests. The unit test
framework needs to be available, the path to the libs needs to be
added to PATH.
- interfaces to python and java
  - install swig and add it to PATH
  - python
    - you need to install numpy
  - java
    - install jdk and jre for java support. Please check the platform
      (x86 or amd64). Add javac.exe (you find it in the installation
      of the jdk) to PATH.
- documentation:
  - install doxygen to create the documentation of SG++
  - install graphviz for beautiful images in the documentation ;)
  - Make sure that both paths to the executables of doxygen and graphviz
    are available in the system path variable (PATH)

@section installationWindowsCompilation_scons Compilation with SCons

Compilation of the C++ libraries is done with SCons. Execute
@verbatim
  scons -j <number of cores>
@endverbatim
in the main folder. For configuration and optimization, see below.

To obtain help on parameters for compilation, type
@verbatim
  scons --help
@endverbatim

After compilation just the unit-tests (located in the
<tt>tests</tt>-folder of each module) are executed.

@subsection installationWindowsSconsConfiguration Configuration for compilation

SCons uses the file <tt>SConstruct</tt>. This file contains all
information for compiling SGpp. To build SG++ under Windows you need
to specify the Visual Studio compiler. However, Visual Studio provides
a variety of different compilers depending on the architecture you are
working on. To prepare the environment (path variables, etc.) you need
to specify the correct script, which is also provided by Visual
Studio. On a standard Windows 7 installation this is usually

<tt>"C:\path\to\Visual Studio\VC\bin\vcvars32.bat"</tt>

for building x86 code on a amd64 machine. Moreover, to tell scons that
you want to use the Visual Studio compiler set

<tt>TARGETCPU=VCC</tt>

If you want to build a static library you can now proceed by executing
@code{bash}
  scons SG_PARALLEL=0 SG_COMBIGRID=0 USE_STATIC=1 TARGETCPU=VCC MSVC_USE_SCRIPT="C:\path\to\Visual Studio\VC\bin\vcvars32.bat"
@endcode

The library is installed to

<tt>lib/sgpp/sgpp<package name\>static.lib</tt>

@subsection installationWindowsBuilding Building dlls and bindexplib

However, if you want to build a dynamic library just 32 Bit is
supported. The issue here is that the default behavior of a dll is to
export no symbols at all. The default behavior of a SG++ library,
however, is the opposite, export all the available symbols. To do that
we need an external application called <tt>bindexplib</tt>, which
generates a module definition file that contains all the available
symbols in the source files. This so called def-file can be forwarded
to the dll linker, which now exports all the symbols defined in the
def-file. The source code for <tt>bindexplib</tt> is available in
<tt>tools/bindexplib</tt> and needs to be compiled on your Windows
machine and the path of the exe added to the path variable. The
bindexplib application just supports 32 Bit compiled object files.

Generate another Visual Studio project to compile the
bindexplib as follow
Create a new project by
  - File -> New -> Project from existing code; select Visual C++ as
  project type (-> Next) specify the path to bindexplib
  (<tt>/path/to/SG++/tools/bindexplib</tt>), give some unique name to the
  project (-> Next) Check "Use Visual Studio" and select "Console
  application project" as project type.
  - Click Next -> Finish
Build the project and add <tt>/path/to/SG++/tools/bindexplib</tt> to
PATH

Please execute
@code{bash}
  scons SG_PARALLEL=0 SG_COMBIGRID=0 USE_STATICLIB=0 TARGETCPU=VCC MSVC_USE_SCRIPT="C:\path\to\Visual Studio\VC\bin\vcvars32.bat"
@endcode
to obtain the dynamic library. The library is installed to

<tt>lib/sgpp/sgpp<package name\>.{lib|dll}</tt>

@subsection installationWindowsCleaning Cleaning the project

Please execute
@code{bash}
  scons SG_PARALLEL=0 SG_COMBIGRID=0 MSVC_USE_SCRIPT="C:\path\to\Visual Studio\VC\bin\vcvars32.bat" -c
@endcode

@subsection installationWindowsAvailable Available modules

You are able to compile different SG++ modules independently. However, you should take into account the dependencies between the modules to
avoid "undefined symbol" errors: When using them, depending on the dependencies, other modules might have to be included, too. The currently available modules are (see the @ref modules page):
- SG_BASE basic functionality
- SG_DATADRIVEN operations on data
- SG_SOLVER classes for solving the systems of equations
- SG_PDE partial differential equations
- SG_FINANCE financial module
- SG_OPTIMIZATION optimization of objective functions
- SG_QUADRATURE Monte Carlo sampler for higher-dimensional integrals
- SG_MISC miscellaneous functionality

Note that you need to disable the following two packages on Windows
due to major compatibility issues in the C++ source code
- SG_PARALLEL classes for parallel computing
- SG_COMBIGRID combigrid classes

Then there are two switches for supported high-level back-ends:
- SG_PYTHON integration of SG++ in Python
- SG_JAVA corresponding JAVA bindings

For example, the command
@code{bash}
  scons SG_MISC=0 SG_QUADRATURE=0 SG_DATADRIVEN=0 SG_SOLVER=0 SG_FINANCE=0 SG_PDE=0 SG_OPTIMIZATION=0 SG_PARALLEL=0 SG_COMBIGRID=0 TARGETCPU=VCC MSVC_USE_SCRIPT="C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\bin\vcvars32.bat"
@endcode
will create the shared library sgppbase.dll and the corresponding
import library sgppbase.lib.

@subsection installationWindowsPysgpp Building the python bindings

The pything bindings are built if the <tt>SG_PYTHON=1</tt> flag is
set. After compilation, two files, pysgpp.py and _pysgpp_swig.dll are
copied to the <tt>lib/pysgpp folder</tt>, which define the python
interface. If you want to use them, you need to install the package to
your either a local or a system wide site-package location. To use
your local folder execute

@code{bash}
python setup.py install --user
@endcode
from the root directory of SG++.

Note, that in Unix the <tt>lib</tt> directory has implicitly the
structure of a valid python package and contains the full capabilities
of SG++. This is not the case for Windows since the
<tt>extensions</tt> are missing due to missing rights to create
symlinks to the corresponding subfolders of the SG++ packages, for
example <tt>base/python</tt>.

However, you can import and print contents via
@code{.py}
  import pysgpp
  dir(pysgpp)
@endcode

Note, that package specific functionality is available as an extension
to the C++ code, for example write
@code{.py}
  from pysgpp.extensions.datadriven import uq
@endcode
to use the uncertainty quantification python package.

@subsection installationWindowsJsgpp Building the jsgpp library for use with Java

For the use of SGpp with Java, you have to generate the <tt>jsgpp</tt>. It can be generated with
@code{bash}
  scons SG_JAVA=1 SG_PYTHON=1 SG_PARALLEL=0 SG_COMBIGRID=0 TARGETCPU=VCC MSVC_USE_SCRIPT="C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\bin\vcvars32.bat"
@endcode

@subsection installationWindowsSconsVisualStudio Configuration for use of Scons within Visual Studio

Create a new project by
  - File -> New -> Project from existing code; select Visual C++ as
  project type (-> Next) specify the path to SG++, give some unique name to the
  project (-> Next) Check "use external build system" and add the
  scons build command line above in the field "Build command line" (->
  Finish)
  - To make the symbols visible to the indexer add the include paths
  of every SG++ package you want to use to the VC++ directories
  available in the properties of the project -> VC++ Directories ->
  Include Directories.
  - If you want to adjust the build command, go to the properties of
  the project -> NMake -> Build Command Line.

@section installationWindowsTroubleshooting Troubleshooting
A few helpful hints for what has caused trouble before
(or might cause trouble in the future...)

- Building shared libraries for amd64 is not supported due to missing
  functionality of the bindexplib application.
- In general, amd64 architecture is causing trouble with the java and
  the python interface due to non consistent handling of the size_t
  type in swig. It does not work out of the box and no automatic
  solution is available at the moment.
- Make the variable JAVA_HOME available globally so that SCons finds the
  headers for the Java interface.
- Make sure that Python 2.7 is installed in a folder with full access (do
  not use "Program Data" or comparable system folders), otherwise
  SCons won't install.
- The Python interface on Windows does not provide enum types from
  C++. This does restrict its usability significantly but currently
  there is no solution to that issue available.
- Running boost tests automatically does not work. You can compile
  them by specifying COMPILE_BOOST_TESTS=1 but you need to set
  RUN_BOOST_TESTS=0 otherwise the build will fail.
- To run the Python unit tests one needs to make the full Python
  package available. This can be done in Unix either by installation
  of the package via the <tt>setup.py</tt> script or via setting
  the python path to <tt>lib</tt>. However, in Windows, just the first
  approach is available currently. To make sure that <tt>pysgpp</tt>
  is available in the <tt>PYTHONPATH</tt>, one needs to install it
  somewhere. Currently, SCons installs it to some temporary folder and
  adds this very folder to the Python path. To avoid conflicts with
  other installed versions of <tt>pysgpp</tt>, the temporary folder is
  added as first element to the <tt>PYTHONPATH</tt>. This is a bit
  hacky but works with current Python releases. To make the user aware
  of this problem a warning is shown if more than one <tt>pysgpp</tt>
  installations are detected.
*/
