/**
@page installation Installation and Compilation
Compilation, installation and dependecies.

@todo REWRITE COMPLETELY
things to mention:
~/sgpp/trunk$ echo $LD_LIBRARY_PATH
/home/baurms/sgpp/trunk/lib/alglib:/home/baurms/sgpp/trunk/lib/sgpp
:~/sgpp/trunk$ echo $PYTHONPATH
/home/baurms/sgpp/trunk/bin:/home/baurms/sgpp/trunk/lib/pysgpp:
has to be set
STLport????
swig >= 3.0.0
WORKING build command scons -j 4 SG_JAVA=0 SSE3_FALLBACK=1


@section overview Overview
- \ref requirements
- \ref compilation_scons
- \ref stepByStep
- \ref installInstructions
- \ref troubleshooting


@section requirements Requirements and Recommendations
Information about how to install the additional software is given \ref
installInstructions "below".
- SCons (>= 2.3.0), http://www.scons.org/ for compilation. SCons is a Makefile
  replacement that facilitates quite a few things.
- swig (>= 3.0.0), http://www.swig.org/, if you want to use SGpp within python,
  e.g.<br> It allows to wrap C/C++ functions as libraries that can be used
  from within other languages.
- doxygen, http://www.doxygen.nl/index.html, is required to create and compile the current documentation. Essentially, what can be found at http://sgpp.sparsegrids.org
- dot, in the Graphviz package, http://www.graphviz.org/, is optional
  for inheritance diagrams in the documentation generated by doxygen.
- matplotlib, http://matplotlib.sourceforge.net/, is optional for program to be able
  to generate graphs with progress information.


@section compilation_scons Compilation with SCons

Compilation of the C++ libraries is done with SCons. Execute
@verbatim
  scons -j <number of cores>
@endverbatim
in the main folder. For configuration and optimization, see below.

@todo wrong, scons --help starts building.
To obtain help on parameters for compilation, type
@verbatim
  scons --help
@endverbatim

After compilation all unit-tests (located in the <tt>tests</tt>-folder of each module) are executed.

After compilation, two files, <code>pysgpp.py</code> and
<code>_pysgpp.so</code> are copied to the <code>lib/pysgpp</code> folder and
can be used from within python but they have to be added to PYTHONPATH first:
@verbatim
export PYTHONPATH=$(pwd)/bin:$(pwd)/lib/pysgpp:$PYTHONPATH
@endverbatim
Import and print contents via
@verbatim
  import pysgpp
  dir(pysgpp)
@endverbatim

You can get help on the options that are set and available to
configure the build with the parameter @todo wrong, starts building <code>-h</code> and help on
general options for scons with <code>-H</code>.


@subsection sconsInstallation How to get and use SCons

If you do not have SCons with version >= 2.3.0 available, there should be one in your package repository,
otherwise you can download it from http://www.scons.org/download.php.


@subsection sconsConfiguration Configuration for compilation

SCons uses the file <tt>SConstruct</tt>. This file
contains all information for compiling SGpp. Several platforms are
@todo add new platforms supported: @verbatim
  all platforms that have a gcc
  Intel Core2 Platforms using icc
  general x86 / x86_64 SSE3 Platforms such as AMD Opteron or Intel Pentium4 using icc
  Intel Itanium Platforms using icc
@endverbatim
If you just execute @verbatim
  scons
@endverbatim
the default compilation with gcc is selected. For all other cases please execute:
@verbatim
  scons TARGETCPU=core2ICC
  scons TARGETCPU=opteronICC
  scons TARGETCPU=ia64ICC
@endverbatim

You are able to compile different SG++ modules independently. However, you should take into account the dependencies between the modules to
avoid "undefined symbol" errors: When using them, depending on the dependencies, other modules might have to be included, too. The currently available modules are (see the @ref modules page):
- SG_BASE basic functionality
- SG_DATADRIVEN operations on data
- SG_SOLVER classes for solving the systems of equations
- SG_PDE partial differential equations
- SG_FINANCE financial module
- SG_PARALLEL classes for parallel computing
- SG_COMBIGRID combigrid classes
- SG_OPTIMIZATION optimization of objective functions

Then there are two switches for supported high-level back-ends:
- SG_PYTHON integration of SG++ in Python
- SG_JAVA corresponding JAVA bindings

For example, the command @verbatim
  scons SG_BASE=1
@endverbatim will create the library libsgppbase.so which can be used by the linker.

Use @verbatim scons SG_ALL=1 @endverbatim to compile all modules.

Additionally, you can pass some specific flags to the compiler using CPPFLAGS environment variable:
@verbatim
  scons CPPFLAGS='-g -O0'
@endverbatim


@subsection sconsEclipse Configuration for use of Scons within Eclipse

Create a makefile project (e.g. by checking out source with Subeclipse) and change the project properties as follows:
  - Properties -> C/C++ Build -> Builder Settings: disable "Use default build command" and set 'build command' to "scons"
  - Properties -> C/C++ Build -> Behaviour: set 'Build (Incremental build)' e.g. to "-j 2" and 'Clean' to "-c"


@subsection libjsgpp Building the jsgpp Library for use with Java

For the use of SGpp with Java, you have to generate the <tt>libjsgpp</tt>. It can be generated with
@verbatim
  scons JSGPP=True JNI_CPPPATH=<jnipath> JNI_OS=linux
@endverbatim
The <tt>&lt;jnipath&gt;</tt> can be determined with the command <tt>locate jni.h</tt>. It can be located at <tt>/usr/lib/jvm/java-6-openjdk-amd64/include/jni.h</tt>.


@section stepByStep Step-by-step instructions (Linux)

- Check out the current version. Change to the <tt>trunk</tt>
directory. All further steps assume that one is in the trunk directory
at the beginning.
- SCons
 - If you already have SCons installed, check the version with
   @verbatim
  scons -v
   @endverbatim
 - If SCons is not yet installed, or if the version is < 2.3, \ref
   installSCons "install SCons".
- swig
 - Check with
   @verbatim
  swig -version
   @endverbatim
   whether swig is installed and the swig version is >= 3.0.0. \ref installSwig "Install swig", if necessary.
- @todo replace pypy psyco
 - psyco can help you to speed up the execution of Python code
   (e.g. <tt>classifier.py</tt>). \ref installPsyco "Install psyco", if desired.
- doxygen
 - Doxygen is needed to generate the documentation. Installation instructions
   for version 1.6.1 are provided @ref installDoxygen "below", older versions work as
   well.
- dot
 - Dot, contained in the Graphviz package, is only needed
   if the doxygen Documentation should contain inheritance diagrams (usage of Doxyfile),
   using only Doxyfile.fast with doxygen doesn't require this package.
   \ref installGraphviz "Install graphviz", if desired.




@section installInstructions How To Install
The following section contains installation instructions for the
required software

@todo whole section needs rework...

@subsection installSCons SCons
- To install locally proceed as follows:
  @verbatim
  cd tools/
  tar -xzf scons-1.2.0.tar.gz
  cd scons-1.2.0
  python setup.py install --prefix=$HOME
  cd ../../
  @endverbatim
  Set the path to the <tt>~/bin</tt> directory, (preferrably in your
  starting scripts, e.g. your <tt>.bash_profile</tt> or
  <tt>.bashrc</tt>), e.g.
  @verbatim
  export PATH=$HOME/bin:$PATH
  @endverbatim
  Now you can compile via
  @verbatim
  scons
  @endverbatim
- Alternatively, you can use the standalone-version (no need to
  install): Unpack
  @verbatim
  cd tools
  tar -xzf scons-local-1.2.0.tar.gz
  cd ..
  @endverbatim
  and compile via
  @verbatim
  python tools/scons.py
  @endverbatim
- SCons is platform independent

@subsection installSwig swig
- To install locally proceed as follows:
  @verbatim
  cd tools/
  tar -xzf swig-1.3.36.tar.gz
  cd swig-1.3.36
  ./configure --prefix=$HOME
  make && make install
  @endverbatim
  Set the path to the <tt>~/bin</tt> directory, (preferrably in your
  starting scripts, e.g. your <tt>.bash_profile</tt> or
  <tt>.bashrc</tt>), e.g.
  @verbatim
  export PATH=$HOME/bin:$PATH
  @endverbatim
  Now swig is installed
 - swig is platform dependent (ia64, x86_64, ...)

@subsection installSTLport STLport
- <b>NOT NEEDED ANY MORE!</b> STLport is not required, but recommended
- To install locally proceed as follows:
  @verbatim
  cd tools/
  tar -xzf STLport-5.2.1.tar.gz
  cd STLport-5.2.1
  ./configure --prefix=$HOME
  make && make check
  @endverbatim
  If there is an error, saying that 'wcsftime' has not been declared,
  this is a bug. Execute
  @verbatim
  sed -i \
          -e 's/_STLP_VENDOR_CSTD::wcsftime/::wcsftime/' \
          stlport/stl/_cwchar.h || die "sed failed"
  @endverbatim
  to overcome this, then compile again.<br>
  Continue with
  @verbatim
  make install
  @endverbatim
 - Modify the default setting in your custom.py for <tt>STLPORT</tt>
   to point to <tt>~/include/stlport'</tt>.
 - If everything worked fine, running <tt>scons</tt> should tell you
   that it found stlport

@subsection installPsyco psyco
- Psyco is not required, but recommended for 32-Bit
  architectures. It can be used <b>only</b> on 32-Bit architectures.
- To install locally proceed as follows:
  @verbatim
  cd tools/
  tar -xzf psyco-1.6-src.tar.gz
  cd psyco-1.6
  python setup.py build_ext -i
  cp -r py-support/ ../../bin/psyco/
  @endverbatim
- Now psyco can be imported in Python, but only from within the
  <tt>bin/</tt> directory. The same holds for <tt>pysgpp</tt>
  libs.<br>
  To be able to use psyco from any directory, modify the Python search
  path:
  @verbatim
  export PYTHONPATH=$PYTHONPATH:$HOME/path_to_your_bin_directory/
  @endverbatim

@subsection installDoxygen Doxygen
- To install locally proceed as follows:
  @verbatim
  cd tools/
  tar -xzf doxygen-1.6.1.src.tar.gz
  cd doxygen-1.6.1
  ./configure --prefix $HOME
  make
  @endverbatim
  Set the path to the <tt>~/bin</tt> directory, (preferrably in your
  starting scripts, e.g. your <tt>.bash_profile</tt> or
  <tt>.bashrc</tt>), e.g.
  @verbatim
  export PATH=$HOME/bin:$PATH
  @endverbatim
  Now doxygen is installed.
  If required, create user manual with (eather one)
  @verbatim
  make docs
  make pdf
  @endverbatim

@subsection installGraphviz dot (graphviz)
- To install locally proceed as follows:
  @verbatim
  cd tools/
  tar -xzf graphviz-2.20.2.tar.gz
  cd graphviz-2.20.2
  ./configure --prefix=$HOME
  make && make install
  @endverbatim
  Set the path to the <tt>~/bin</tt> directory, (preferrably in your
  starting scripts, e.g. your <tt>.bash_profile</tt> or
  <tt>.bashrc</tt>), e.g.
  @verbatim
  export PATH=$HOME/bin:$PATH
  @endverbatim
  Now dot is installed


@section troubleshooting Troubleshooting
A few helpful hints that have caused trouble before (or might cause trouble...)

- If there is an error like
  @verbatim
  build_pyclass/pyclass_wrap.cc:145:20: error: Python.h: No such file or directory
  @endverbatim
  this indicates that the package <tt>python-dev</tt> is missing. Just install it.

*/
