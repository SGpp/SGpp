/**
@page installation Installation and Compilation
Compilation, installation and dependecies.

@todo REWRITE COMPLETELY
<!---
things to mention:
~/sgpp/trunk$ echo $LD_LIBRARY_PATH
/home/baurms/sgpp/trunk/lib/alglib:/home/baurms/sgpp/trunk/lib/sgpp
:~/sgpp/trunk$ echo $PYTHONPATH
/home/baurms/sgpp/trunk/bin:/home/baurms/sgpp/trunk/lib/pysgpp:
has to be set
swig >= 3.0.0
WORKING build command scons -j 4 SG_JAVA=0 SSE3_FALLBACK=1
-->

@section overview Overview
- \ref requirements
- \ref compilation_scons
- \ref troubleshooting


@section requirements Requirements and Recommendations
Information about how to install the additional software is given \ref
installInstructions "below".
- SCons (>= 2.3.0), http://www.scons.org/, is required for compilation. SCons
is a Makefile replacement that facilitates quite a few things.
- swig (>= 3.0.0), http://www.swig.org/, if you want to use SGpp within python
or java, this program creates bindings from C/C++ functions in order to make
them available as a python module or prepare them to be called from java code.
- doxygen, http://www.doxygen.nl/index.html, is required to create and compile
the documentation. Essentially, what can be found at http://sgpp.sparsegrids.org
- dot, in the Graphviz package, http://www.graphviz.org/, is optional
  for inheritance diagrams in the documentation generated by doxygen.
- matplotlib, http://matplotlib.sourceforge.net/, is optional for program to be
able to generate graphs with progress information.


@section compilation_scons Compilation with SCons

Compilation of the C++ libraries is done with SCons. Execute
@verbatim
  scons -j <number of cores>
@endverbatim
in the main folder. For configuration and optimization, see below.

To obtain help on parameters for compilation, type
@verbatim
  scons --help
@endverbatim

@todo rewrite test code to prevent this, add /home/baurms/sgpp/trunk/lib/alglib:/home/baurms/sgpp/trunk/lib/sgpp

After compilation all unit-tests (located in the <tt>tests</tt>-folder of each module) are executed.
If they fail, please make sure that you have followed all the instructions below, because almost all unit tests are written in python and require those steps.

If you do not have SCons with version >= 2.3.0 available, there should be one in your package repository,
otherwise you can download it from http://www.scons.org/download.php.


@subsection sconsConfiguration Configuration for compilation

SCons uses the file <tt>SConstruct</tt>. This file contains all information for
compiling SGpp. Currently all processor with the SSE3 instruction set are
supported  but the compilation standard is AVX 1.

If you just execute
@code{bash}
  scons
@endcode
the default compilation with gcc for AVX instruction set is selected. For all other cases please execute:
@code{bash}
  scons TARGETCPU=core2ICC
  scons TARGETCPU=opteronICC
  scons TARGETCPU=ia64ICC
@endcode

You are able to compile different SG++ modules independently. However, you should take into account the dependencies between the modules to
avoid "undefined symbol" errors: When using them, depending on the dependencies, other modules might have to be included, too. The currently available modules are (see the @ref modules page):
- SG_BASE basic functionality
- SG_DATADRIVEN operations on data
- SG_SOLVER classes for solving the systems of equations
- SG_PDE partial differential equations
- SG_FINANCE financial module
- SG_PARALLEL classes for parallel computing
- SG_COMBIGRID combigrid classes
- SG_OPTIMIZATION optimization of objective functions

Then there are two switches for supported high-level back-ends:
- SG_PYTHON integration of SG++ in Python
- SG_JAVA corresponding JAVA bindings

For example, the command
@code{bash}
  scons SG_BASE=1
@endcode
will create the library libsgppbase.so which can be used by the linker.

Use
@code{bash}
scons SG_ALL=1
@endcode
to compile all modules (the ddefault).

Additionally, you can pass some specific flags to the compiler using CPPFLAGS environment variable:
@code{bash}
  scons CPPFLAGS='-g -O0'
@endcode


@subsection pysgpp Building the python bindings

The pything bindings are built by default, because the unit tests are written in python.
After compilation, two files, pysgpp.py and _pysgpp.so are copied to the
lib/pysgpp folder and can be used from within python but they have to be added
to PYTHONPATH first:
@code{bash}
export PYTHONPATH=$(pwd)/bin:$(pwd)/lib/pysgpp:$PYTHONPATH
@endcode
Import and print contents via
@code{.py}
  import pysgpp
  dir(pysgpp)
@endcode


@subsection libjsgpp Building the jsgpp library for use with Java

For the use of SGpp with Java, you have to generate the <tt>libjsgpp</tt>. It can be generated with
@code{bash}
  scons JSGPP=True JNI_CPPPATH=<jnipath> JNI_OS=linux
@endcode
The <tt>&lt;jnipath&gt;</tt> can be determined with the command <tt>locate jni.h</tt>.


@subsection sconsEclipse Configuration for use of Scons within Eclipse

Create a makefile project (e.g. by checking out source with Subeclipse) and change the project properties as follows:
  - Properties -> C/C++ Build -> Builder Settings: disable "Use default build command" and set 'build command' to "scons"
  - Properties -> C/C++ Build -> Behaviour: set 'Build (Incremental build)' e.g. to "-j 2" and 'Clean' to "-c"

@section troubleshooting Troubleshooting
A few helpful hints that have caused trouble before (or might cause trouble...)

- If there is an error like
  @verbatim
  build_pyclass/pyclass_wrap.cc:145:20: error: Python.h: No such file or directory
  @endverbatim
  this indicates that the package <tt>python-dev</tt> is missing. Just install it.

*/
