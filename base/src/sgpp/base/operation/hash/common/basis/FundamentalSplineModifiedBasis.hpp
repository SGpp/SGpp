// Copyright (C) 2008-today The SG++ project
// This file is part of the SG++ project. For conditions of distribution and
// use, please see the copyright notice provided with SG++ or at
// sgpp.sparsegrids.org

#ifndef FUNDAMENTAL_SPLINE_MODIFIED_BASE_HPP
#define FUNDAMENTAL_SPLINE_MODIFIED_BASE_HPP

#include <cmath>
#include <stdexcept>
#include <sgpp/base/operation/hash/common/basis/Basis.hpp>
#include <sgpp/base/operation/hash/common/basis/FundamentalSplineBasis.hpp>
#include <sgpp/base/operation/hash/common/basis/BsplineBasis.hpp>
#include <sgpp/base/operation/hash/common/basis/BsplineModifiedBasis.hpp>

#include <sgpp/globaldef.hpp>

namespace SGPP {
  namespace base {

    /**
     * Modified fundamental spline basis on Noboundary grids.
     */
    template <class LT, class IT>
    class FundamentalSplineModifiedBasis: public Basis<LT, IT> {
      public:
        /**
         * Default constructor.
         */
        FundamentalSplineModifiedBasis() :
          fundamentalSplineBasis(FundamentalSplineBasis<LT, IT>()),
          bsplineBasis(BsplineBasis<LT, IT>()) {
        }

        /**
         * Constructor.
         *
         * @param degree    fundamental spline degree, must be odd
         *                  (if it's even, degree - 1 is used)
         */
        FundamentalSplineModifiedBasis(size_t degree) :
          fundamentalSplineBasis(FundamentalSplineBasis<LT, IT>(degree)),
          bsplineBasis(BsplineBasis<LT, IT>(degree)) {
          switch (bsplineBasis.getDegree()) {
            case 1:
              coefficients = {2.0, 1.0};
              break;
            case 3:
              coefficients = {
                3.53589838486224541294510731698825526611438949237924,
                2.26794919243112270647255365849412763305719474618962,
                1.00000000000000000000000000000000000000000000000000,
                -0.267949192431122706472553658494127633057194746189619,
                0.0717967697244908258902146339765105322287789847584775,
                -0.0192378864668405970883048774119144958579211928442906,
                0.00515477614287156246300487567114745120290578661868483,
                -0.00138121810464565276371462527267530895370195363044874,
                0.000370096275711048591853625419553784611902027903110116,
                -0.0000991669981985416036998764055398294939061579819917295,
                0.0000265717170831178229458802026055333637226040248568017,
                -7.11987013392968808364440488230396098425811743547731e-6,
                1.90776345260092938869741692368248021442844488510751e-6,
                -5.11183676474029471145262812425959873455662104952738e-7,
                1.36971253295188495883634326021359279394203534703442e-7,
                -3.67013367067245123892744916594772441211520338610312e-8,
                9.83409353170955367346364061654969709040460074068231e-9,
                -2.63503742011370230458007080672154424046636910169807e-9,
                7.06056148745255544856642610336479871460875666109964e-10,
                -1.89187174867319874846499634624375245377133562741787e-10
              };
              break;
            case 5:
              coefficients = {
                3.29614127641663205038661812185611190362438253536493,
                3.74949853288263904905412478491066631437633920071653,
                2.08968505899952481756148379018284966952706337962780,
                1.16734292918523642556448116039749684568761727940339,
                -0.591713846555234094254927271375340206589915217837980,
                0.258616617340198057719649139859295833875068152124185,
                -0.111519396015371162123671686087005703222480222038188,
                0.0480246331974284307822485029099717736801661171807219,
                -0.0206785304085579066320801588832411771624811295692268,
                0.00890367865168129830149763730898599324296325574094271,
                -0.00383370509665995633643747331197854405512892235612389,
                0.00165069892727031850036587177266542394212035397617697,
                -0.000710750264627012011497838649111762011183847571708249,
                0.000306031541938857720672936683443984301225399955013031,
                -0.000131769637395832651714195705489777533726740122071647,
                0.0000567367573590331787332003396716403446785290312402889,
                -0.0000244294489931963599248073895691615563534580141493434,
                0.0000105187184797067855499213697601692920768355248736626,
                -4.52910086044666460968102817261030258450940303442300e-6,
                1.95011917503761286868811744325471063747917387590983e-6,
                -8.39673240678134720091418327582543641103553067620667e-7,
                3.61542597055547690746487990033807715475857969424091e-7,
                -1.55671329218618409585103472443294279486922481294867e-7,
                6.70282366118209136332420151857660764665644139040534e-8,
                -2.88607062446339611647326268689525032625451334498881e-8,
                1.24267086088336489552775898240475892170486962720061e-8,
                -5.35063437255878084405288446099581295903957559006575e-9,
                2.30385125216954754686035100574925696942406718234525e-9,
                -9.91981552569612183363460280041842289134727418906782e-10,
                4.27122801314431664764207063480487253494747926493350e-10,
                -1.83908548430274556197246856215945753957607591890216e-10
              };
              break;
            case 7:
              coefficients = {
                3.52324984276034191892196418829825656900915348195007,
                3.00731998087822570964485933688354046386203077303936,
                4.21687138022114600681651982768147304227833913548471,
                1.68823661287785026165087279238579533415106532298012,
                1.59498706660474475641313056011035639829160344934069,
                -1.18727178181275949685041826402045194357031710161846,
                0.676645707508128457636517636973804067525805469977004,
                -0.367237223977593815474131605261830094544448677290588,
                0.197192842943026909454060863619479082279757984594109,
                -0.105629201938008837001560253478772750374410178924168,
                0.0565505260280712864472556457778838760376001556394942,
                -0.0302715274014639356644184107855757735727509999550328,
                0.0162038956302005562910940011705816551396030620652445,
                -0.00867364531785788533350323007381088155188890172184908,
                0.00464283469608363461400810501917806859351529794348165,
                -0.00248521881283688110852240676443316919431930349717736,
                0.00133028902820632407283784654644811923045604822030920,
                -0.000712077687956102998451567243546434033329649902588527,
                0.000381161252042005700088105122043290212187100972870600,
                -0.000204028159253840928276199587700791784307969386274273,
                0.000109212280987094506002680471813227178200923647454645,
                -0.0000584591968159030324325142680716036821486980542573429,
                0.0000312920640557368944244964497171455628624210324735686,
                -0.0000167500295282776414584390435397209561536013159781639,
                8.96596302175111625528874513880010801236858866037921e-6,
                -4.79930454878806813813483407851821885776345318174557e-6,
                2.56897380639860643977390473593699780079787794808571e-6,
                -1.37512140579381453804827831650711678464133036517687e-6,
                7.36075578490717068125305918346926601937685142900727e-7,
                -3.94006852753248510914062866535134186727458605872239e-7,
                2.10904157878507647259411696642445361939346756236977e-7,
                -1.12892868485967582453887553868724051923152065640914e-7,
                6.04293432770143656632058057060887429350136643727238e-8,
                -3.23466449020660940828369570075568126669798040093021e-8,
                1.73145260179973492575577565091838663670536851782271e-8,
                -9.26812694594975818860564392026641418655073504554277e-9,
                4.96104698430406334445756990399229588598249742935880e-9,
                -2.65555136695964943711954049175856684321872688527522e-9,
                1.42146467970823140255584748260422962929242737313190e-9,
                -7.60882226116143101589775330649160972838331880418876e-10,
                4.07285365780801953722274252920757283643060995676411e-10,
                -2.18011886052232565108028393514921615063819503676764e-10,
                1.16697496284783036504908166939816179166245086190261e-10
              };
              break;
            case 9:
              coefficients = {
                3.05377637451062495755599202674657379380278754672717,
                3.91075638453945893962907504800964964358685362453339,
                2.34195840722356167488650093681902485059156138750868,
                5.18705260021061571852036274424666187020783688288010,
                0.743617641633863898716977216404537734423608526346804,
                2.60495829619996884121690657865132883144118224671604,
                -2.37532732509512774644518057581904678296621258808692,
                1.61145386499104128056983361782781716157142976010358,
                -1.01383204964222116010949380271989589792034039154173,
                0.623295491843190714381581478979126193804754693188025,
                -0.380352351735885028260567065463096606717122232169386,
                0.231533761035011872474543095768922730990599298310758,
                -0.140828519262414311585774769119907665316186654111268,
                0.0856347905654300028070858679678974774443635090567510,
                -0.0520680327829706296108774960690774897175689986753483,
                0.0316576927633906702432586208726189908122546670526625,
                -0.0192478883152807525868789770730113771636978952919352,
                0.0117026847604503560631039535147768315360116638943059,
                -0.00711520559728326465184461370965240283433084812608357,
                0.00432602719656056535813199047283133089533570973936768,
                -0.00263021339633208847696998427567360201703823367115182,
                0.00159916290926835750910837532149780525460604474155351,
                -0.000972286880013751093793703797183537022132809806492918,
                0.000591147885846995768374221394473206346330645153337275,
                -0.000359416371464904675214166888198229310073939945070832,
                0.000218524215527049243772904756163743992801698454513268,
                -0.000132862152521044159175144295753274680348389086263620,
                0.0000807798418542321678056291082206876073273860666372162,
                -0.0000491139329452540537298054413047473827164811246083202,
                0.0000298611430026034489262586090469461697160816206266890,
                -0.0000181554969831912320689049824149799256053005273803643,
                0.0000110384947648426324741052439172599062451723806407444,
                -6.71137599737657078196567450742140609840866080261375e-6,
                4.08049908413407942026372746548764485092862332171927e-6,
                -2.48093278965851770559848258936097865177628182144183e-6,
                1.50840065881521999234436732289171625456622176566066e-6,
                -9.17103662379889995391584139946890097959800148020642e-7,
                5.57596632323958198941248373100618415649717444718908e-7,
                -3.39017296662184801239752163224778871618893535658009e-7,
                2.06121631253613839547525943104614047536896056836410e-7,
                -1.25321413653375433838772716039550666555620004282851e-7,
                7.61950923081736362055856346345413064317372107164879e-8,
                -4.63264171908320110475918131628275806159012780045072e-8,
                2.81663407015624056579196421577247267788533616491883e-8,
                -1.71250616089839420063844688012059013993669906465181e-8,
                1.04119927476141025378274653345317940234410570314122e-8,
                -6.33046440659204071079730621584681084826628686369742e-9,
                3.84890583143287463241508039024470604374700524893806e-9,
                -2.34012469666708664943075413963399009313760007171874e-9,
                1.42278970590261103504242457179645337553003580643756e-9,
                -8.65052426524784420110592083990471937645036238881960e-10,
                5.25949616821053410520423740169975217269987386485278e-10,
                -3.19775993861439617681233982802874173654702920580425e-10,
                1.94422969386557791404203682676326083507018471909146e-10,
                -1.18208657781438793541165406846624070327762875614380e-10
              };
              break;
            case 11:
              coefficients = {
                3.94263878785873251848616276662647087514032921859620,
                2.35559997986825349222443854664572313363526617864544,
                4.96669092612946032186699507030291386802568963633752,
                0.773838927091517430884443204725426581282659457143287,
                7.27503485250576823815429057487313494368525138711245,
                -1.43070113332064209015627616123444315469975676945038,
                4.91252622441035507312427600579089598403593028556553,
                -4.85916525451612218639200323517779317355138281020375,
                3.70080945398189358750491140942390494088074735820630,
                -2.58438022433999616673788111269037944540121566758074,
                1.74669458482913317308736276660868029593111318370076,
                -1.16533551351841248122640310419801703992919942427431,
                0.773405047237137420255493433619466841498296252352592,
                -0.512191144510760064318418975257720900992007376346859,
                0.338902767636124931570020659780763558346499243844984,
                -0.224161555649964289839249727979187195310979081230789,
                0.148245851223351209663653310782503158899684594215464,
                -0.0980341484505815063702348475060139847983843739989246,
                0.0648277983558946135907674518720524166340967222100771,
                -0.0428687343110822851429014457416203025552619749613738,
                0.0283477240475371886210357009165111150191181695759194,
                -0.0187454110780662710638330341033771623054011908073796,
                0.0123957105631598382350793309082842646385027548855827,
                -0.00819686450180447204499803237979729555501929057465646,
                0.00542030883088849179748672046337503068695766328176011,
                -0.00358426643924870606206559699034450510995502036111250,
                0.00237015381258363047500620208837756467887652176817542,
                -0.00156730230370266649038585465965043924428819978642102,
                0.00103640383569760565692353876926197317657031917814302,
                -0.000685338690919207565730775477816954370523223490521660,
                0.000453191222198561194688506310184349327394040687971043,
                -0.000299679978014960791277212755925642702906247860545174,
                0.000198168201004201482306001308000961320282935350421539,
                -0.000131041907262986679222979992834402350390500256401690,
                0.0000866535668780862284483421131677051411339656870931043,
                -0.0000573010635259810761373735536524181692969643478323357,
                0.0000378912490217335568018846413563986251718875516902029,
                -0.0000250561972863614562171009631993329051708779500308593,
                0.0000165688130811591845832202352089223817397978486752911,
                -0.0000109563938925307519964025178456554175269631691211739,
                7.24509151864225055401521526042035618357365747244728e-6,
                -4.79093318735872979692744580332249336738972850626986e-6,
                3.16808155517080557467378141053658282773634263491067e-6,
                -2.09494483594473317821481572993640760078422896358817e-6,
                1.38531593622907060941621417645187502713189297305830e-6,
                -9.16062423335739042411294131131489729788981732187232e-7,
                6.05760997546904990162864726750355723020327985424329e-7,
                -4.00569193541229509627176798516714561351672671327784e-7,
                2.64882815935746421549979265961013282310607264873698e-7,
                -1.75158018413187925855260754331736429496497691931540e-7,
                1.15826054272531286393971450282228645490234838189305e-7,
                -7.65918395850799114643597117070870622798897944861860e-8,
                5.06475846723014727698539269574704506767758615542471e-8,
                -3.34915292155699007636003256202283663520152249575339e-8,
                2.21468118658540154142147490400798505564238649011554e-8,
                -1.46449352212174303313574931471110778618659179274417e-8,
                9.68419874304036176286411915090805805174170787414212e-9,
                -6.40383203326373630480267327262765410785067649442613e-9,
                4.23463683453690988287755428367777965586077036620578e-9,
                -2.80022165279647336715593840752180802687696324107134e-9,
                1.85169156439544197748306049100847718243362521347266e-9,
                -1.22446080160442557211662985359203345247585132868938e-9,
                8.09694380800000930728476334711620734456175056540463e-10,
                -5.35423420202631140635871276887025523480809197749861e-10,
                3.54057340274780115091686147549095549169057432289460e-10,
                -2.34126105568953620893054572601085965800831694526056e-10,
                1.54819649456620372841975589303463612015781990345919e-10,
                -1.02376980984769122095145629826434482656772623528460e-10
              };
              break;
            default:
              throw std::invalid_argument("Degree is unsupported.");
          }
        }

        /**
         * @param l     level of basis function
         * @param i     index of basis function
         * @param x     evaluation point
         * @return      value of modified fundamental spline basis function
         */
        inline float_t eval(LT l, IT i, float_t x) {
          if (l == 1) {
            return 1.0;
          }

          const IT hInv = static_cast<IT>(1) << l;

          if ((i != 1) && (i != hInv - 1)) {
            return fundamentalSplineBasis.eval(l, i, x);
          }

          if (i == hInv - 1) {
            // mirror the situation at x = 0.5
            x = 1.0 - x;
            i = 1;
          }

          const size_t p = bsplineBasis.getDegree();
          const float_t t = x * hInv + static_cast<float_t>(p);

          /*float_t y = 0.0;

          for (size_t k = 0; k < coefficients.size(); k++) {
            y += coefficients[k] * bsplineBasis.uniformBSpline(
                   t - static_cast<float_t>(k), p);
          }*/

          const int kMin = std::max(static_cast<int>(std::floor(t)) -
                                    static_cast<int>(p + 1) + 1,
                                    0);
          const int kMax = std::min(static_cast<int>(std::floor(t)),
                                    static_cast<int>(coefficients.size()) - 1);

          float_t y = 0;

          for (int k = kMin; k <= kMax; k++) {
            y += coefficients[k] * bsplineBasis.uniformBSpline(
                   t - static_cast<float_t>(k), p);
          }

          return y;
        }

        /**
         * @param l     level of basis function
         * @param i     index of basis function
         * @param x     evaluation point
         * @return      value of derivative of modified
         *              fundamental spline basis function
         */
        inline float_t evalDx(LT l, IT i, float_t x) {
          if (l == 1) {
            return 0.0;
          }

          const IT hInv = static_cast<IT>(1) << l;

          if ((i != 1) && (i != hInv - 1)) {
            return fundamentalSplineBasis.evalDx(l, i, x);
          }

          const float_t hInvDbl = static_cast<float_t>(hInv);
          // inner derivative
          float_t dxFactor = hInvDbl;

          if (i == hInv - 1) {
            // mirror the situation at x = 0.5
            x = 1.0 - x;
            i = 1;
            dxFactor *= -1.0;
          }

          const size_t p = bsplineBasis.getDegree();
          const float_t t = x * hInv + static_cast<float_t>(p);

          /*float_t y = 0.0;

          for (size_t k = 0; k < coefficients.size(); k++) {
            y += coefficients[k] * bsplineBasis.uniformBSplineDx(
                   t - static_cast<float_t>(k), p);
          }*/

          const int kMin = std::max(static_cast<int>(std::floor(t)) -
                                    static_cast<int>(p + 1) + 1,
                                    0);
          const int kMax = std::min(static_cast<int>(std::floor(t)),
                                    static_cast<int>(coefficients.size()) - 1);

          float_t y = 0;

          for (int k = kMin; k <= kMax; k++) {
            y += coefficients[k] * bsplineBasis.uniformBSplineDx(
                   t - static_cast<float_t>(k), p);
          }

          return dxFactor * y;
        }

        /**
         * @param l     level of basis function
         * @param i     index of basis function
         * @param x     evaluation point
         * @return      value of 2nd derivative of modified
         *              fundamental spline basis function
         */
        inline float_t evalDxDx(LT l, IT i, float_t x) {
          if (l == 1) {
            return 0.0;
          }

          const IT hInv = static_cast<IT>(1) << l;

          if ((i != 1) && (i != hInv - 1)) {
            return fundamentalSplineBasis.evalDxDx(l, i, x);
          }

          const float_t hInvDbl = static_cast<float_t>(hInv);
          // inner derivative
          const float_t dxFactor = hInvDbl * hInvDbl;

          if (i == hInv - 1) {
            // mirror the situation at x = 0.5
            x = 1.0 - x;
            i = 1;
          }

          const size_t p = bsplineBasis.getDegree();
          const float_t t = x * hInv + static_cast<float_t>(p);

          /*float_t y = 0.0;

          for (size_t k = 0; k < coefficients.size(); k++) {
            y += coefficients[k] * bsplineBasis.uniformBSplineDxDx(
                   t - static_cast<float_t>(k), p);
          }*/

          const int kMin = std::max(static_cast<int>(std::floor(t)) -
                                    static_cast<int>(p + 1) + 1,
                                    0);
          const int kMax = std::min(static_cast<int>(std::floor(t)),
                                    static_cast<int>(coefficients.size()) - 1);

          float_t y = 0;

          for (int k = kMin; k <= kMax; k++) {
            y += coefficients[k] * bsplineBasis.uniformBSplineDxDx(
                   t - static_cast<float_t>(k), p);
          }

          return dxFactor * y;
        }

        /**
         * @return      B-spline degree
         */
        inline size_t getDegree() const {
          return bsplineBasis.getDegree();
        }

      protected:
        /// fundamental spline basis for fundamental spline evaluation
        FundamentalSplineBasis<LT, IT> fundamentalSplineBasis;
        /// B-spline basis
        BsplineBasis<LT, IT> bsplineBasis;
        /// B-spline coefficients
        std::vector<float_t> coefficients;
    };

    // default type-def (unsigned int for level and index)
    typedef FundamentalSplineModifiedBasis<unsigned int, unsigned int>
    SFundamentalSplineModifiedBase;
  }
}

#endif /* FUNDAMENTAL_SPLINE_MODIFIED_BASE_HPP */
