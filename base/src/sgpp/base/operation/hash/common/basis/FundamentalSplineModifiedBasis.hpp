// Copyright (C) 2008-today The SG++ project
// This file is part of the SG++ project. For conditions of distribution and
// use, please see the copyright notice provided with SG++ or at
// sgpp.sparsegrids.org

#ifndef FUNDAMENTAL_SPLINE_MODIFIED_BASE_HPP
#define FUNDAMENTAL_SPLINE_MODIFIED_BASE_HPP

#include <cmath>
#include <stdexcept>
#include <sgpp/base/operation/hash/common/basis/Basis.hpp>
#include <sgpp/base/operation/hash/common/basis/FundamentalSplineBasis.hpp>
#include <sgpp/base/operation/hash/common/basis/BsplineBasis.hpp>
#include <sgpp/base/operation/hash/common/basis/BsplineModifiedBasis.hpp>

#include <sgpp/globaldef.hpp>

namespace SGPP {
  namespace base {

    /**
     * Modified fundamental spline basis on Noboundary grids.
     */
    template <class LT, class IT>
    class FundamentalSplineModifiedBasis: public Basis<LT, IT> {
      public:
        /**
         * Default constructor.
         */
        FundamentalSplineModifiedBasis() :
          fundamentalSplineBasis(FundamentalSplineBasis<LT, IT>()),
          bsplineBasis(BsplineBasis<LT, IT>()) {
        }

        /**
         * Constructor.
         *
         * @param degree    fundamental spline degree, must be odd
         *                  (if it's even, degree - 1 is used)
         */
        FundamentalSplineModifiedBasis(size_t degree) :
          fundamentalSplineBasis(FundamentalSplineBasis<LT, IT>(degree)),
          bsplineBasis(BsplineBasis<LT, IT>(degree)) {
          switch (bsplineBasis.getDegree()) {
            case 1:
              coefficients = {2.0, 1.0};
              break;
            case 3:
              coefficients = {
                3.00555349946513493861893414652544692341882276651165,
                1.97927405783630982421797926824314890523339387055456,
                1.07735026918962576450914878050195745564760175127013,
                -0.288675134594812882254574390250978727823800875635063,
                0.0773502691896257645091487805019574556476017512701269,
                -0.0207259421636901757820207317568510947666061294454441,
                0.00555349946513493861893414652544692341882276651164939,
                -0.00148805569684957869371585434493659890868493660115349,
                0.000398723322263376155929270854299472215916979892964559,
                -0.000106837592203925930001229072261289954982982970704751,
                0.0000286270465523275640756454347456876040149519898544429,
                -7.67059400538432630135266672146046107682498871302102e-6,
                2.05532946920974112976523214015424029234796499764118e-6,
                -5.50723871454638217708261839156500092566871277543714e-7,
                1.47566016608811741067815216471760077919520112533672e-7,
                -3.95401949806087465629990267305402191112091725909756e-8,
                1.05947633136232451841808904504007985253165778302300e-8,
                -2.83885827388423417372453507106297499005713872994443e-9,
                7.60669781913691510717249833851101434911977089547696e-10,
                -2.03820853770531869144464264341430749590769628246357e-10
              };
              break;
            case 5:
              coefficients = {
                3.97761884901317617637106576831899284511680074038449,
                3.05197891743048945877056526416880245358706103358005,
                1.87929705844552801199987874316442118526623911459226,
                1.27994107042222445724864640519194208005870751957726,
                -0.641144390588586784862566220550148947478564685563670,
                0.279941070422224457248646405191942080058707519577263,
                -0.120702941554471988000121256835578814733760885407741,
                0.0519789174304894587705652641688024535870610335800485,
                -0.0223811509868238236289342316810071548831992596155107,
                0.00963678523916236624948886109833119323622803474408986,
                -0.00414936272610310301162670916342378038060375639614731,
                0.00178661332089446141775436529654310968076708961312994,
                -0.000769271651848896952026849799755215838826051526481770,
                0.000331229408555179233715562372477469538319056777689828,
                -0.000142619217560355092819323447267033953116649017369985,
                0.0000614083191042623230190225425223953806853771994869933,
                -0.0000264409083131473969970104706170311495903967336965966,
                0.0000113848032745721822536316860301280068292375838997344,
                -4.90201562161384246699543437451824929715092670955683e-6,
                2.11068707776587430543970926944053966118143369052815e-6,
                -9.08809821128470717147138453546605548536560819477865e-7,
                3.91311104180256375054395716482601520662468280309906e-7,
                -1.68488914506487894140157325407455227377510446693505e-7,
                7.25471728461288344398636955133401488615127294736478e-8,
                -3.12370241293437164532227814558328521712559531232463e-8,
                1.34498925068624273424831580824387227456179696648585e-8,
                -5.79119213459962628815729199782719110499482477340294e-9,
                2.49354456347787223212978084086527511022149795856988e-9,
                -1.07365881592873746833235869347647915091177004129853e-9,
                4.62291017335463005682224394348546633334630251767781e-10,
                -1.99051115250416985019170348284550267287685969673049e-10
              };
              break;
            case 7:
              coefficients = {
                5.06003721850377349345139015980428869058543905803265,
                3.88785755194314704557965538354105366574299178455620,
                3.20935649934398180232231413057697481649262273778069,
                1.61007361929297810685939629324454325002529659304646,
                1.71874967591151069046181338643476702944403549748391,
                -1.26361676723932995609724305675805438484054179752210,
                0.718749675911510690461813386434767029444035497483908,
                -0.389926380707021893140603706755456749974703406953536,
                0.209356499343981802322314130576974816492622737780687,
                -0.112142448056852954420344616458946334257008215443801,
                0.0600372185037734934513901598042886905854390580326538,
                -0.0321379198798630791086690175457153449043970673782695,
                0.0172029431948665925216970504353909910082711208656735,
                -0.00920841644274973364412600233785672331963199641589528,
                0.00492908727719749801163912002916460361869440337404563,
                -0.00263844422549356498437413412574999140342018597705984,
                0.00141230759404845671883066574768200586759531590439716,
                -0.000755980621329359331108386729129387810104666714898928,
                0.000404661633145482764822825190609677052242114780840708,
                -0.000216607453376532486513532273442489994933851071119562,
                0.000115945730964417421435477945139755870284879484988039,
                -0.0000620634808205368718032374627347095582778881122923592,
                0.0000332213667504532136191752354908953688452805813814515,
                -0.0000177827475058425147736240735448174534702450392649114,
                9.51875674567331616570828381988375160645871757254948e-6,
                -5.09520421147071651409443880080477019803434902855043e-6,
                2.72736310531189592384042426299867291632568333188817e-6,
                -1.45990409794966603710721293565094539837385107490862e-6,
                7.81458094471983068231958196669687203752035189561623e-7,
                -4.18299225458326816502769727631694275729898810504182e-7,
                2.23907389605149598775682660159164703912461046522192e-7,
                -1.19853243966350398760043162476176637893880834930944e-7,
                6.41550960626586448217089872667195708226548511381974e-8,
                -3.43409674582067933720039627855340771732844934513047e-8,
                1.83820478549953965117131116123010867230243647333769e-8,
                -9.83955049474267796550993464122206306856478679087444e-9,
                5.26691882766916694654331886540672533240363540310949e-9,
                -2.81927857904462275005939343184139549750997742919480e-9,
                1.50910465232617571448715306083736531045837871906982e-9,
                -8.07794188414064377616441795149417736783668652374165e-10,
                4.32396421169139519654527924376176254236937875540565e-10,
                -2.31453342598255117273719769742155352014508771168309e-10,
                1.23892444935269592011589016284625127756108595481288e-10
              };
              break;
            case 9:
              coefficients = {
                5.85429006426253904622996278776484495522807473882418,
                5.23955799963023984777895619451721081847063740048256,
                3.60647184496414509525518061398121385741522820567080,
                3.64485720010123537027258011300675394600105106740030,
                0.951245248385748184500461585546016723689494398427235,
                2.66621344286034467276719484002890537362508759012517,
                -2.45213896269997369405333891739688867060429035742839,
                1.66621344286034467276719484002890537362508759012517,
                -1.04875475161425181549953841445398327631050560157277,
                0.644857200101235370272580113006753946001051067400303,
                -0.393528155035854904744819386018786142584771794329203,
                0.239557999630239847778956194517210818470637400482556,
                -0.145709935737460953770037212235155044771925261175822,
                0.0886032238370435627716259750297865126240229125383097,
                -0.0538729423756045223886113624332619337528578460927895,
                0.0327550952585186420105278146741587850550782548292943,
                -0.0199151106410279634192366947419774530241429045412207,
                0.0121083550950996852384635521176791555938123501558008,
                -0.00736185228371324043544258947241559175065851194260661,
                0.00447598777469585731019453571618251894050892317920686,
                -0.00272138904372863044863550567447361858947804957033950,
                0.00165459746633660256396542539629245796831156166154058,
                -0.00100599094628265864956370577572325816418349597291893,
                0.000611639870203725106883401189219149499328148514609981,
                -0.000371875444464960423350382591277230010432845190441682,
                0.000226099299385021950536559500758211324099175199139467,
                -0.000137467783729924801871259158915289486207880756975917,
                0.0000835800536048059824472643109856105525137513460603984,
                -0.0000508164543787425851215500511122667279880738240213139,
                0.0000308962715891722067811357457447561429822025806449930,
                -0.0000187848524612796747839699757036296788931476660212123,
                0.0000114211412523795449845312487064616605874168744488638,
                -6.94402406277359239809744905221043916136764331087387e-6,
                4.22194850049060707283991747745459687403801633290120e-6,
                -2.56693366550271380146438569309162849046927407817958e-6,
                1.56068896679470663091505980000585321442668605181139e-6,
                -9.48894817115462949712655971965342842181598726350144e-7,
                5.76925571401842360086806275654587003154398670457030e-7,
                -3.50769241156937798543127622802282924935701971571726e-7,
                2.13266782824078267361768453561752523080690736618145e-7,
                -1.29665647153431912309428296122639661857486823491115e-7,
                7.88363749341468562450832292713152286172726819182756e-8,
                -4.79323101314801807596789607302230342241022560739690e-8,
                2.91427194167608197593770670813581577940828132629246e-8,
                -1.77186973186643950186215364432943447732587180999963e-8,
                1.07729217092170822776273798259445031625084122062944e-8,
                -6.54990827292199557453854290551654422878480014478652e-9,
                3.98232712923055609496721660425368853903308634822412e-9,
                -2.42124449738756669919376332847141942489961535899810e-9,
                1.47211033295054211371441748348052314349156681149706e-9,
                -8.95039239002086022952234342714889655950217479031758e-10,
                5.44181520516741956427602724865355234070187317530041e-10,
                -3.30860943707992073113485087902002909384767048781395e-10,
                2.01162589952326843261687729060380462322952627806573e-10,
                -1.22306329489413553615640586810038145034323587079470e-10
              };
              break;
            case 11:
              coefficients = {
                7.34190060234226537190956546017600818332259348325201,
                5.48329421146597086430108359435845875793676252480121,
                5.78016312923586507179892264779372980955750039521210,
                2.82469874994136682213776447329435924818391241015196,
                4.76083179372096888297799577888918268700380783447003,
                -0.602333734336969996352195531423198020672746156819735,
                4.71542054636407675573682157572253827243846370819480,
                -4.83570707256018360876771626903794109494431551973267,
                3.71542054636407675573682157572253827243846370819480,
                -2.60233373433696999635219553142319802067274615681973,
                1.76083179372096888297799577888918268700380783447003,
                -1.17530125005863317786223552670564075181608758984804,
                0.780163129235865071798922647793729809557500395212103,
                -0.516705788534029135698916405641541242063237475198790,
                0.341900602342265371909565460176008183322593483252013,
                -0.226147311749564814328839334829011134504947954624290,
                0.149559886974905572860959633582324456999498462783534,
                -0.0989033268263150000936991310495617011852905307261093,
                0.0654026248735288195624336488636347990544903971347656,
                -0.0432488661862116829553733751786939764149527523479880,
                0.0285990974217789632065150494691117262111059492626474,
                -0.0189116371392656857987475327797059719969909455442141,
                0.0125056305923137878827695922233476605408629593839998,
                -0.00826955098947569719130697865858665278072124072689191,
                0.00546837396664242382426825836984141168607765768674324,
                -0.00361605029018361179897960511374394877494833311069751,
                0.00239117139680457928901490424086614918093218057008710,
                -0.00158120051955858022550392449782024189307689292384587,
                0.00104559425441389225899350585428314931488095785905798,
                -0.000691416003016789094595687678103610719440642996568957,
                0.000457209942490110275621802223457414494186532015510960,
                -0.000302337421387240286676458561830814124644111956155775,
                0.000199925478137152070404818016032927656739370586846078,
                -0.000132203935004889887256219247147228764529751482778038,
                0.0000874219763949901682062453581781326820147743021747294,
                -0.0000578091866665469343479759936984548322362373333317959,
                0.0000382272536134176309766739618661636223653453416820627,
                -0.0000252783857218382307497426043664447869515570836555991,
                0.0000167157387544424561281684495186768726211976263091451,
                -0.0000110535508549234672998236262500029856310184599727154,
                7.30933812123004313342556886932914856972855390487143e-6,
                -4.83341728569219402735772110976161106980474451911816e-6,
                3.19617484786656958868198528455688460950239321547438e-6,
                -2.11352197716813928012004774281908873663428552366081e-6,
                1.39760036937728628620654489286950929885159689029018e-6,
                -9.24185702152333537168898397963195142429229273591341e-7,
                6.11132646196539054275777849629042569383964514819384e-7,
                -4.04121282527288970003908461485663855841304543964623e-7,
                2.67231691855943558318628088523952405125498336662919e-7,
                -1.76711250359272282541350215174089182826094744123481e-7,
                1.16853153855609526914065263081814529914127332306717e-7,
                -7.72710256887516431666832013433835938736098771449883e-8,
                5.10967073971284856555959487955018720999516008005524e-8,
                -3.37885188342702459817883172291006826853860322358008e-8,
                2.23432010235163208243526635757816566953094440216761e-8,
                -1.47748007074795096321858342774518982434029826483579e-8,
                9.77007438262676931035595264933175830415804244035483e-9,
                -6.46061867986737633903792932396622650586142521257318e-9,
                4.27218791710255418629032071950393397729123957318505e-9,
                -2.82505290954762389090968238601106231615459000904452e-9,
                1.86811163193314011357392267993917234906143267213955e-9,
                -1.23531883511616378506141044015717396669618177363578e-9,
                8.16874429936300498280643295845549608799875243760444e-10,
                -5.40171343069506071195580771254457003027119801812906e-10,
                3.57196980564402406782605473752715548111353288529841e-10,
                -2.36202243161034517900734228786314968611422976577448e-10,
                1.56192528800632744729665024810177804569536077937121e-10,
                -1.03284819511659202670223731403488162048468310726584e-10
              };
              break;
            default:
              throw std::invalid_argument("Degree is unsupported.");
          }
        }

        /**
         * @param l     level of basis function
         * @param i     index of basis function
         * @param x     evaluation point
         * @return      value of modified fundamental spline basis function
         */
        inline float_t eval(LT l, IT i, float_t x) {
          if (l == 1) {
            return 1.0;
          }

          const IT hInv = static_cast<IT>(1) << l;

          if ((i != 1) && (i != hInv - 1)) {
            return fundamentalSplineBasis.eval(l, i, x);
          }

          if (i == hInv - 1) {
            // mirror the situation at x = 0.5
            x = 1.0 - x;
            i = 1;
          }

          const size_t p = bsplineBasis.getDegree();
          const float_t t = x * hInv + static_cast<float_t>(p);

          /*float_t y = 0.0;

          for (size_t k = 0; k < coefficients.size(); k++) {
            y += coefficients[k] * bsplineBasis.uniformBSpline(
                   t - static_cast<float_t>(k), p);
          }*/

          int kMin = std::max(static_cast<int>(std::floor(t)) -
                              static_cast<int>(p + 1) + 1,
                              0);
          int kMax = std::min(static_cast<int>(std::floor(t)),
                              static_cast<int>(coefficients.size()) - 1);

          float_t y = 0;

          for (int k = kMin; k <= kMax; k++) {
            y += coefficients[k] * bsplineBasis.uniformBSpline(
                   t - static_cast<float_t>(k), p);
          }

          return y;
        }

        /**
         * @param l     level of basis function
         * @param i     index of basis function
         * @param x     evaluation point
         * @return      value of derivative of modified
         *              fundamental spline basis function
         */
        inline float_t evalDx(LT l, IT i, float_t x) {
          if (l == 1) {
            return 0.0;
          }

          const IT hInv = static_cast<IT>(1) << l;

          if ((i != 1) && (i != hInv - 1)) {
            return fundamentalSplineBasis.evalDx(l, i, x);
          }

          const float_t hInvDbl = static_cast<float_t>(hInv);
          // inner derivative
          float_t dxFactor = hInvDbl;

          if (i == hInv - 1) {
            // mirror the situation at x = 0.5
            x = 1.0 - x;
            i = 1;
            dxFactor *= -1.0;
          }

          const size_t p = bsplineBasis.getDegree();
          const float_t t = x * hInv + static_cast<float_t>(p);

          /*float_t y = 0.0;

          for (size_t k = 0; k < coefficients.size(); k++) {
            y += coefficients[k] * bsplineBasis.uniformBSplineDx(
                   t - static_cast<float_t>(k), p);
          }*/

          int kMin = std::max(static_cast<int>(std::floor(t)) -
                              static_cast<int>(p + 1) + 1,
                              0);
          int kMax = std::min(static_cast<int>(std::floor(t)),
                              static_cast<int>(coefficients.size()) - 1);

          float_t y = 0;

          for (int k = kMin; k <= kMax; k++) {
            y += coefficients[k] * bsplineBasis.uniformBSplineDx(
                   t - static_cast<float_t>(k), p);
          }

          return dxFactor * y;
        }

        /**
         * @param l     level of basis function
         * @param i     index of basis function
         * @param x     evaluation point
         * @return      value of 2nd derivative of modified
         *              fundamental spline basis function
         */
        inline float_t evalDxDx(LT l, IT i, float_t x) {
          if (l == 1) {
            return 0.0;
          }

          const IT hInv = static_cast<IT>(1) << l;

          if ((i != 1) && (i != hInv - 1)) {
            return fundamentalSplineBasis.evalDxDx(l, i, x);
          }

          const float_t hInvDbl = static_cast<float_t>(hInv);
          // inner derivative
          const float_t dxFactor = hInvDbl * hInvDbl;

          if (i == hInv - 1) {
            // mirror the situation at x = 0.5
            x = 1.0 - x;
            i = 1;
          }

          const size_t p = bsplineBasis.getDegree();
          const float_t t = x * hInv + static_cast<float_t>(p);

          /*float_t y = 0.0;

          for (size_t k = 0; k < coefficients.size(); k++) {
            y += coefficients[k] * bsplineBasis.uniformBSplineDxDx(
                   t - static_cast<float_t>(k), p);
          }*/

          int kMin = std::max(static_cast<int>(std::floor(t)) -
                              static_cast<int>(p + 1) + 1,
                              0);
          int kMax = std::min(static_cast<int>(std::floor(t)),
                              static_cast<int>(coefficients.size()) - 1);

          float_t y = 0;

          for (int k = kMin; k <= kMax; k++) {
            y += coefficients[k] * bsplineBasis.uniformBSplineDxDx(
                   t - static_cast<float_t>(k), p);
          }

          return dxFactor * y;
        }

        /**
         * @return      B-spline degree
         */
        inline size_t getDegree() const {
          return bsplineBasis.getDegree();
        }

      protected:
        /// fundamental spline basis for fundamental spline evaluation
        FundamentalSplineBasis<LT, IT> fundamentalSplineBasis;
        /// B-spline basis
        BsplineBasis<LT, IT> bsplineBasis;
        /// B-spline coefficients
        std::vector<float_t> coefficients;
    };

    // default type-def (unsigned int for level and index)
    typedef FundamentalSplineModifiedBasis<unsigned int, unsigned int>
    SFundamentalSplineModifiedBase;
  }
}

#endif /* FUNDAMENTAL_SPLINE_MODIFIED_BASE_HPP */
