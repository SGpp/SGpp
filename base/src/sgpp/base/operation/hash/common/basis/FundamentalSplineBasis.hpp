// Copyright (C) 2008-today The SG++ project
// This file is part of the SG++ project. For conditions of distribution and
// use, please see the copyright notice provided with SG++ or at
// sgpp.sparsegrids.org

#ifndef FUNDAMENTAL_SPLINE_BASE_HPP
#define FUNDAMENTAL_SPLINE_BASE_HPP

#include <sgpp/base/operation/hash/common/basis/Basis.hpp>
#include <sgpp/base/operation/hash/common/basis/BsplineBasis.hpp>

#include <sgpp/globaldef.hpp>

#include <algorithm>
#include <cmath>
#include <stdexcept>
#include <vector>

namespace sgpp {
namespace base {

/**
 * Fundamental spline basis on Noboundary grids.
 */
template <class LT, class IT>
class FundamentalSplineBasis: public Basis<LT, IT> {
 public:
  /**
   * Default constructor.
   */
  FundamentalSplineBasis():
    bsplineBasis(BsplineBasis<LT, IT>()) {
  }

  /**
   * Constructor.
   *
   * @param degree    spline degree, must be odd
   *                  (if it's even, degree - 1 is used)
   */
  explicit FundamentalSplineBasis(size_t degree) :
    bsplineBasis(BsplineBasis<LT, IT>(degree)) {
    switch (bsplineBasis.getDegree()) {
      case 1:
        coefficients = {1.0};
        break;
      case 3:
        coefficients = {
          1.73205080756887729352744634150587236694280525381038,
          -0.464101615137754587054892683011744733885610507620761,
          0.124355652982141054692124390541106568599636776672664,
          -0.0333209967908096317136048791526815405129365990698963,
          0.00892833418109747216229512606961959345210961960692092,
          -0.00239233993358025693557562512579683329550187935778736,
          0.000641025553223555580007374433567739729897897824228503,
          -0.000171762279313965384453872608474125624089711939126657,
          0.0000460235640323059578081160003287627664609499322781261,
          -0.0000123319768152584467785913928409254417540877899858471,
          3.30434322872782930624957103493900055540122766526228e-6,
          -8.85396099652870446406891298830560467517120675202034e-7,
          2.37241169883652479377994160383241314667255035545854e-7,
          -6.35685798817394711050853427024047911518994669813800e-8,
          1.70331496433054050423472104263778499403428323796666e-8,
          -4.56401869148214906430349900310660860947186253728617e-9,
          1.22292512262319121486678558604858449754461776947814e-9,
          -3.27681799010615795163643341087729380706608540626390e-10
        };
        break;
      case 5:
        coefficients = {
          2.84217092202162248422242525148418205507454441028187,
          -1.32172947298750768735998028776961192232974061012594,
          0.573325870961657892019454183031902163113290323972794,
          -0.247041927402274729170186016854190876791082212183349,
          0.106378004643299472277922588629147956589687587555160,
          -0.0458040841912516591395386630410933217362590854998378,
          0.0197221240122630336904966447217218636782026371495144,
          -0.00849186101974092279916228955626521558096398714888897,
          0.00365638603314743455552362726853101089673824944378331,
          -0.00157434968651961051227729799197718886858081409923141,
          0.000677876162780151742373231809533932825237732011916792,
          -0.000291876764082027135854379002928855864077800150040568,
          0.000125674939005129299266675169786585686695408250779921,
          -0.0000541125304839056039712692770518054125460228282056222,
          0.0000232995215955657414930622640486050450847208710093762,
          -0.0000100321995982740617950219913669459341680503549100910,
          4.31961782420307211478838189301635227891702360979379e-6,
          -1.85992094399547136139608721191926381723900782679118e-6,
          8.00836106039360997774574062810852124279001903170563e-7,
          -3.44820284328089279473107497889968377271791858764047e-7,
          1.48471113611678694688792416507444575949642605384999e-7,
          -6.39280012776681974263463896185374887674867172263664e-8,
          2.75258213395395521509275229189583800658291171702343e-8,
          -1.18519400774841082207492123730342204763495907318412e-8,
          5.10315321267081017447672262216678004537966829293472e-9,
          -2.19729196585008046471597783045812268486871651450714e-9,
          9.46099750875882155703729308835059130788763901131562e-10,
          -4.07367228624581692688001022777500902694356356410664e-10,
          1.75402285862183641580593178845530599201808876245200e-10
        };
        break;
      case 7:
        coefficients = {
          4.96473288630168129311811288638564282856915459001201,
          -3.09104249976937323016147353638304519370331619944345,
          1.70795893666953627906533493052265534588606504917167,
          -0.920781827451838452205576584368352717216957097958711,
          0.493678613961461204614393523299156175592078226700942,
          -0.264354804944263020431793953613239060332283398887378,
          0.141516001458366244190425245331110371402504313654866,
          -0.0757522227123459977961891207543540502405713055255117,
          0.0405488633575635578215881751402690412662295170715097,
          -0.0217050352226382946517783765219359219604409891410464,
          0.0116182833222330846992180540283465922931300912325625,
          -0.00621904003491983775314385235024339094871548450075310,
          0.00332893046985265814587026439655045854004676411503573,
          -0.00178191134099685734726756938379123190952274734769991,
          0.000953822270862965159285367682634412912394696408067871,
          -0.000510562396125904201187725626456711293781498153388000,
          0.000273294059355944378661128106100070355685936290954209,
          -0.000146288961827285813815212007261317749438694314320174,
          0.0000783056185078115593321316664004140273922293774838237,
          -0.0000419154652086598636191350799853897268811968234385608,
          0.0000224365282739266451177375856844919649188530989615385,
          -0.0000120098345200441743988825002624530614290595667672354,
          6.42862939568321106628680833097025091682542067126703e-6,
          -3.44111951235195899007389905662201408160782026453605e-6,
          1.84196393499378630001318031209224045912429385709218e-6,
          -9.85967248634976412814178210426200321448701738479510e-7,
          5.27768973600509041117477972378237550522877567522277e-7,
          -2.82504403549874481775465099795149856712475030658643e-7,
          1.51219078834067628077430024450088811892248202774184e-7,
          -8.09446136629402643609401206513583136878980097089329e-8,
          4.33280676721499193892762997601519381925575737182353e-8,
          -2.31926667291256346086559658038769092308820350262882e-8,
          1.24145806380845881611492587899268816378819689805689e-8,
          -6.64528207211103855665014134866554385521040351970860e-9,
          3.55708945032344398937456457551237703826265389935871e-9,
          -1.90404037335059853419921741364392559727205317462360e-9,
          1.01919555130091934621355648014511208602206401335847e-9,
          -5.45555433766169402243595132087144173567822145989075e-10,
          2.92025147609692845956212976050377801686546747616182e-10,
          -1.56315346815909831605878903751739697708823541642651e-10
        };
        break;
      case 9:
        coefficients = {
          9.23670481112063673364106751485158808845875589510713,
          -6.83332060003491485508726701190868269416497113925150,
          4.40858014619008367403885178194362587224714986067101,
          -2.73199730685257746078951802648627731089737953070257,
          1.67147150980318502754117507956153704964123205654126,
          -1.01835409003379555407276898728836282429797185647014,
          0.619581094942205318090656594017307420638510835372510,
          -0.376789325787152601701900524727990003772828932345231,
          0.229104203846771249559376514570469165184816859553183,
          -0.139298243533669769828903686523556956887157260292599,
          0.0846936716356742540874647562757928466971764140675366,
          -0.0514936731149405743316063884497513559624261167954289,
          0.0313080474372220234195432667786928580356382972202209,
          -0.0190352168768335855044671665792542482211544078713598,
          0.0115733633284897207714309724614222140877765839814264,
          -0.00703657492268449422613006224278179269028466886633959,
          0.00427821922910564496997623813695812379600670212198842,
          -0.00260114613115506928668089074543878717327263819258057,
          0.00158149005851866790412072587253182084429301409463281,
          -0.000961541826964929126294760751708942144839076345696533,
          0.000584614920449677536726342129574400849028688059151700,
          -0.000355444345318279351887337831998777319223457273118028,
          0.000216109233951463359471500158954900151472101574748019,
          -0.000131393850018366673467791518305408692845626651332512,
          0.0000798871177641111013336069458584771613559147871362814,
          -0.0000485711590288123571511299221687634392293490582298138,
          0.0000295311378784173368535660642883371357841901774035128,
          -0.0000179548547292575203452416697002112613999129500548559,
          0.0000109165047982907413066837486636437070694032505410718,
          -6.63720641620759001300716126506867776150424490815251e-6,
          4.03540417242747489042717801959112590194428217496871e-6,
          -2.45351520107608546842939614607679977342609803883593e-6,
          1.49173083653979622453482997482090537610649335021863e-6,
          -9.06968453958526245576092826048427632954570268299131e-7,
          5.51434452065088948225708275078347075412937065518650e-7,
          -3.35270707153205805559273715395493153316134443401635e-7,
          2.03843714613868037523818217813119454859560007329138e-7,
          -1.23936446283666215297054631336233694585526600699815e-7,
          7.53530357633066920742475197938913505031086616692117e-8,
          -4.58144490100205551484148390006998953270603426573717e-8,
          2.78550653842916295216716822412312801591110988440916e-8,
          -1.69358070287706744636667394424953407317505882002329e-8,
          1.02969264569562316070691607446770505323238838777174e-8,
          -6.26050440229073694957483263814735536783296646102398e-9,
          3.80637033147145611604648889377565768946218908709062e-9,
          -2.31426322374356200892092488034760303347535916287324e-9,
          1.40706599788505294591626062972974151516267404289940e-9,
          -8.55492453102059313252501132832801979064995891474012e-10,
          5.20137177939515094320217303263194926163597085774205e-10,
          -3.16242046196762114093709628644978297356572551090246e-10,
          1.92274338432975307018020313044063558969391811257447e-10,
          -1.16902295771373748269884365137484372460644992576090e-10
        };
        break;
      case 11:
        coefficients = {
          18.1022552378485207290090756895209587347655584558549,
          -14.8688818996253071165935549519062156604939890929420,
          10.6809198087589856314192084174581170007877638563043,
          -7.29929857183754094017042261590720414649644941560783,
          4.89159742307410031050138948009419400019348340937820,
          -3.25233329706439245715899722793464161299432585547103,
          2.15547530864618871510632091925282047700656882886170,
          -1.42665430496812469384688666082256874321337239632711,
          0.943755112816300573428203763416354909331987855284128,
          -0.624170412525690960144457733043221749689235410917468,
          0.412769165501064392610791544545082658424569921370518,
          -0.272957442759584322173939803955525275709224077343629,
          0.180499454667731148679695448690134478095501851093389,
          -0.119358698169035295167151006896623400834155596417497,
          0.0789280022926241226867797072518713307459507997350754,
          -0.0521924493133689587555936958849879458594381050391056,
          0.0345131065379076060896518079103623777883830985245269,
          -0.0228223492129441566388231005120134249278248892110759,
          0.0150916459438142267112423728381954584169065044782254,
          -0.00997959360335135060251333809329648902988958717471757,
          0.00659916669033563199901625909078978228196692427683681,
          -0.00436380503140315383808662388449015124227945163853078,
          0.00288563620293758072380668343394778524794877586770685,
          -0.00190817330938424993251575068684925383245781898374665,
          0.00126181026340174291937953736315197040021412651466859,
          -0.000834392312666434314742313841043898202652604612625969,
          0.000551755324541922013123501868505517867813647854576883,
          -0.000364857074461417158016685957201948960795537420459293,
          0.000241267603341501667878871307441205968852594310520384,
          -0.000159542079615220427051066521797226863918485100351520,
          0.000105499763811536548604327620117730068889657135302406,
          -0.0000697634140856466103059031296538015178249707962466046,
          0.0000461321785855194338612412708880119924529631001594473,
          -0.0000305056443830757475940324850984228938402803123015764,
          0.0000201723475404810007768229963734092553188404361585821,
          -0.0000133392889585934724848417394216944690254438164737277,
          8.82081917158013443512862566306457138162256115308618e-6,
          -5.83290841807504538970203592652130247676670857783250e-6,
          3.85710441987849241482011953842494215309401995229224e-6,
          -2.55057227707270061572436255870694413703846284719473e-6,
          1.68660690310706055260222286112432268619207193941155e-6,
          -1.11529591659844836918251485370765784891839596141394e-6,
          7.37507346430097650315393781953945300691815157216597e-7,
          -4.87688583759242979536163942681101836527959285881902e-7,
          3.22491912630241298903027614564083589761298687397246e-7,
          -2.13252959317278860459663416163488020758899110981894e-7,
          1.41016946089185298443525246829484894166033109293830e-7,
          -9.32497215887823972626794786581158943194079029275108e-8,
          6.16628768211021093990802847800172114862734517587467e-8,
          -4.07755681526004245919356689000816413575804927416407e-8,
          2.69634996594640761747221320167681452931721324386862e-8,
          -1.78300474236201086025282531489851567765984943679878e-8,
          1.17904053681309420816836081714652309586618522634136e-8,
          -7.79659500853006790311893818604658098097363712695940e-9,
          5.15562373210176818197738685609906989125367146317155e-9,
          -3.40923903805827085281827780310273018732305206296957e-9,
          2.25441409663971504745441031210717916296546813591610e-9,
          -1.49076754735934540266152594754620306786124935545004e-9,
          9.85793995687104187313738956135523289903735319621857e-10,
          -6.51872120273959210030288009810158739798963443178273e-10,
          4.31060914399547932806966660846382837162626095603169e-10,
          -2.85045956321745168896881433260859744745534924954166e-10,
          1.88491218992930956657822003555516746981291423116963e-10,
          -1.24642847405762956399327439751872571395537400905706e-10
        };
        break;
      default:
        throw std::invalid_argument("Degree is unsupported.");
    }
  }

  /**
   * Destructor.
   */
  ~FundamentalSplineBasis() override {
  }

  /**
   * @param l     level of basis function
   * @param i     index of basis function
   * @param x     evaluation point
   * @return      value of fundamental spline basis function
   */
  inline double eval(LT l, IT i, double x) override {
    const size_t p = bsplineBasis.getDegree();
    const double hInv = static_cast<double>(static_cast<IT>(1) << l);
    const double t = x * hInv - static_cast<double>(i) +
                      static_cast<double>(p + 1) / 2.0;

    /*double y = coefficients[0] * bsplineBasis.uniformBSpline(t, p);

    for (size_t k = 1; k < coefficients.size(); k++) {
      y += coefficients[k] * (
             bsplineBasis.uniformBSpline(
               t - static_cast<double>(k), p) +
             bsplineBasis.uniformBSpline(
               t + static_cast<double>(k), p));
    }*/

    const int kMin = std::max(static_cast<int>(std::floor(t)) -
                              static_cast<int>(p + 1) + 1,
                              1 - static_cast<int>(coefficients.size()));
    const int kMax = std::min(static_cast<int>(std::floor(t)),
                              static_cast<int>(coefficients.size()) - 1);

    double y = 0;

    for (int k = kMin; k <= kMax; k++) {
      y += coefficients[std::abs(k)] * bsplineBasis.uniformBSpline(
             t - static_cast<double>(k), p);
    }

    return y;
  }

  /**
   * @param l     level of basis function
   * @param i     index of basis function
   * @param x     evaluation point
   * @return      value of derivative of fundamental spline basis
   *              function
   */
  inline double evalDx(LT l, IT i, double x) {
    const size_t p = bsplineBasis.getDegree();
    const double hInv = static_cast<double>(static_cast<IT>(1) << l);
    const double t = x * hInv - static_cast<double>(i) +
                      static_cast<double>(p + 1) / 2.0;

    /*double y = coefficients[0] *
                bsplineBasis.uniformBSplineDx(t, p);

    for (size_t k = 1; k < coefficients.size(); k++) {
      y += coefficients[k] * (
             bsplineBasis.uniformBSplineDx(
               t - static_cast<double>(k), p) +
             bsplineBasis.uniformBSplineDx(
               t + static_cast<double>(k), p));
    }*/

    const int kMin = std::max(static_cast<int>(std::floor(t)) -
                              static_cast<int>(p + 1) + 1,
                              1 - static_cast<int>(coefficients.size()));
    const int kMax = std::min(static_cast<int>(std::floor(t)),
                              static_cast<int>(coefficients.size()) - 1);

    double y = 0;

    for (int k = kMin; k <= kMax; k++) {
      y += coefficients[std::abs(k)] * bsplineBasis.uniformBSplineDx(
             t - static_cast<double>(k), p);
    }

    // don't forget the inner derivative
    return hInv * y;
  }

  /**
   * @param l     level of basis function
   * @param i     index of basis function
   * @param x     evaluation point
   * @return      value of 2nd derivative of fundamental spline basis
   *              function
   */
  inline double evalDxDx(LT l, IT i, double x) {
    const size_t p = bsplineBasis.getDegree();
    const double hInv = static_cast<double>(static_cast<IT>(1) << l);
    const double t = x * hInv - static_cast<double>(i) +
                      static_cast<double>(p + 1) / 2.0;

    /*double y = coefficients[0] *
                bsplineBasis.uniformBSplineDxDx(t, p);

    for (size_t k = 1; k < coefficients.size(); k++) {
      y += coefficients[k] * (
             bsplineBasis.uniformBSplineDxDx(
               t - static_cast<double>(k), p) +
             bsplineBasis.uniformBSplineDxDx(
               t + static_cast<double>(k), p));
    }*/

    const int kMin = std::max(static_cast<int>(std::floor(t)) -
                              static_cast<int>(p + 1) + 1,
                              1 - static_cast<int>(coefficients.size()));
    const int kMax = std::min(static_cast<int>(std::floor(t)),
                              static_cast<int>(coefficients.size()) - 1);

    double y = 0;

    for (int k = kMin; k <= kMax; k++) {
      y += coefficients[std::abs(k)] * bsplineBasis.uniformBSplineDxDx(
             t - static_cast<double>(k), p);
    }

    // don't forget the inner derivative
    return hInv * hInv * y;
  }

  /**
   * @return      fundamental spline degree
   */
  inline size_t getDegree() const {
    return bsplineBasis.getDegree();
  }

 protected:
  /// B-spline coefficients
  std::vector<double> coefficients;
  /// B-spline basis
  BsplineBasis<LT, IT> bsplineBasis;
};

// default type-def (unsigned int for level and index)
typedef FundamentalSplineBasis<unsigned int, unsigned int>
SFundamentalSplineBase;

}  // namespace base
}  // namespace sgpp

#endif /* FUNDAMENTAL_SPLINE_BASE_HPP */
