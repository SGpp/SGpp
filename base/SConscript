# Copyright (C) 2008-today The SG++ project
# This file is part of the SG++ project. For conditions of distribution and
# use, please see the copyright notice provided with SG++ or at
# sgpp.sparsegrids.org


import os
import fnmatch

Import('env')
Import('BUILD_DIR')
Import('EXAMPLE_DIR')
Import('PYSGPP_BUILD_PATH')
Import('moduleName')
Import('libraryTargetList')
Import('installTargetList')
Import('exampleTargetList')

libs = []

if env['USE_OCL']:
    libs += ['OpenCL']

# srcs = []
# for currentFolder, subdirNames, fileNames in os.walk("."):
#     if currentFolder.startswith("./src"):
#         for fileName in fnmatch.filter(fileNames, '*.cpp'):
#             srcs.append(os.path.join(currentFolder, fileName))
# 
# objs = []
# for sourceFile in srcs:
#     objs.append(env.SharedObject(sourceFile))
    
objs = []
for currentFolder, subdirNames, fileNames in os.walk("src", topdown=True):
  if os.path.exists(os.path.join(currentFolder, "SConscript")):
    objsSubmodule = env.SConscript(os.path.join(currentFolder, "SConscript"))
    objs += objsSubmodule
    # remove subfolders from iteration, as they are already processed (this is why topdown=True is also required
    subdirNames[:] = []
  else:
    for fileName in fnmatch.filter(fileNames, '*.cpp'):
      sourceFile = os.path.join(currentFolder, fileName)
      objs.append(env.SharedObject(sourceFile))

lib = env.SharedLibrary(target="sgpp%s" % moduleName,
                        source=objs,
                        LIBPATH=BUILD_DIR,
                        LIBS=libs)
libInstall = env.Install(BUILD_DIR, lib)

libStatic = env.StaticLibrary(target="sgpp%sstatic" % moduleName,
                              source=objs,
                              LIBS=libs)
libStaticInstall = env.Install(BUILD_DIR, libStatic)

if not env['NO_UNIT_TESTS'] and env['SG_PYTHON']:
  Import('testTargetList')
  moduleTest = env.Test(os.path.join('tests', 'test_%s.py' % moduleName))
  env.Requires(moduleTest, libInstall)
  testTargetList.append(moduleTest)

for fileName in os.listdir("examples"):
    if fnmatch.fnmatch(fileName, "*.cpp"):
        example = env.Program(source=os.path.join("examples", fileName),
                              LIBPATH=BUILD_DIR,
                              LIBS=libs + ["sgpp%s" % moduleName])
        env.Requires(example, libInstall)
        env.Install(os.path.join(EXAMPLE_DIR.abspath, moduleName), example)
        exampleTargetList.append(example)

libraryTargetList.append(lib)
installTargetList.append(libInstall)

libraryTargetList.append(libStatic)
installTargetList.append(libStaticInstall)
