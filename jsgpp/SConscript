# Copyright (C) 2008-today The SG++ project
# This file is part of the SG++ project. For conditions of distribution and
# use, please see the copyright notice provided with SG++ or at
# sgpp.sparsegrids.org

import fnmatch
import os

Import("env")
Import("BUILD_DIR")
Import("JSGPP_BUILD_PATH")
Import("moduleFolders")
Import("moduleName")
Import("libraryTargetList")
Import("installTargetList")
Import('flattenedDependencyGraph')

# as the dependency tracking for swig is buggy in scons,
# always trigger a "reswig" by removing the swig wrapper
if os.path.exists("jsgpp_wrap.cc"):
    os.remove("jsgpp_wrap.cc")

# clear jsgpp/java/*.java files
if os.path.isdir("java"):
    for filename in os.listdir("java"):
        if fnmatch.fnmatch(filename, "*.java"):
            os.remove(os.path.join("java", filename))
else:
    os.mkdir("java")

j_env = env.Clone()

# remove compiler warnings caused by swig
# (as we cannot do anything against them and as they confuse jenkins)
j_env.AppendUnique(CPPFLAGS=["-w"])

defines = ["-D" + c[0] + "=" + c[1] for c in j_env["CPPDEFINES"]]
#swigIncludePaths = ["-I" + module + "/src/" for module in moduleFolders]
swigIncludePaths = []
j_env.AppendUnique(SWIGFLAGS=["-c++", "-java", "-package", "sgpp",
                              "-outdir", os.path.join(moduleName, "java")] +
                             swigIncludePaths + defines)

if not j_env['USE_DOUBLE_PRECISION']:
    j_env.AppendUnique(SWIGFLAGS=['-DUSE_DOUBLE_PRECISION=0'])

#j_env["STATIC_AND_SHARED_OBJECTS_ARE_THE_SAME"]=1

shlibprefix = "lib"
if j_env['COMPILER'] == 'vcc':
    shlibprefix = ""

libJava = j_env.SharedLibrary(target="jsgpp",
                              source=["jsgpp.i"],
                              SHLIBPREFIX=shlibprefix,
                              LIBPATH=BUILD_DIR,
                              LIBS=flattenedDependencyGraph)
#TODO libs are set hacky!
installLibJava = j_env.Install(JSGPP_BUILD_PATH, libJava)
installTargetList.append(installLibJava)

# do javac compilation and jar packing in separate SCons process
# (see SConstruct_jsgpp_jar for more details)
jar = j_env.Command(target="jsgpp.jar",
                    source=installLibJava,
                    action="scons{} JSGPP_BUILD_PATH=\"{}\" -C \"{}\" -f \"{}\"".
                        format(".bat" if env['PLATFORM'] == 'win32' else "",
                               JSGPP_BUILD_PATH, moduleName, "SConstruct_jar"))
j_env.AlwaysBuild(jar)
installTargetList.append(jar)
