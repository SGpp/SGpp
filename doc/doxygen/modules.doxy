/**
@page modules Description of Modules

SG++ is grouped into several modules. This ensures
- Modularity - not all parts are required for every task
- Usability - not everything has to be compiled 
- Flexibility - only parts of SG++ can be shipped
- Correctness - at least to some degree; if some part is modified, it will not influence others
- ...

The modules correspond (roughly) to the corresponding namespaces in C++. Roughly, as all files belonging to a namespace belong to the respective module. But a module can contain files belonging to another namespace, especially static factory methods in the namespace sg::op_factory.

<div align="center">
@dotfile module_dependencies.dot "Dependencies within the modules"
</div>

The modules can depdend on each other. Especially all depend on the base module.
Libraries are generated for all modules, named sgppbase, sgpppde, etc. The following table briefly summarizes the main contents of each module:
<table>
   <tr>
     <td valign="top">
       base
     </td>
     <td>
       - the main sg::base::Grid class
       - different types of sparse grids (with or without grid points on the boundary etc.)
       - different types of basis function (piecewise linear/polynomial, b-splines, pre-wavelets, ...)
       - the underlying data structures
       - data types (sg::base::DataVector and sg::base::DataMatrix)
       - basic operations such as hierarchization and dehierarchization
       - evaluation, evaluation of multiple data points
       - adaptive refinement
       - basic OpenMP support
     </td>
   </tr>
   <tr>
     <td valign="top">
       datadriven
     </td>
     <td>
       - operations depending on datasets
       - data mining support
       - specialized regularization
     </td>
   </tr>
   <tr>
     <td valign="top">
       pde
     </td>
     <td>
       - support for elliptic and parabolic PDEs
       - algorithms (esp. UpDown schemes) for different PDEs
       - different boundary conditions (Dirichlet, Neumann)
       - simple applications
     </td>
   </tr>
   <tr>
     <td valign="top">
       solver
     </td>
     <td>
       - solver (CG, ...)
       - time-stepping schemes
     </td>
   </tr>
   <tr>
     <td valign="top">
       finance
     </td>
     <td>
       - support for the solution of financial problems
       - Black-Scholes equation
       - algorithmic schemes to support this
     </td>
   </tr>
   <tr>
     <td valign="top">
       parallel
     </td>
     <td>
       - MPI-based parallelization
       - hardware-tuned and -aware algorithms
     </td>
   </tr>
   <tr>
     <td valign="top">
       combigrid
     </td>
     <td>
       - combination technique
       - special variants
       - data structures and algorithms
       - dimensional adaptivity
     </td>
   </tr>
</table>

*/
