/**
@page installation Installation and Compilation
Installation and what is necessary for it.

@section overview Overview
- \ref requirements
- \ref compilation_scons
- \ref compilation_make
- \ref stepByStep
- \ref installInstructions
- \ref troubleshooting


@section requirements Requirements and Recommendations
Information about how to install the additional software is given \ref
installInstructions "below".
- SCons, http://www.scons.org/ for compilation. Cons is a Makefile
  replacement that facilitates quite a few things.
- swig, http://www.swig.org/, if you want to use SGpp within python,
  e.g.<br> It allows to wrap C/C++ functions as libraries that can be used
  from within other languages.
- <b>NOT NEEDED ANY MORE!</b> STLport, http://sourceforge.net/projects/stlport/, a Multiplatform
  C++ Standard Library (STL implementation). Highly recommended,
  though not required
- psyco, http://psyco.sourceforge.net/, is recommended, although not
  required, to speed up the execution of python code. Only for 32-bit architectures!
- doxygen, http://www.doxygen.nl/index.html, is needed. 
- dot, in the Graphviz package, http://www.graphviz.org/, is optional 
  for inheritance diagrams in the documentation generated by doxygen
- matplotlib, http://matplotlib.sourceforge.net/, is optional for program to be able
  to generate graphs with progress information


@section compilation_scons Compilation with SCons

Compilation of the C++ libraries is done with SCons. Execute
@verbatim
  scons
@endverbatim
in the main folder. For configuration and optimization, see below.

To obtain help on parameters for compilation, type
@verbatim
  scons --help
@endverbatim

Within compilation, all unit-tests (located in the
<tt>tests</tt>-folder) are executed.

After compilation, two files, <code>pysgpp.py</code> and
<code>_pysgpp.so</code> are copied to the <code>bin</code> folder and
can be used from within python. Import and print contents via
@verbatim
  import pysgpp
  dir(pysgpp)
@endverbatim
You might want to include your <code>bin</code> directory in your
Python search path by
@verbatim
  export PYTHONPATH=path_to_main_dir/bin:$PYTHONPATH
@endverbatim

To speed up compilation, you might want to consider a parallel build
(at least, if you have a multi-core machine available). This can be
easily done with scons by specifying to use <code>n</code> cores with
the parameter 
@verbatim
  scons -j n 
@endverbatim

You can get help on the options that are set and available to
configure the build with the parameter <code>-h</code> and help on
general options for scons with <code>-H</code>.


@subsection sconsInstallation How to get and use SCons

If you do not have SCons with version >= 1.0 available, there is a
ready-to-use version in the folder <tt>tools</tt>. 

Just change to the <tt>tools</tt> directory, unzip
<tt>scons-local-1.0.1.tar.gz</tt> and run the <tt>scons.py</tt>-Skript
in the <tt>tools</tt> folder. E.g.
@verbatim
  cd tools
  tar -xzf scons-local-1.0.1.tar.gz
  cd ..
  python tools/scons.py
@endverbatim

Alternatively, download and unpack the latest version and install
it. A local installation to <tt>$HOME/tools</tt> is done e.g. via
@verbatim
  python setup.py install --prefix=$HOME/tools
@endverbatim


@subsection sconsConfiguration Configuration for compilation

SCons uses the file <tt>SConstruct</tt>. This file
contains all information for compiling SGpp. Several platforms are 
supported: @verbatim
  all platforms that have a gcc
  Intel Core2 Platforms using icc
  general x86 / x86_64 SSE3 Platforms such as AMD Opteron or Intel Pentium4 using icc
  Intel Itanium Platforms using icc
@endverbatim
If you just execute @verbatim
  scons
@endverbatim
the default compilation with gcc is selected. For all other cases please execute:
@verbatim
  scons TARGETCPU=core2ICC
  scons TARGETCPU=opteronICC
  scons TARGETCPU=ia64ICC
@endverbatim

Additionally you can pass some specific flags to compiler using CPPFLAGS environment variable:
@verbatim
  scons CPPFLAGS='-g -O0'
@endverbatim


@subsection sconsEclipse Configuration for use of Scons within Eclipse

Create a makefile project (e.g. by checking out source with Subeclipse) and change the project properties as follows:
  - Properties -> C/C++ Build -> Builder Settings: disable "Use default build command" and set 'build command' to "scons"
  - Properties -> C/C++ Build -> Behaviour: set 'Build (Incremental build)' e.g. to "-j 2" and 'Clean' to "-c"


@subsection libjsgpp Building the jsgpp Library for use with Java

For the use of SGpp with Java, you have to generate the <tt>libjsgpp</tt>. It can be generated with 
@verbatim
  scons JSGPP=True JNI_CPPPATH=<jnipath> JNI_OS=linux 
@endverbatim
The <tt><jnipath></tt> can be determined with the command <tt>locate jni.h</tt>. On <tt>atsccsXX</tt> it is in general something in the form of <tt>/usr/lib/jvm/java-6-sun-1.6.X.XX/include</tt>.



@section compilation_make Compilation with make

It's also possible to build a static library and some applications with make. 

THERE IS NO PYTHON SUPPORT WHEN DOING SO. 

For configuration, see below.

@subsection makeConfiguration Configuration for compilation with make

The makefile in the main folder accepts four different targets: Type simply make
to build a static library, that contains all C++ Sparse Grids functionality. But there
are three additional targets which are native applications:
@verbatim
  default - builds the SG-Lib
  BSSolver - builds a Black Scholes Solver application
  HESolver - builds a very simple Heat Equation Solver application
  ClassifyBenchmark - builds a very simple Classifier application
@endverbatim
Additional Python-code is not needed to execute these applications.

There is the possibility the configure the targets (Compiler-Selection, parallelization, hashmap-Implementation):
@verbatim
  CC : Selects the comiler, default g++, avail: g++, icpc (Intel)
  OMP : 0/1; default 0: uses the OpenMP 3 for parallelization
  TR1 : 0/1; default 0: uses the TR1 Implementations for Hashmaps
@endverbatim
If using the Intel Compiler you can specify two 
addtional options regarding CPU vectorization versions and
library extensions for fast evaluation routines:
@verbatim
  VEC : selects to instruction set for the auto-vectorizer: sse3: for Intel Core 2 (Conroe, Merom) or older and AMD chips. 
  sse4: for Intel Nehalem or Intel Westmere CPUs, avx: for Intel Sandy Bridge CPUs, default is sse3
  EXT : includes special versions of OperationMultipleEval into the SG++ lib: ArBB: Intel Array Building Blocks, OCL: NVIDIA OpenCL
  with support for 2 or 1 GPUs.
@endverbatim
Just specify these parameters when you type make. E.g.: 
@verbatim
  make CC=icpc OMP=1 BSSolver
@endverbatim
For building a GPU-enabled classifier application:
@verbatim
  make CC=icpc OMP=1 EXT=OCL ClassifyBenchmark
@endverbatim

@section stepByStep Step-by-step instructions (Linux)

- Check out the current version. Change to the <tt>trunk</tt>
directory. All further steps assume that one is in the trunk directory
at the beginning.
- SCons
 - If you already have SCons installed, check the version with
   @verbatim  
  scons -v 
   @endverbatim
 - If SCons is not yet installed, or if the version is < 1.0, \ref
   installSCons "install SCons". 
- swig
 - Check with
   @verbatim
  swig -version
   @endverbatim
   whether swig is installed. \ref installSwig "Install swig", if necessary. 
- STLport
 - <b>NOT NEEDED ANY MORE!</b> 
 - If during compilation SCons tells you that it can't finde stlport,
   then you quite likely either don't set the path to stlport in your
   <tt>custom.py</tt> or via the command line parameters for
   <tt>scons</tt> - or you don't have STLport installed. \ref
   installSTLport "Install STLport", if desired.
- psyco
 - psyco can help you to speed up the execution of Python code
   (e.g. <tt>classifier.py</tt>). \ref installPsyco "Install psyco", if desired.
- doxygen
 - Doxygen is needed to generate the documentation. Installation instructions 
   for version 1.6.1 are provided @ref installDoxygen "below", older versions work as
   well.
- dot
 - Dot, contained in the Graphviz package, is only needed 
   if the doxygen Documentation should contain inheritance diagrams (usage of Doxyfile),
   using only Doxyfile.fast with doxygen doesn't require this package. 
   \ref installGraphviz "Install graphviz", if desired.




@section installInstructions How To Install
The following section contains installation instructions for the
required software

@subsection installSCons SCons
- To install locally proceed as follows:
  @verbatim
  cd tools/
  tar -xzf scons-1.2.0.tar.gz 
  cd scons-1.2.0
  python setup.py install --prefix=$HOME
  cd ../../
  @endverbatim
  Set the path to the <tt>~/bin</tt> directory, (preferrably in your
  starting scripts, e.g. your <tt>.bash_profile</tt> or
  <tt>.bashrc</tt>), e.g.
  @verbatim
  export PATH=$HOME/bin:$PATH
  @endverbatim
  Now you can compile via
  @verbatim
  scons
  @endverbatim
- Alternatively, you can use the standalone-version (no need to
  install): Unpack
  @verbatim
  cd tools
  tar -xzf scons-local-1.2.0.tar.gz
  cd ..
  @endverbatim
  and compile via  
  @verbatim
  python tools/scons.py
  @endverbatim
- SCons is platform independent

@subsection installSwig swig
- To install locally proceed as follows:
  @verbatim
  cd tools/
  tar -xzf swig-1.3.36.tar.gz  
  cd swig-1.3.36
  ./configure --prefix=$HOME
  make && make install
  @endverbatim
  Set the path to the <tt>~/bin</tt> directory, (preferrably in your
  starting scripts, e.g. your <tt>.bash_profile</tt> or
  <tt>.bashrc</tt>), e.g.
  @verbatim
  export PATH=$HOME/bin:$PATH
  @endverbatim
  Now swig is installed 
 - swig is platform dependent (ia64, x86_64, ...)

@subsection installSTLport STLport
- <b>NOT NEEDED ANY MORE!</b> STLport is not required, but recommended
- To install locally proceed as follows:
  @verbatim
  cd tools/
  tar -xzf STLport-5.2.1.tar.gz 
  cd STLport-5.2.1
  ./configure --prefix=$HOME
  make && make check
  @endverbatim
  If there is an error, saying that 'wcsftime' has not been declared,
  this is a bug. Execute
  @verbatim
  sed -i \
          -e 's/_STLP_VENDOR_CSTD::wcsftime/::wcsftime/' \
          stlport/stl/_cwchar.h || die "sed failed"
  @endverbatim
  to overcome this, then compile again.<br>
  Continue with
  @verbatim
  make install
  @endverbatim
 - Modify the default setting in your custom.py for <tt>STLPORT</tt>
   to point to <tt>~/include/stlport'</tt>.
 - If everything worked fine, running <tt>scons</tt> should tell you
   that it found stlport

@subsection installPsyco psyco
- Psyco is not required, but recommended for 32-Bit
  architectures. It can be used <b>only</b> on 32-Bit architectures.
- To install locally proceed as follows:
  @verbatim
  cd tools/
  tar -xzf psyco-1.6-src.tar.gz
  cd psyco-1.6
  python setup.py build_ext -i
  cp -r py-support/ ../../bin/psyco/
  @endverbatim
- Now psyco can be imported in Python, but only from within the
  <tt>bin/</tt> directory. The same holds for <tt>pysgpp</tt>
  libs.<br>
  To be able to use psyco from any directory, modify the Python search
  path:
  @verbatim
  export PYTHONPATH=$PYTHONPATH:$HOME/path_to_your_bin_directory/
  @endverbatim
  
@subsection installDoxygen Doxygen
- To install locally proceed as follows:
  @verbatim
  cd tools/
  tar -xzf doxygen-1.6.1.src.tar.gz
  cd doxygen-1.6.1
  ./configure --prefix $HOME
  make
  @endverbatim
  Set the path to the <tt>~/bin</tt> directory, (preferrably in your
  starting scripts, e.g. your <tt>.bash_profile</tt> or
  <tt>.bashrc</tt>), e.g.
  @verbatim
  export PATH=$HOME/bin:$PATH
  @endverbatim
  Now doxygen is installed.
  If required, create user manual with (eather one)
  @verbatim
  make docs
  make pdf
  @endverbatim

@subsection installGraphviz dot (graphviz)
- To install locally proceed as follows:
  @verbatim
  cd tools/
  tar -xzf graphviz-2.20.2.tar.gz
  cd graphviz-2.20.2
  ./configure --prefix=$HOME
  make && make install
  @endverbatim
  Set the path to the <tt>~/bin</tt> directory, (preferrably in your
  starting scripts, e.g. your <tt>.bash_profile</tt> or
  <tt>.bashrc</tt>), e.g.
  @verbatim
  export PATH=$HOME/bin:$PATH
  @endverbatim
  Now dot is installed 


@section troubleshooting Troubleshooting
A few helpful hints that have caused trouble before (or might cause trouble...)

- If there is an error like
  @verbatim
  build_pyclass/pyclass_wrap.cc:145:20: error: Python.h: No such file or directory
  @endverbatim
  this indicates that the package <tt>python-dev</tt> is missing. Just install it.

*/
