/**
@page installation Installation and Compilation
Installation and what is necessary for it.

@section overview Overview
- \ref requirements
- \ref compilation
- \ref stepByStep
- \ref installInstructions
- \ref troubleshooting


@section requirements Requirements and Recommendations
Information about how to install the additional software is given \ref
installInstructions "below".
- SCons, http://www.scons.org/ for compilation. Cons is a Makefile
  replacement that facilitates quite a few things.
- swig, http://www.swig.org/, if you want to use SGpp within python,
  e.g.<br> It allows to wrap C/C++ functions as libraries that can be used
  from within other languages.
- <b>NOT NEEDED ANY MORE!</b> STLport, http://sourceforge.net/projects/stlport/, a Multiplatform
  C++ Standard Library (STL implementation). Highly recommended,
  though not required
- psyco, http://psyco.sourceforge.net/, is recommended, although not
  required, to speed up the execution of python code. Only for 32-bit architectures!
- dot, in the Graphviz package, http://www.graphviz.org/, is optional 
  for inheritance diagrams in the documentation generated by doxygen


@section compilation Compilation

Compilation of the C++ libraries is done with SCons. Execute
@verbatim
  scons
@endverbatim
in the main folder. For configuration and optimization, see below.

Within compilation, all unit-tests (located in the
<tt>tests</tt>-folder) are executed.

After compilation, two files, <code>pysgpp.py</code> and
<code>_pysgpp.so</code> are copied to the <code>bin</code> folder and
can be used from within python. Import and print contents via
@verbatim
  import pysgpp
  dir(pysgpp)
@endverbatim
You might want to include your <code>bin</code> directory in your
Python search path by
@verbatim
  export PYTHONPATH=path_to_main_dir/bin:$PYTHONPATH
@endverbatim


@subsection sconsInstallation How to get and use SCons

If you do not have SCons with version >= 1.0 available, there is a
ready-to-use version in the folder <tt>tools</tt>. 

Just change to the <tt>tools</tt> directory, unzip
<tt>scons-local-1.0.1.tar.gz</tt> and run the <tt>scons.py</tt>-Skript
in the <tt>tools</tt> folder. E.g.
@verbatim
  cd tools
  tar -xzf scons-local-1.0.1.tar.gz
  cd ..
  python tools/scons.py
@endverbatim

Alternatively, download and unpack the latest version and install
it. A local installation to <tt>$HOME/tools</tt> is done e.g. via
@verbatim
  python setup.py install --prefix=$HOME/tools
@endverbatim


@subsection sconsConfiguration Configuration for compilation

SCons uses the file <tt>SConstruct</tt>. This file
contains all information for compiling SGpp. Several platforms are 
supported: @verbatim
  all platforms that have a gcc
  Intel Core2 Platforms using icc
  general x86 / x86_64 SSE3 Platforms such as AMD Opteron or Intel Pentium4 using icc
  Intel Itanium Platforms using icc
@endverbatim
If you just execute @verbatim
  scons
@endverbatim
the default compilation with gcc is selected. For all other cases please execute:
@verbatim
  scons TARGETCPU=core2ICC
  scons TARGETCPU=opteronICC
  scons TARGETCPU=ia64ICC
@endverbatim

@section stepByStep Step-by-step instructions (Linux)

- Check out the current version. Change to the <tt>trunk</tt>
directory. All further steps assume that one is in the trunk directory
at the beginning.
- SCons
 - If you already have SCons installed, check the version with
   @verbatim  
  scons -v 
   @endverbatim
 - If SCons is not yet installed, or if the version is < 1.0, \ref
   installSCons "install SCons". 
- swig
 - Check with
   @verbatim
  swig -version
   @endverbatim
   whether swig is installed. \ref installSwig "Install swig", if necessary. 
- STLport
 - <b>NOT NEEDED ANY MORE!</b> 
 - If during compilation SCons tells you that it can't finde stlport,
   then you quite likely either don't set the path to stlport in your
   <tt>custom.py</tt> or via the command line parameters for
   <tt>scons</tt> - or you don't have STLport installed. \ref
   installSTLport "Install STLport", if desired.
- psyco
 - psyco can help you to speed up the execution of Python code
   (e.g. <tt>classifier.py</tt>). \ref installPsyco "Install psyco", if desired.
- dot
 - Dot, contained in the Graphviz package, is only needed 
   if the doxygen Documentation should contain inheritance diagrams (usage of Doxyfile),
   using only Doxyfile.fast with doxygen doesn't require this package. 
   \ref installGraphviz "Install graphviz", if desired.




@section installInstructions How To Install
The following section contains installation instructions for the
required software

@subsection installSCons SCons
- To install locally proceed as follows:
  @verbatim
  cd tools/
  tar -xzf scons-1.2.0.tar.gz 
  cd scons-1.2.0
  python setup.py install --prefix=$HOME
  cd ../../
  @endverbatim
  Set the path to the <tt>~/bin</tt> directory, (preferrably in your
  starting scripts, e.g. your <tt>.bash_profile</tt> or
  <tt>.bashrc</tt>), e.g.
  @verbatim
  export PATH=$HOME/bin:$PATH
  @endverbatim
  Now you can compile via
  @verbatim
  scons
  @endverbatim
- Alternatively, you can use the standalone-version (no need to
  install): Unpack
  @verbatim
  cd tools
  tar -xzf scons-local-1.2.0.tar.gz
  cd ..
  @endverbatim
  and compile via  
  @verbatim
  python tools/scons.py
  @endverbatim
- SCons is platform independent

@subsection installSwig swig
- To install locally proceed as follows:
  @verbatim
  cd tools/
  tar -xzf swig-1.3.36.tar.gz  
  cd swig-1.3.36
  ./configure --prefix=$HOME
  make && make install
  @endverbatim
  Set the path to the <tt>~/bin</tt> directory, (preferrably in your
  starting scripts, e.g. your <tt>.bash_profile</tt> or
  <tt>.bashrc</tt>), e.g.
  @verbatim
  export PATH=$HOME/bin:$PATH
  @endverbatim
  Now swig is installed 
 - swig is platform dependent (ia64, x86_64, ...)

@subsection installSTLport STLport
- <b>NOT NEEDED ANY MORE!</b> STLport is not required, but recommended
- To install locally proceed as follows:
  @verbatim
  cd tools/
  tar -xzf STLport-5.2.1.tar.gz 
  cd STLport-5.2.1
  ./configure --prefix=$HOME
  make && make check
  @endverbatim
  If there is an error, saying that 'wcsftime' has not been declared,
  this is a bug. Execute
  @verbatim
  sed -i \
          -e 's/_STLP_VENDOR_CSTD::wcsftime/::wcsftime/' \
          stlport/stl/_cwchar.h || die "sed failed"
  @endverbatim
  to overcome this, then compile again.<br>
  Continue with
  @verbatim
  make install
  @endverbatim
 - Modify the default setting in your custom.py for <tt>STLPORT</tt>
   to point to <tt>~/include/stlport'</tt>.
 - If everything worked fine, running <tt>scons</tt> should tell you
   that it found stlport

@subsection installPsyco psyco
- Psyco is not required, but recommended for 32-Bit
  architectures. It can be used <b>only</b> on 32-Bit architectures.
- To install locally proceed as follows:
  @verbatim
  cd tools/
  tar -xzf psyco-1.6-src.tar.gz
  cd psyco-1.6
  python setup.py build_ext -i
  cp -r py-support/ ../../bin/psyco/
  @endverbatim
- Now psyco can be imported in Python, but only from within the
  <tt>bin/</tt> directory. The same holds for <tt>pysgpp</tt>
  libs.<br>
  To be able to use psyco from any directory, modify the Python search
  path:
  @verbatim
  export PYTHONPATH=$PYTHONPATH:$HOME/path_to_your_bin_directory/
  @endverbatim
  
@subsection installGraphviz dot (graphviz)
- To install locally proceed as follows:
  @verbatim
  cd tools/
  tar -xzf graphviz-2.20.2.tar.gz
  cd graphviz-2.20.2
  ./configure --prefix=$HOME
  make && make install
  @endverbatim
  Set the path to the <tt>~/bin</tt> directory, (preferrably in your
  starting scripts, e.g. your <tt>.bash_profile</tt> or
  <tt>.bashrc</tt>), e.g.
  @verbatim
  export PATH=$HOME/bin:$PATH
  @endverbatim
  Now dot is installed 


@section troubleshooting Troubleshooting
A few helpful hints that have caused trouble before (or might cause trouble...)

- If there is an error like
  @verbatim
  build_pyclass/pyclass_wrap.cc:145:20: error: Python.h: No such file or directory
  @endverbatim
  this indicates that the package <tt>python-dev</tt> is missing. Just install it.

*/